
G9_Time_Driven.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089f4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d0  08008b98  08008b98  00018b98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009168  08009168  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009168  08009168  00019168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009170  08009170  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009170  08009170  00019170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009174  08009174  00019174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  08009178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000360  200001d8  08009350  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000538  08009350  00020538  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   000131de  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b9c  00000000  00000000  00033429  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001150  00000000  00000000  00035fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d94  00000000  00000000  00037118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001827f  00000000  00000000  00037eac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000154e0  00000000  00000000  0005012b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092502  00000000  00000000  0006560b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c64  00000000  00000000  000f7b10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  000fd774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008b7c 	.word	0x08008b7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	08008b7c 	.word	0x08008b7c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b970 	b.w	8000f70 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f806 	bl	8000ca8 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__udivmoddi4>:
 8000ca8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cac:	9e08      	ldr	r6, [sp, #32]
 8000cae:	460d      	mov	r5, r1
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460f      	mov	r7, r1
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d14a      	bne.n	8000d4e <__udivmoddi4+0xa6>
 8000cb8:	428a      	cmp	r2, r1
 8000cba:	4694      	mov	ip, r2
 8000cbc:	d965      	bls.n	8000d8a <__udivmoddi4+0xe2>
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	b143      	cbz	r3, 8000cd6 <__udivmoddi4+0x2e>
 8000cc4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cc8:	f1c3 0220 	rsb	r2, r3, #32
 8000ccc:	409f      	lsls	r7, r3
 8000cce:	fa20 f202 	lsr.w	r2, r0, r2
 8000cd2:	4317      	orrs	r7, r2
 8000cd4:	409c      	lsls	r4, r3
 8000cd6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000cda:	fa1f f58c 	uxth.w	r5, ip
 8000cde:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ce8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cec:	fb01 f005 	mul.w	r0, r1, r5
 8000cf0:	4290      	cmp	r0, r2
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x62>
 8000cf4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cf8:	f101 37ff 	add.w	r7, r1, #4294967295
 8000cfc:	f080 811c 	bcs.w	8000f38 <__udivmoddi4+0x290>
 8000d00:	4290      	cmp	r0, r2
 8000d02:	f240 8119 	bls.w	8000f38 <__udivmoddi4+0x290>
 8000d06:	3902      	subs	r1, #2
 8000d08:	4462      	add	r2, ip
 8000d0a:	1a12      	subs	r2, r2, r0
 8000d0c:	b2a4      	uxth	r4, r4
 8000d0e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d12:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d16:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1a:	fb00 f505 	mul.w	r5, r0, r5
 8000d1e:	42a5      	cmp	r5, r4
 8000d20:	d90a      	bls.n	8000d38 <__udivmoddi4+0x90>
 8000d22:	eb1c 0404 	adds.w	r4, ip, r4
 8000d26:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2a:	f080 8107 	bcs.w	8000f3c <__udivmoddi4+0x294>
 8000d2e:	42a5      	cmp	r5, r4
 8000d30:	f240 8104 	bls.w	8000f3c <__udivmoddi4+0x294>
 8000d34:	4464      	add	r4, ip
 8000d36:	3802      	subs	r0, #2
 8000d38:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d3c:	1b64      	subs	r4, r4, r5
 8000d3e:	2100      	movs	r1, #0
 8000d40:	b11e      	cbz	r6, 8000d4a <__udivmoddi4+0xa2>
 8000d42:	40dc      	lsrs	r4, r3
 8000d44:	2300      	movs	r3, #0
 8000d46:	e9c6 4300 	strd	r4, r3, [r6]
 8000d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0xbc>
 8000d52:	2e00      	cmp	r6, #0
 8000d54:	f000 80ed 	beq.w	8000f32 <__udivmoddi4+0x28a>
 8000d58:	2100      	movs	r1, #0
 8000d5a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d5e:	4608      	mov	r0, r1
 8000d60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d64:	fab3 f183 	clz	r1, r3
 8000d68:	2900      	cmp	r1, #0
 8000d6a:	d149      	bne.n	8000e00 <__udivmoddi4+0x158>
 8000d6c:	42ab      	cmp	r3, r5
 8000d6e:	d302      	bcc.n	8000d76 <__udivmoddi4+0xce>
 8000d70:	4282      	cmp	r2, r0
 8000d72:	f200 80f8 	bhi.w	8000f66 <__udivmoddi4+0x2be>
 8000d76:	1a84      	subs	r4, r0, r2
 8000d78:	eb65 0203 	sbc.w	r2, r5, r3
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	4617      	mov	r7, r2
 8000d80:	2e00      	cmp	r6, #0
 8000d82:	d0e2      	beq.n	8000d4a <__udivmoddi4+0xa2>
 8000d84:	e9c6 4700 	strd	r4, r7, [r6]
 8000d88:	e7df      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000d8a:	b902      	cbnz	r2, 8000d8e <__udivmoddi4+0xe6>
 8000d8c:	deff      	udf	#255	; 0xff
 8000d8e:	fab2 f382 	clz	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	f040 8090 	bne.w	8000eb8 <__udivmoddi4+0x210>
 8000d98:	1a8a      	subs	r2, r1, r2
 8000d9a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d9e:	fa1f fe8c 	uxth.w	lr, ip
 8000da2:	2101      	movs	r1, #1
 8000da4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000da8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dac:	0c22      	lsrs	r2, r4, #16
 8000dae:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000db2:	fb0e f005 	mul.w	r0, lr, r5
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d908      	bls.n	8000dcc <__udivmoddi4+0x124>
 8000dba:	eb1c 0202 	adds.w	r2, ip, r2
 8000dbe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x122>
 8000dc4:	4290      	cmp	r0, r2
 8000dc6:	f200 80cb 	bhi.w	8000f60 <__udivmoddi4+0x2b8>
 8000dca:	4645      	mov	r5, r8
 8000dcc:	1a12      	subs	r2, r2, r0
 8000dce:	b2a4      	uxth	r4, r4
 8000dd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000dd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000dd8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ddc:	fb0e fe00 	mul.w	lr, lr, r0
 8000de0:	45a6      	cmp	lr, r4
 8000de2:	d908      	bls.n	8000df6 <__udivmoddi4+0x14e>
 8000de4:	eb1c 0404 	adds.w	r4, ip, r4
 8000de8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000dec:	d202      	bcs.n	8000df4 <__udivmoddi4+0x14c>
 8000dee:	45a6      	cmp	lr, r4
 8000df0:	f200 80bb 	bhi.w	8000f6a <__udivmoddi4+0x2c2>
 8000df4:	4610      	mov	r0, r2
 8000df6:	eba4 040e 	sub.w	r4, r4, lr
 8000dfa:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dfe:	e79f      	b.n	8000d40 <__udivmoddi4+0x98>
 8000e00:	f1c1 0720 	rsb	r7, r1, #32
 8000e04:	408b      	lsls	r3, r1
 8000e06:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e0a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e0e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e12:	fa20 f307 	lsr.w	r3, r0, r7
 8000e16:	40fd      	lsrs	r5, r7
 8000e18:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e1c:	4323      	orrs	r3, r4
 8000e1e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	fb09 5518 	mls	r5, r9, r8, r5
 8000e2a:	0c1c      	lsrs	r4, r3, #16
 8000e2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e30:	fb08 f50e 	mul.w	r5, r8, lr
 8000e34:	42a5      	cmp	r5, r4
 8000e36:	fa02 f201 	lsl.w	r2, r2, r1
 8000e3a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e3e:	d90b      	bls.n	8000e58 <__udivmoddi4+0x1b0>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e48:	f080 8088 	bcs.w	8000f5c <__udivmoddi4+0x2b4>
 8000e4c:	42a5      	cmp	r5, r4
 8000e4e:	f240 8085 	bls.w	8000f5c <__udivmoddi4+0x2b4>
 8000e52:	f1a8 0802 	sub.w	r8, r8, #2
 8000e56:	4464      	add	r4, ip
 8000e58:	1b64      	subs	r4, r4, r5
 8000e5a:	b29d      	uxth	r5, r3
 8000e5c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e60:	fb09 4413 	mls	r4, r9, r3, r4
 8000e64:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e68:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e6c:	45a6      	cmp	lr, r4
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x1da>
 8000e70:	eb1c 0404 	adds.w	r4, ip, r4
 8000e74:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e78:	d26c      	bcs.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7a:	45a6      	cmp	lr, r4
 8000e7c:	d96a      	bls.n	8000f54 <__udivmoddi4+0x2ac>
 8000e7e:	3b02      	subs	r3, #2
 8000e80:	4464      	add	r4, ip
 8000e82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e86:	fba3 9502 	umull	r9, r5, r3, r2
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	42ac      	cmp	r4, r5
 8000e90:	46c8      	mov	r8, r9
 8000e92:	46ae      	mov	lr, r5
 8000e94:	d356      	bcc.n	8000f44 <__udivmoddi4+0x29c>
 8000e96:	d053      	beq.n	8000f40 <__udivmoddi4+0x298>
 8000e98:	b156      	cbz	r6, 8000eb0 <__udivmoddi4+0x208>
 8000e9a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e9e:	eb64 040e 	sbc.w	r4, r4, lr
 8000ea2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ea6:	40ca      	lsrs	r2, r1
 8000ea8:	40cc      	lsrs	r4, r1
 8000eaa:	4317      	orrs	r7, r2
 8000eac:	e9c6 7400 	strd	r7, r4, [r6]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb8:	f1c3 0120 	rsb	r1, r3, #32
 8000ebc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ec4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ec8:	409d      	lsls	r5, r3
 8000eca:	432a      	orrs	r2, r5
 8000ecc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ed0:	fa1f fe8c 	uxth.w	lr, ip
 8000ed4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed8:	fb07 1510 	mls	r5, r7, r0, r1
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ee2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ee6:	428d      	cmp	r5, r1
 8000ee8:	fa04 f403 	lsl.w	r4, r4, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x258>
 8000eee:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ef6:	d22f      	bcs.n	8000f58 <__udivmoddi4+0x2b0>
 8000ef8:	428d      	cmp	r5, r1
 8000efa:	d92d      	bls.n	8000f58 <__udivmoddi4+0x2b0>
 8000efc:	3802      	subs	r0, #2
 8000efe:	4461      	add	r1, ip
 8000f00:	1b49      	subs	r1, r1, r5
 8000f02:	b292      	uxth	r2, r2
 8000f04:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f08:	fb07 1115 	mls	r1, r7, r5, r1
 8000f0c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f10:	fb05 f10e 	mul.w	r1, r5, lr
 8000f14:	4291      	cmp	r1, r2
 8000f16:	d908      	bls.n	8000f2a <__udivmoddi4+0x282>
 8000f18:	eb1c 0202 	adds.w	r2, ip, r2
 8000f1c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f20:	d216      	bcs.n	8000f50 <__udivmoddi4+0x2a8>
 8000f22:	4291      	cmp	r1, r2
 8000f24:	d914      	bls.n	8000f50 <__udivmoddi4+0x2a8>
 8000f26:	3d02      	subs	r5, #2
 8000f28:	4462      	add	r2, ip
 8000f2a:	1a52      	subs	r2, r2, r1
 8000f2c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f30:	e738      	b.n	8000da4 <__udivmoddi4+0xfc>
 8000f32:	4631      	mov	r1, r6
 8000f34:	4630      	mov	r0, r6
 8000f36:	e708      	b.n	8000d4a <__udivmoddi4+0xa2>
 8000f38:	4639      	mov	r1, r7
 8000f3a:	e6e6      	b.n	8000d0a <__udivmoddi4+0x62>
 8000f3c:	4610      	mov	r0, r2
 8000f3e:	e6fb      	b.n	8000d38 <__udivmoddi4+0x90>
 8000f40:	4548      	cmp	r0, r9
 8000f42:	d2a9      	bcs.n	8000e98 <__udivmoddi4+0x1f0>
 8000f44:	ebb9 0802 	subs.w	r8, r9, r2
 8000f48:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f4c:	3b01      	subs	r3, #1
 8000f4e:	e7a3      	b.n	8000e98 <__udivmoddi4+0x1f0>
 8000f50:	4645      	mov	r5, r8
 8000f52:	e7ea      	b.n	8000f2a <__udivmoddi4+0x282>
 8000f54:	462b      	mov	r3, r5
 8000f56:	e794      	b.n	8000e82 <__udivmoddi4+0x1da>
 8000f58:	4640      	mov	r0, r8
 8000f5a:	e7d1      	b.n	8000f00 <__udivmoddi4+0x258>
 8000f5c:	46d0      	mov	r8, sl
 8000f5e:	e77b      	b.n	8000e58 <__udivmoddi4+0x1b0>
 8000f60:	3d02      	subs	r5, #2
 8000f62:	4462      	add	r2, ip
 8000f64:	e732      	b.n	8000dcc <__udivmoddi4+0x124>
 8000f66:	4608      	mov	r0, r1
 8000f68:	e70a      	b.n	8000d80 <__udivmoddi4+0xd8>
 8000f6a:	4464      	add	r4, ip
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	e742      	b.n	8000df6 <__udivmoddi4+0x14e>

08000f70 <__aeabi_idiv0>:
 8000f70:	4770      	bx	lr
 8000f72:	bf00      	nop

08000f74 <hSCH_Init>:

sTaskTCB hSCH_tasks_G[hSCH_MAX_TASKS];


void hSCH_Init(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
    uint8_t i;
    for(i = 0;i < hSCH_MAX_TASKS;i ++)
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	71fb      	strb	r3, [r7, #7]
 8000f7e:	e02b      	b.n	8000fd8 <hSCH_Init+0x64>
    {
        hSCH_tasks_G[i].pTask  = NULL;
 8000f80:	79fb      	ldrb	r3, [r7, #7]
 8000f82:	4a1a      	ldr	r2, [pc, #104]	; (8000fec <hSCH_Init+0x78>)
 8000f84:	011b      	lsls	r3, r3, #4
 8000f86:	4413      	add	r3, r2
 8000f88:	330c      	adds	r3, #12
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[i].Delay  = 0;
 8000f8e:	79fb      	ldrb	r3, [r7, #7]
 8000f90:	4a16      	ldr	r2, [pc, #88]	; (8000fec <hSCH_Init+0x78>)
 8000f92:	011b      	lsls	r3, r3, #4
 8000f94:	4413      	add	r3, r2
 8000f96:	3304      	adds	r3, #4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[i].Period = 0;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
 8000f9e:	4a13      	ldr	r2, [pc, #76]	; (8000fec <hSCH_Init+0x78>)
 8000fa0:	011b      	lsls	r3, r3, #4
 8000fa2:	4413      	add	r3, r2
 8000fa4:	3308      	adds	r3, #8
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[i].RunMe  = 0;
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	4a0f      	ldr	r2, [pc, #60]	; (8000fec <hSCH_Init+0x78>)
 8000fae:	011b      	lsls	r3, r3, #4
 8000fb0:	4413      	add	r3, r2
 8000fb2:	3301      	adds	r3, #1
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]
        hSCH_tasks_G[i].Co_op  = 1;
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	4a0c      	ldr	r2, [pc, #48]	; (8000fec <hSCH_Init+0x78>)
 8000fbc:	011b      	lsls	r3, r3, #4
 8000fbe:	4413      	add	r3, r2
 8000fc0:	3302      	adds	r3, #2
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	701a      	strb	r2, [r3, #0]
        hSCH_tasks_G[i].Enable = 0;
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4a08      	ldr	r2, [pc, #32]	; (8000fec <hSCH_Init+0x78>)
 8000fca:	011b      	lsls	r3, r3, #4
 8000fcc:	4413      	add	r3, r2
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
    for(i = 0;i < hSCH_MAX_TASKS;i ++)
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	2b03      	cmp	r3, #3
 8000fdc:	d9d0      	bls.n	8000f80 <hSCH_Init+0xc>
    }
}
 8000fde:	bf00      	nop
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	200001f4 	.word	0x200001f4

08000ff0 <SCH_Start>:


void SCH_Start(TIM_HandleTypeDef *htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]

	HAL_TIM_Base_Start_IT(htim);
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f003 f9a1 	bl	8004340 <HAL_TIM_Base_Start_IT>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
	...

08001008 <hSCH_Dispatch_Tasks>:


void hSCH_Dispatch_Tasks(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
   uint8_t Index;

    for (Index = 0; Index < hSCH_MAX_TASKS; Index++)
 800100e:	2300      	movs	r3, #0
 8001010:	71fb      	strb	r3, [r7, #7]
 8001012:	e03f      	b.n	8001094 <hSCH_Dispatch_Tasks+0x8c>
    {
        if ((hSCH_tasks_G[Index].Co_op) && (hSCH_tasks_G[Index].RunMe > 0))
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	4a23      	ldr	r2, [pc, #140]	; (80010a4 <hSCH_Dispatch_Tasks+0x9c>)
 8001018:	011b      	lsls	r3, r3, #4
 800101a:	4413      	add	r3, r2
 800101c:	3302      	adds	r3, #2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d025      	beq.n	8001070 <hSCH_Dispatch_Tasks+0x68>
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <hSCH_Dispatch_Tasks+0x9c>)
 8001028:	011b      	lsls	r3, r3, #4
 800102a:	4413      	add	r3, r2
 800102c:	3301      	adds	r3, #1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d01d      	beq.n	8001070 <hSCH_Dispatch_Tasks+0x68>
        {
            if(hSCH_tasks_G[Index].pTask != NULL)
 8001034:	79fb      	ldrb	r3, [r7, #7]
 8001036:	4a1b      	ldr	r2, [pc, #108]	; (80010a4 <hSCH_Dispatch_Tasks+0x9c>)
 8001038:	011b      	lsls	r3, r3, #4
 800103a:	4413      	add	r3, r2
 800103c:	330c      	adds	r3, #12
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2b00      	cmp	r3, #0
 8001042:	d006      	beq.n	8001052 <hSCH_Dispatch_Tasks+0x4a>
            {
                hSCH_tasks_G[Index].pTask();
 8001044:	79fb      	ldrb	r3, [r7, #7]
 8001046:	4a17      	ldr	r2, [pc, #92]	; (80010a4 <hSCH_Dispatch_Tasks+0x9c>)
 8001048:	011b      	lsls	r3, r3, #4
 800104a:	4413      	add	r3, r2
 800104c:	330c      	adds	r3, #12
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4798      	blx	r3
            }
            hSCH_tasks_G[Index].RunMe -= 1;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <hSCH_Dispatch_Tasks+0x9c>)
 8001056:	011b      	lsls	r3, r3, #4
 8001058:	4413      	add	r3, r2
 800105a:	3301      	adds	r3, #1
 800105c:	781a      	ldrb	r2, [r3, #0]
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	3a01      	subs	r2, #1
 8001062:	b2d1      	uxtb	r1, r2
 8001064:	4a0f      	ldr	r2, [pc, #60]	; (80010a4 <hSCH_Dispatch_Tasks+0x9c>)
 8001066:	011b      	lsls	r3, r3, #4
 8001068:	4413      	add	r3, r2
 800106a:	3301      	adds	r3, #1
 800106c:	460a      	mov	r2, r1
 800106e:	701a      	strb	r2, [r3, #0]
        }

        if (hSCH_tasks_G[Index].Period == 0)
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	4a0c      	ldr	r2, [pc, #48]	; (80010a4 <hSCH_Dispatch_Tasks+0x9c>)
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	4413      	add	r3, r2
 8001078:	3308      	adds	r3, #8
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b00      	cmp	r3, #0
 800107e:	d106      	bne.n	800108e <hSCH_Dispatch_Tasks+0x86>
        {
            hSCH_tasks_G[Index].pTask = NULL;
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4a08      	ldr	r2, [pc, #32]	; (80010a4 <hSCH_Dispatch_Tasks+0x9c>)
 8001084:	011b      	lsls	r3, r3, #4
 8001086:	4413      	add	r3, r2
 8001088:	330c      	adds	r3, #12
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    for (Index = 0; Index < hSCH_MAX_TASKS; Index++)
 800108e:	79fb      	ldrb	r3, [r7, #7]
 8001090:	3301      	adds	r3, #1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d9bc      	bls.n	8001014 <hSCH_Dispatch_Tasks+0xc>
        }
    }
}
 800109a:	bf00      	nop
 800109c:	bf00      	nop
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	200001f4 	.word	0x200001f4

080010a8 <SCH_Add_Task>:

sTaskTCB *SCH_Add_Task(TASK_SCH *pFunction, uint32_t DELAY, uint32_t PERIOD,uint8_t task_mode,uint8_t ENABLE)
{
 80010a8:	b480      	push	{r7}
 80010aa:	b085      	sub	sp, #20
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	60f8      	str	r0, [r7, #12]
 80010b0:	60b9      	str	r1, [r7, #8]
 80010b2:	607a      	str	r2, [r7, #4]
 80010b4:	70fb      	strb	r3, [r7, #3]
    static uint8_t Index = 0;
    if (Index < hSCH_MAX_TASKS)
 80010b6:	4b22      	ldr	r3, [pc, #136]	; (8001140 <SCH_Add_Task+0x98>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b03      	cmp	r3, #3
 80010bc:	d834      	bhi.n	8001128 <SCH_Add_Task+0x80>
    {
        hSCH_tasks_G[Index].pTask  = pFunction;
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <SCH_Add_Task+0x98>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	4a20      	ldr	r2, [pc, #128]	; (8001144 <SCH_Add_Task+0x9c>)
 80010c4:	011b      	lsls	r3, r3, #4
 80010c6:	4413      	add	r3, r2
 80010c8:	330c      	adds	r3, #12
 80010ca:	68fa      	ldr	r2, [r7, #12]
 80010cc:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[Index].Delay  = DELAY;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	; (8001140 <SCH_Add_Task+0x98>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
 80010d2:	4a1c      	ldr	r2, [pc, #112]	; (8001144 <SCH_Add_Task+0x9c>)
 80010d4:	011b      	lsls	r3, r3, #4
 80010d6:	4413      	add	r3, r2
 80010d8:	3304      	adds	r3, #4
 80010da:	68ba      	ldr	r2, [r7, #8]
 80010dc:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[Index].Period = PERIOD;
 80010de:	4b18      	ldr	r3, [pc, #96]	; (8001140 <SCH_Add_Task+0x98>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	4a18      	ldr	r2, [pc, #96]	; (8001144 <SCH_Add_Task+0x9c>)
 80010e4:	011b      	lsls	r3, r3, #4
 80010e6:	4413      	add	r3, r2
 80010e8:	3308      	adds	r3, #8
 80010ea:	687a      	ldr	r2, [r7, #4]
 80010ec:	601a      	str	r2, [r3, #0]
        hSCH_tasks_G[Index].RunMe  = 0;
 80010ee:	4b14      	ldr	r3, [pc, #80]	; (8001140 <SCH_Add_Task+0x98>)
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	4a14      	ldr	r2, [pc, #80]	; (8001144 <SCH_Add_Task+0x9c>)
 80010f4:	011b      	lsls	r3, r3, #4
 80010f6:	4413      	add	r3, r2
 80010f8:	3301      	adds	r3, #1
 80010fa:	2200      	movs	r2, #0
 80010fc:	701a      	strb	r2, [r3, #0]
        hSCH_tasks_G[Index].Co_op  = task_mode;
 80010fe:	4b10      	ldr	r3, [pc, #64]	; (8001140 <SCH_Add_Task+0x98>)
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4a10      	ldr	r2, [pc, #64]	; (8001144 <SCH_Add_Task+0x9c>)
 8001104:	011b      	lsls	r3, r3, #4
 8001106:	4413      	add	r3, r2
 8001108:	3302      	adds	r3, #2
 800110a:	78fa      	ldrb	r2, [r7, #3]
 800110c:	701a      	strb	r2, [r3, #0]
        hSCH_tasks_G[Index].Enable = ENABLE;
 800110e:	4b0c      	ldr	r3, [pc, #48]	; (8001140 <SCH_Add_Task+0x98>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	4a0c      	ldr	r2, [pc, #48]	; (8001144 <SCH_Add_Task+0x9c>)
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	4413      	add	r3, r2
 8001118:	7e3a      	ldrb	r2, [r7, #24]
 800111a:	701a      	strb	r2, [r3, #0]
        Index++;
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <SCH_Add_Task+0x98>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	b2da      	uxtb	r2, r3
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <SCH_Add_Task+0x98>)
 8001126:	701a      	strb	r2, [r3, #0]
    }
    return &hSCH_tasks_G[Index-1];
 8001128:	4b05      	ldr	r3, [pc, #20]	; (8001140 <SCH_Add_Task+0x98>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	3b01      	subs	r3, #1
 800112e:	011b      	lsls	r3, r3, #4
 8001130:	4a04      	ldr	r2, [pc, #16]	; (8001144 <SCH_Add_Task+0x9c>)
 8001132:	4413      	add	r3, r2
}
 8001134:	4618      	mov	r0, r3
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20000234 	.word	0x20000234
 8001144:	200001f4 	.word	0x200001f4

08001148 <SCH_Update>:
    task->Delay  += delaytime;
}


void SCH_Update(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
	uint8_t Index_temp;

    for (Index_temp = 0; Index_temp < hSCH_MAX_TASKS; Index_temp++)
 800114e:	2300      	movs	r3, #0
 8001150:	71fb      	strb	r3, [r7, #7]
 8001152:	e05b      	b.n	800120c <SCH_Update+0xc4>
    {
        if(hSCH_tasks_G[Index_temp].Enable)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	4a31      	ldr	r2, [pc, #196]	; (800121c <SCH_Update+0xd4>)
 8001158:	011b      	lsls	r3, r3, #4
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d051      	beq.n	8001206 <SCH_Update+0xbe>
        {
            if(hSCH_tasks_G[Index_temp].Delay == 0)
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	4a2d      	ldr	r2, [pc, #180]	; (800121c <SCH_Update+0xd4>)
 8001166:	011b      	lsls	r3, r3, #4
 8001168:	4413      	add	r3, r2
 800116a:	3304      	adds	r3, #4
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d13c      	bne.n	80011ec <SCH_Update+0xa4>
            {
                if(hSCH_tasks_G[Index_temp].Co_op)
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	4a29      	ldr	r2, [pc, #164]	; (800121c <SCH_Update+0xd4>)
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	4413      	add	r3, r2
 800117a:	3302      	adds	r3, #2
 800117c:	781b      	ldrb	r3, [r3, #0]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d00f      	beq.n	80011a2 <SCH_Update+0x5a>
                {
                    hSCH_tasks_G[Index_temp].RunMe += 1;
 8001182:	79fb      	ldrb	r3, [r7, #7]
 8001184:	4a25      	ldr	r2, [pc, #148]	; (800121c <SCH_Update+0xd4>)
 8001186:	011b      	lsls	r3, r3, #4
 8001188:	4413      	add	r3, r2
 800118a:	3301      	adds	r3, #1
 800118c:	781a      	ldrb	r2, [r3, #0]
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	3201      	adds	r2, #1
 8001192:	b2d1      	uxtb	r1, r2
 8001194:	4a21      	ldr	r2, [pc, #132]	; (800121c <SCH_Update+0xd4>)
 8001196:	011b      	lsls	r3, r3, #4
 8001198:	4413      	add	r3, r2
 800119a:	3301      	adds	r3, #1
 800119c:	460a      	mov	r2, r1
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e00e      	b.n	80011c0 <SCH_Update+0x78>
                }
                else
                {
                    if( hSCH_tasks_G[Index_temp].pTask != NULL )
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4a1d      	ldr	r2, [pc, #116]	; (800121c <SCH_Update+0xd4>)
 80011a6:	011b      	lsls	r3, r3, #4
 80011a8:	4413      	add	r3, r2
 80011aa:	330c      	adds	r3, #12
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d006      	beq.n	80011c0 <SCH_Update+0x78>
                    {
                        hSCH_tasks_G[Index_temp].pTask();
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <SCH_Update+0xd4>)
 80011b6:	011b      	lsls	r3, r3, #4
 80011b8:	4413      	add	r3, r2
 80011ba:	330c      	adds	r3, #12
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4798      	blx	r3
                    }
                }

                if(hSCH_tasks_G[Index_temp].Period)
 80011c0:	79fb      	ldrb	r3, [r7, #7]
 80011c2:	4a16      	ldr	r2, [pc, #88]	; (800121c <SCH_Update+0xd4>)
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	4413      	add	r3, r2
 80011c8:	3308      	adds	r3, #8
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d01a      	beq.n	8001206 <SCH_Update+0xbe>
                {
                    hSCH_tasks_G[Index_temp].Delay = (hSCH_tasks_G[Index_temp].Period - 1);
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	4a12      	ldr	r2, [pc, #72]	; (800121c <SCH_Update+0xd4>)
 80011d4:	011b      	lsls	r3, r3, #4
 80011d6:	4413      	add	r3, r2
 80011d8:	3308      	adds	r3, #8
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	3a01      	subs	r2, #1
 80011e0:	490e      	ldr	r1, [pc, #56]	; (800121c <SCH_Update+0xd4>)
 80011e2:	011b      	lsls	r3, r3, #4
 80011e4:	440b      	add	r3, r1
 80011e6:	3304      	adds	r3, #4
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	e00c      	b.n	8001206 <SCH_Update+0xbe>
                }
            }
            else
            {
                hSCH_tasks_G[Index_temp].Delay -= 1;
 80011ec:	79fb      	ldrb	r3, [r7, #7]
 80011ee:	4a0b      	ldr	r2, [pc, #44]	; (800121c <SCH_Update+0xd4>)
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	3304      	adds	r3, #4
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	3a01      	subs	r2, #1
 80011fc:	4907      	ldr	r1, [pc, #28]	; (800121c <SCH_Update+0xd4>)
 80011fe:	011b      	lsls	r3, r3, #4
 8001200:	440b      	add	r3, r1
 8001202:	3304      	adds	r3, #4
 8001204:	601a      	str	r2, [r3, #0]
    for (Index_temp = 0; Index_temp < hSCH_MAX_TASKS; Index_temp++)
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	3301      	adds	r3, #1
 800120a:	71fb      	strb	r3, [r7, #7]
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	2b03      	cmp	r3, #3
 8001210:	d9a0      	bls.n	8001154 <SCH_Update+0xc>
            }
         }
      }
}
 8001212:	bf00      	nop
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	200001f4 	.word	0x200001f4

08001220 <DELAY_TIM_Init>:
	Author: G8

*****************************************************************************************************/
#include "delay_timer.h"
void DELAY_TIM_Init(TIM_HandleTypeDef *htim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
	HAL_TIM_Base_Start(htim);
 8001228:	6878      	ldr	r0, [r7, #4]
 800122a:	f003 f82f 	bl	800428c <HAL_TIM_Base_Start>
}
 800122e:	bf00      	nop
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <DELAY_TIM_Us>:

void DELAY_TIM_Us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8001236:	b480      	push	{r7}
 8001238:	b083      	sub	sp, #12
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
 800123e:	460b      	mov	r3, r1
 8001240:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COUNTER(htim,0);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2200      	movs	r2, #0
 8001248:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(htim)<time){}
 800124a:	bf00      	nop
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001252:	887b      	ldrh	r3, [r7, #2]
 8001254:	429a      	cmp	r2, r3
 8001256:	d3f9      	bcc.n	800124c <DELAY_TIM_Us+0x16>
}
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	370c      	adds	r7, #12
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <DHT11_SetPinIn>:
static DHT11_Status DHT11_Start(DHT11_Sensor* dht);
static uint8_t DHT11_ReadByte(DHT11_Sensor* dht);

/* Private user code ---------------------------------------------------------*/
static void DHT11_SetPinIn(DHT11_Sensor* dht)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b088      	sub	sp, #32
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126e:	f107 030c 	add.w	r3, r7, #12
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = dht->Pin;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	889b      	ldrh	r3, [r3, #4]
 8001282:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001288:	2301      	movs	r3, #1
 800128a:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f107 020c 	add.w	r2, r7, #12
 8001294:	4611      	mov	r1, r2
 8001296:	4618      	mov	r0, r3
 8001298:	f001 fcfc 	bl	8002c94 <HAL_GPIO_Init>
}
 800129c:	bf00      	nop
 800129e:	3720      	adds	r7, #32
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}

080012a4 <DHT11_SetPinOut>:

static void DHT11_SetPinOut(DHT11_Sensor* dht)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	2200      	movs	r2, #0
 80012b2:	601a      	str	r2, [r3, #0]
 80012b4:	605a      	str	r2, [r3, #4]
 80012b6:	609a      	str	r2, [r3, #8]
 80012b8:	60da      	str	r2, [r3, #12]
 80012ba:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Pin = dht->Pin;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	889b      	ldrh	r3, [r3, #4]
 80012c0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c2:	2301      	movs	r3, #1
 80012c4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c6:	2300      	movs	r3, #0
 80012c8:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(dht->Port, &GPIO_InitStruct);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f107 020c 	add.w	r2, r7, #12
 80012d2:	4611      	mov	r1, r2
 80012d4:	4618      	mov	r0, r3
 80012d6:	f001 fcdd 	bl	8002c94 <HAL_GPIO_Init>
}
 80012da:	bf00      	nop
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}

080012e2 <DHT11_WritePin>:

static void DHT11_WritePin(DHT11_Sensor* dht, uint8_t value)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
 80012ea:	460b      	mov	r3, r1
 80012ec:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(dht->Port, dht->Pin, value);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	889b      	ldrh	r3, [r3, #4]
 80012f6:	78fa      	ldrb	r2, [r7, #3]
 80012f8:	4619      	mov	r1, r3
 80012fa:	f001 fe67 	bl	8002fcc <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <DHT11_ReadPin>:

static uint8_t DHT11_ReadPin(DHT11_Sensor* dht)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b084      	sub	sp, #16
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
    uint8_t value = HAL_GPIO_ReadPin(dht->Port, dht->Pin);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	889b      	ldrh	r3, [r3, #4]
 8001316:	4619      	mov	r1, r3
 8001318:	4610      	mov	r0, r2
 800131a:	f001 fe3f 	bl	8002f9c <HAL_GPIO_ReadPin>
 800131e:	4603      	mov	r3, r0
 8001320:	73fb      	strb	r3, [r7, #15]
    return value;
 8001322:	7bfb      	ldrb	r3, [r7, #15]
}
 8001324:	4618      	mov	r0, r3
 8001326:	3710      	adds	r7, #16
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <DHT11_DelayInit>:

static void DHT11_DelayInit(DHT11_Sensor* dht)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
	DELAY_TIM_Init(dht->Timer);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff71 	bl	8001220 <DELAY_TIM_Init>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <DHT11_DelayUs>:

static void DHT11_DelayUs(DHT11_Sensor* dht, uint16_t time)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	807b      	strh	r3, [r7, #2]
	DELAY_TIM_Us(dht->Timer, time);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	887a      	ldrh	r2, [r7, #2]
 8001358:	4611      	mov	r1, r2
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff ff6b 	bl	8001236 <DELAY_TIM_Us>
}
 8001360:	bf00      	nop
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <DHT11_Start>:

static DHT11_Status DHT11_Start(DHT11_Sensor* dht)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_ERR_RESPONSE;
 8001370:	2301      	movs	r3, #1
 8001372:	73fb      	strb	r3, [r7, #15]

    DHT11_SetPinOut(dht);
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ff95 	bl	80012a4 <DHT11_SetPinOut>

    /* MCU sends out start signal and pulls down  voltage for at least 18 ms */
    DHT11_WritePin(dht, 0);
 800137a:	2100      	movs	r1, #0
 800137c:	6878      	ldr	r0, [r7, #4]
 800137e:	f7ff ffb0 	bl	80012e2 <DHT11_WritePin>
    DHT11_DelayUs(dht, 18000);
 8001382:	f244 6150 	movw	r1, #18000	; 0x4650
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffdd 	bl	8001346 <DHT11_DelayUs>

    /* MCU waits for DHT response (20-40us) */
    DHT11_SetPinIn(dht);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff ff6a 	bl	8001266 <DHT11_SetPinIn>
    DHT11_DelayUs(dht, 50);
 8001392:	2132      	movs	r1, #50	; 0x32
 8001394:	6878      	ldr	r0, [r7, #4]
 8001396:	f7ff ffd6 	bl	8001346 <DHT11_DelayUs>

    /* DHT sends out response signal and keeps it for 80 us */
    if (DHT11_ReadPin(dht) == 0)
 800139a:	6878      	ldr	r0, [r7, #4]
 800139c:	f7ff ffb3 	bl	8001306 <DHT11_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d112      	bne.n	80013cc <DHT11_Start+0x64>
    {
        DHT11_DelayUs(dht, 80);
 80013a6:	2150      	movs	r1, #80	; 0x50
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f7ff ffcc 	bl	8001346 <DHT11_DelayUs>
        if (DHT11_ReadPin(dht) == 1)
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffa9 	bl	8001306 <DHT11_ReadPin>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d108      	bne.n	80013cc <DHT11_Start+0x64>
        {
            status = DHT11_OK;
 80013ba:	2300      	movs	r3, #0
 80013bc:	73fb      	strb	r3, [r7, #15]
            /* Wait for data transmission */
            while(DHT11_ReadPin(dht) == 1);
 80013be:	bf00      	nop
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff ffa0 	bl	8001306 <DHT11_ReadPin>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d0f9      	beq.n	80013c0 <DHT11_Start+0x58>
        }
    }

    return status;
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3710      	adds	r7, #16
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}

080013d6 <DHT11_ReadByte>:

static uint8_t DHT11_ReadByte(DHT11_Sensor* dht)
{
 80013d6:	b580      	push	{r7, lr}
 80013d8:	b084      	sub	sp, #16
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
    uint8_t value = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	73fb      	strb	r3, [r7, #15]
    uint8_t idx;

    DHT11_SetPinIn(dht);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff ff3f 	bl	8001266 <DHT11_SetPinIn>

    for (idx = 0; idx < 8; idx++)
 80013e8:	2300      	movs	r3, #0
 80013ea:	73bb      	strb	r3, [r7, #14]
 80013ec:	e035      	b.n	800145a <DHT11_ReadByte+0x84>
    {
        /* Wait for old signal to end */
        while(DHT11_ReadPin(dht) == 0);
 80013ee:	bf00      	nop
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff88 	bl	8001306 <DHT11_ReadPin>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d0f9      	beq.n	80013f0 <DHT11_ReadByte+0x1a>

        DHT11_DelayUs(dht, 40);
 80013fc:	2128      	movs	r1, #40	; 0x28
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ffa1 	bl	8001346 <DHT11_DelayUs>

        /* Bit 1 */
        if (DHT11_ReadPin(dht) == 1)
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f7ff ff7e 	bl	8001306 <DHT11_ReadPin>
 800140a:	4603      	mov	r3, r0
 800140c:	2b01      	cmp	r3, #1
 800140e:	d10c      	bne.n	800142a <DHT11_ReadByte+0x54>
        {
            /* Set bit at (7-idx) position */
            value |= (0x01 << (7 - idx));
 8001410:	7bbb      	ldrb	r3, [r7, #14]
 8001412:	f1c3 0307 	rsb	r3, r3, #7
 8001416:	2201      	movs	r2, #1
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	b25a      	sxtb	r2, r3
 800141e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001422:	4313      	orrs	r3, r2
 8001424:	b25b      	sxtb	r3, r3
 8001426:	73fb      	strb	r3, [r7, #15]
 8001428:	e00d      	b.n	8001446 <DHT11_ReadByte+0x70>

        /* Bit 0 */
        else
        {
            /* Clear bit at (7-idx) position */
            value &= ~(0x01 << (7-idx));
 800142a:	7bbb      	ldrb	r3, [r7, #14]
 800142c:	f1c3 0307 	rsb	r3, r3, #7
 8001430:	2201      	movs	r2, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	b25b      	sxtb	r3, r3
 8001438:	43db      	mvns	r3, r3
 800143a:	b25a      	sxtb	r2, r3
 800143c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001440:	4013      	ands	r3, r2
 8001442:	b25b      	sxtb	r3, r3
 8001444:	73fb      	strb	r3, [r7, #15]
        }

        while(DHT11_ReadPin(dht) == 1);
 8001446:	bf00      	nop
 8001448:	6878      	ldr	r0, [r7, #4]
 800144a:	f7ff ff5c 	bl	8001306 <DHT11_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b01      	cmp	r3, #1
 8001452:	d0f9      	beq.n	8001448 <DHT11_ReadByte+0x72>
    for (idx = 0; idx < 8; idx++)
 8001454:	7bbb      	ldrb	r3, [r7, #14]
 8001456:	3301      	adds	r3, #1
 8001458:	73bb      	strb	r3, [r7, #14]
 800145a:	7bbb      	ldrb	r3, [r7, #14]
 800145c:	2b07      	cmp	r3, #7
 800145e:	d9c6      	bls.n	80013ee <DHT11_ReadByte+0x18>
    }

    return value;
 8001460:	7bfb      	ldrb	r3, [r7, #15]
}
 8001462:	4618      	mov	r0, r3
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <DHT11_Init>:

void DHT11_Init(DHT11_Sensor* dht, GPIO_TypeDef* port, uint16_t pin, TIM_HandleTypeDef* timer)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	4613      	mov	r3, r2
 800147a:	80fb      	strh	r3, [r7, #6]
    dht->Port   = port;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	601a      	str	r2, [r3, #0]
    dht->Pin    = pin;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	88fa      	ldrh	r2, [r7, #6]
 8001486:	809a      	strh	r2, [r3, #4]
    dht->Timer  = timer;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	609a      	str	r2, [r3, #8]
    dht->Temp   = INIT_TEMP_VALUE;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <DHT11_Init+0x3c>)
 8001492:	60da      	str	r2, [r3, #12]
    dht->Humi   = INIT_HUMI_VALUE;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <DHT11_Init+0x3c>)
 8001498:	611a      	str	r2, [r3, #16]

    DHT11_DelayInit(dht);
 800149a:	68f8      	ldr	r0, [r7, #12]
 800149c:	f7ff ff46 	bl	800132c <DHT11_DelayInit>
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	bf800000 	.word	0xbf800000

080014ac <DHT11_GetData>:

DHT11_Status DHT11_GetData(DHT11_Sensor* dht)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	ed2d 8b02 	vpush	{d8}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
    DHT11_Status status = DHT11_OK;
 80014b8:	2300      	movs	r3, #0
 80014ba:	73fb      	strb	r3, [r7, #15]

    uint8_t rh_integral, rh_decimal, temp_integral, temp_decimal, sum;

	status = DHT11_Start(dht);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff53 	bl	8001368 <DHT11_Start>
 80014c2:	4603      	mov	r3, r0
 80014c4:	73fb      	strb	r3, [r7, #15]

    if (status == DHT11_OK)
 80014c6:	7bfb      	ldrb	r3, [r7, #15]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d15b      	bne.n	8001584 <DHT11_GetData+0xd8>
    {
        /* Read 5 byte from DHT */
        rh_integral     = DHT11_ReadByte(dht);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f7ff ff82 	bl	80013d6 <DHT11_ReadByte>
 80014d2:	4603      	mov	r3, r0
 80014d4:	73bb      	strb	r3, [r7, #14]
        rh_decimal      = DHT11_ReadByte(dht);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ff7d 	bl	80013d6 <DHT11_ReadByte>
 80014dc:	4603      	mov	r3, r0
 80014de:	737b      	strb	r3, [r7, #13]
        temp_integral   = DHT11_ReadByte(dht);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff78 	bl	80013d6 <DHT11_ReadByte>
 80014e6:	4603      	mov	r3, r0
 80014e8:	733b      	strb	r3, [r7, #12]
        temp_decimal    = DHT11_ReadByte(dht);
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f7ff ff73 	bl	80013d6 <DHT11_ReadByte>
 80014f0:	4603      	mov	r3, r0
 80014f2:	72fb      	strb	r3, [r7, #11]
        sum             = DHT11_ReadByte(dht);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff6e 	bl	80013d6 <DHT11_ReadByte>
 80014fa:	4603      	mov	r3, r0
 80014fc:	72bb      	strb	r3, [r7, #10]

        if (sum == rh_integral + rh_decimal + temp_integral + temp_decimal)
 80014fe:	7aba      	ldrb	r2, [r7, #10]
 8001500:	7bb9      	ldrb	r1, [r7, #14]
 8001502:	7b7b      	ldrb	r3, [r7, #13]
 8001504:	4419      	add	r1, r3
 8001506:	7b3b      	ldrb	r3, [r7, #12]
 8001508:	4419      	add	r1, r3
 800150a:	7afb      	ldrb	r3, [r7, #11]
 800150c:	440b      	add	r3, r1
 800150e:	429a      	cmp	r2, r3
 8001510:	d136      	bne.n	8001580 <DHT11_GetData+0xd4>
        {
            dht->Humi = rh_integral + (float)(rh_decimal/10.0);
 8001512:	7bbb      	ldrb	r3, [r7, #14]
 8001514:	ee07 3a90 	vmov	s15, r3
 8001518:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800151c:	7b7b      	ldrb	r3, [r7, #13]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff f818 	bl	8000554 <__aeabi_i2d>
 8001524:	f04f 0200 	mov.w	r2, #0
 8001528:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <DHT11_GetData+0xe8>)
 800152a:	f7ff f9a7 	bl	800087c <__aeabi_ddiv>
 800152e:	4602      	mov	r2, r0
 8001530:	460b      	mov	r3, r1
 8001532:	4610      	mov	r0, r2
 8001534:	4619      	mov	r1, r3
 8001536:	f7ff fb4f 	bl	8000bd8 <__aeabi_d2f>
 800153a:	ee07 0a90 	vmov	s15, r0
 800153e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	edc3 7a04 	vstr	s15, [r3, #16]
            dht->Temp = temp_integral + (float)(temp_decimal/10.0);
 8001548:	7b3b      	ldrb	r3, [r7, #12]
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8001552:	7afb      	ldrb	r3, [r7, #11]
 8001554:	4618      	mov	r0, r3
 8001556:	f7fe fffd 	bl	8000554 <__aeabi_i2d>
 800155a:	f04f 0200 	mov.w	r2, #0
 800155e:	4b0d      	ldr	r3, [pc, #52]	; (8001594 <DHT11_GetData+0xe8>)
 8001560:	f7ff f98c 	bl	800087c <__aeabi_ddiv>
 8001564:	4602      	mov	r2, r0
 8001566:	460b      	mov	r3, r1
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff fb34 	bl	8000bd8 <__aeabi_d2f>
 8001570:	ee07 0a90 	vmov	s15, r0
 8001574:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	edc3 7a03 	vstr	s15, [r3, #12]
 800157e:	e001      	b.n	8001584 <DHT11_GetData+0xd8>
        }

        else
        {
            status = DHT11_ERR_CHECKSUM;
 8001580:	2302      	movs	r3, #2
 8001582:	73fb      	strb	r3, [r7, #15]
        }
    }

    return status;
 8001584:	7bfb      	ldrb	r3, [r7, #15]
}
 8001586:	4618      	mov	r0, r3
 8001588:	3710      	adds	r7, #16
 800158a:	46bd      	mov	sp, r7
 800158c:	ecbd 8b02 	vpop	{d8}
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40240000 	.word	0x40240000

08001598 <SRF05_DELAY_Us>:
#define TRIG_LOW()		HAL_GPIO_WritePin(SRF05->TRIGGER_GPIOx, SRF05->TRIGGER_GPIO_Pin, GPIO_PIN_RESET)
#define READ_ECHO() 	HAL_GPIO_ReadPin(SRF05->ECHO_GPIOx, SRF05->ECHO_GPIO_Pin)
extern TIM_HandleTypeDef htim4;

static void SRF05_DELAY_Us(uint16_t Time)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	80fb      	strh	r3, [r7, #6]
	DELAY_TIM_Us(&htim4, Time); // thay the ham nay neu su dung ham delay khac
 80015a2:	88fb      	ldrh	r3, [r7, #6]
 80015a4:	4619      	mov	r1, r3
 80015a6:	4803      	ldr	r0, [pc, #12]	; (80015b4 <SRF05_DELAY_Us+0x1c>)
 80015a8:	f7ff fe45 	bl	8001236 <DELAY_TIM_Us>

}
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	200002d4 	.word	0x200002d4

080015b8 <SRF05_Init>:

//************************* HIGH Level Layer **********************************************************/
// function:  init SRF05
// input: SRF05 target, TRIG pin, Echo Pin
// output: 0 false, 1 true
uint8_t SRF05_Init(SRF05_Device_Name* SRF05, GPIO_TypeDef* ECHO_GPIOx, uint16_t ECHO_GPIO_Pin, GPIO_TypeDef* TRIGGER_GPIOx, uint16_t TRIGGER_GPIO_Pin) {
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	60f8      	str	r0, [r7, #12]
 80015c0:	60b9      	str	r1, [r7, #8]
 80015c2:	603b      	str	r3, [r7, #0]
 80015c4:	4613      	mov	r3, r2
 80015c6:	80fb      	strh	r3, [r7, #6]

	SRF05->ECHO_GPIOx = ECHO_GPIOx;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	601a      	str	r2, [r3, #0]
	SRF05->ECHO_GPIO_Pin = ECHO_GPIO_Pin;
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	88fa      	ldrh	r2, [r7, #6]
 80015d2:	809a      	strh	r2, [r3, #4]
	SRF05->TRIGGER_GPIOx = TRIGGER_GPIOx;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	609a      	str	r2, [r3, #8]
	SRF05->TRIGGER_GPIO_Pin = TRIGGER_GPIO_Pin;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	8b3a      	ldrh	r2, [r7, #24]
 80015de:	819a      	strh	r2, [r3, #12]
	TRIG_LOW();
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	6898      	ldr	r0, [r3, #8]
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	899b      	ldrh	r3, [r3, #12]
 80015e8:	2200      	movs	r2, #0
 80015ea:	4619      	mov	r1, r3
 80015ec:	f001 fcee 	bl	8002fcc <HAL_GPIO_WritePin>
	if (SRF05_Read(SRF05) >= 0) {
 80015f0:	68f8      	ldr	r0, [r7, #12]
 80015f2:	f000 f80f 	bl	8001614 <SRF05_Read>
 80015f6:	eef0 7a40 	vmov.f32	s15, s0
 80015fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001602:	db01      	blt.n	8001608 <SRF05_Init+0x50>
		return 1;
 8001604:	2301      	movs	r3, #1
 8001606:	e000      	b.n	800160a <SRF05_Init+0x52>
	}
	return 0;
 8001608:	2300      	movs	r3, #0
}
 800160a:	4618      	mov	r0, r3
 800160c:	3710      	adds	r7, #16
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
	...

08001614 <SRF05_Read>:

float SRF05_Read(SRF05_Device_Name* SRF05) {
 8001614:	b580      	push	{r7, lr}
 8001616:	b084      	sub	sp, #16
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
	uint32_t time, timeout;

	TRIG_LOW();
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6898      	ldr	r0, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	899b      	ldrh	r3, [r3, #12]
 8001624:	2200      	movs	r2, #0
 8001626:	4619      	mov	r1, r3
 8001628:	f001 fcd0 	bl	8002fcc <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(2);
 800162c:	2002      	movs	r0, #2
 800162e:	f7ff ffb3 	bl	8001598 <SRF05_DELAY_Us>
	TRIG_HIGH();
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6898      	ldr	r0, [r3, #8]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	899b      	ldrh	r3, [r3, #12]
 800163a:	2201      	movs	r2, #1
 800163c:	4619      	mov	r1, r3
 800163e:	f001 fcc5 	bl	8002fcc <HAL_GPIO_WritePin>
	SRF05_DELAY_Us(10);
 8001642:	200a      	movs	r0, #10
 8001644:	f7ff ffa8 	bl	8001598 <SRF05_DELAY_Us>
	TRIG_LOW();
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6898      	ldr	r0, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	899b      	ldrh	r3, [r3, #12]
 8001650:	2200      	movs	r2, #0
 8001652:	4619      	mov	r1, r3
 8001654:	f001 fcba 	bl	8002fcc <HAL_GPIO_WritePin>
	timeout = SRF05_TIMEOUT;
 8001658:	4b1e      	ldr	r3, [pc, #120]	; (80016d4 <SRF05_Read+0xc0>)
 800165a:	60bb      	str	r3, [r7, #8]
	while (!READ_ECHO())
 800165c:	e006      	b.n	800166c <SRF05_Read+0x58>
	{
		if (timeout-- == 0x00)
 800165e:	68bb      	ldr	r3, [r7, #8]
 8001660:	1e5a      	subs	r2, r3, #1
 8001662:	60ba      	str	r2, [r7, #8]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d101      	bne.n	800166c <SRF05_Read+0x58>
		{
			return -1;
 8001668:	4b1b      	ldr	r3, [pc, #108]	; (80016d8 <SRF05_Read+0xc4>)
 800166a:	e02c      	b.n	80016c6 <SRF05_Read+0xb2>
	while (!READ_ECHO())
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	889b      	ldrh	r3, [r3, #4]
 8001674:	4619      	mov	r1, r3
 8001676:	4610      	mov	r0, r2
 8001678:	f001 fc90 	bl	8002f9c <HAL_GPIO_ReadPin>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0ed      	beq.n	800165e <SRF05_Read+0x4a>
		}
	}
	time = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60fb      	str	r3, [r7, #12]
	while (READ_ECHO())
 8001686:	e005      	b.n	8001694 <SRF05_Read+0x80>
	{
		time++;
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	3301      	adds	r3, #1
 800168c:	60fb      	str	r3, [r7, #12]
		SRF05_DELAY_Us(1);
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff ff82 	bl	8001598 <SRF05_DELAY_Us>
	while (READ_ECHO())
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	889b      	ldrh	r3, [r3, #4]
 800169c:	4619      	mov	r1, r3
 800169e:	4610      	mov	r0, r2
 80016a0:	f001 fc7c 	bl	8002f9c <HAL_GPIO_ReadPin>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1ee      	bne.n	8001688 <SRF05_Read+0x74>
	}
	SRF05->Distance =  (float)time * SRF05_NUMBER;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	ee07 3a90 	vmov	s15, r3
 80016b0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b4:	ed9f 7a09 	vldr	s14, [pc, #36]	; 80016dc <SRF05_Read+0xc8>
 80016b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	edc3 7a04 	vstr	s15, [r3, #16]

	return SRF05->Distance;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	691b      	ldr	r3, [r3, #16]
}
 80016c6:	ee07 3a90 	vmov	s15, r3
 80016ca:	eeb0 0a67 	vmov.f32	s0, s15
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	000f4240 	.word	0x000f4240
 80016d8:	bf800000 	.word	0xbf800000
 80016dc:	3c8cc17a 	.word	0x3c8cc17a

080016e0 <LCD_Write>:
static void LCD_WriteChar(LCD_I2C_Name* lcd, char character);

/* Private user code ---------------------------------------------------------*/

static void LCD_Write(LCD_I2C_Name* lcd, uint8_t data, uint8_t mode)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b086      	sub	sp, #24
 80016e4:	af02      	add	r7, sp, #8
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	70fb      	strb	r3, [r7, #3]
 80016ec:	4613      	mov	r3, r2
 80016ee:	70bb      	strb	r3, [r7, #2]
    uint8_t Data_H, Data_L;
	uint8_t Data_I2C[4];

	Data_H = data & 0xF0;
 80016f0:	78fb      	ldrb	r3, [r7, #3]
 80016f2:	f023 030f 	bic.w	r3, r3, #15
 80016f6:	73fb      	strb	r3, [r7, #15]
	Data_L = (data << 4) & 0xF0;
 80016f8:	78fb      	ldrb	r3, [r7, #3]
 80016fa:	011b      	lsls	r3, r3, #4
 80016fc:	73bb      	strb	r3, [r7, #14]

	if(lcd->BackLight)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	7adb      	ldrb	r3, [r3, #11]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d007      	beq.n	8001716 <LCD_Write+0x36>
	{
        /* Set bit */
		Data_H |= LCD_BACKLIGHT;
 8001706:	7bfb      	ldrb	r3, [r7, #15]
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_BACKLIGHT;
 800170e:	7bbb      	ldrb	r3, [r7, #14]
 8001710:	f043 0308 	orr.w	r3, r3, #8
 8001714:	73bb      	strb	r3, [r7, #14]
	}

	if(mode == LCD_DATA)
 8001716:	78bb      	ldrb	r3, [r7, #2]
 8001718:	2b01      	cmp	r3, #1
 800171a:	d108      	bne.n	800172e <LCD_Write+0x4e>
	{
        /* Set bit */
		Data_H |= LCD_RS;
 800171c:	7bfb      	ldrb	r3, [r7, #15]
 800171e:	f043 0301 	orr.w	r3, r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
		Data_L |= LCD_RS;
 8001724:	7bbb      	ldrb	r3, [r7, #14]
 8001726:	f043 0301 	orr.w	r3, r3, #1
 800172a:	73bb      	strb	r3, [r7, #14]
 800172c:	e00a      	b.n	8001744 <LCD_Write+0x64>
	}
	else if(mode == LCD_COMMAND)
 800172e:	78bb      	ldrb	r3, [r7, #2]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d107      	bne.n	8001744 <LCD_Write+0x64>
	{
        /* Clear bit */
		Data_H &= ~LCD_RS;
 8001734:	7bfb      	ldrb	r3, [r7, #15]
 8001736:	f023 0301 	bic.w	r3, r3, #1
 800173a:	73fb      	strb	r3, [r7, #15]
		Data_L &= ~LCD_RS;
 800173c:	7bbb      	ldrb	r3, [r7, #14]
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	73bb      	strb	r3, [r7, #14]
	}

    /* Assign data to higher bits */
	Data_I2C[0] = Data_H|LCD_EN;
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	f043 0304 	orr.w	r3, r3, #4
 800174a:	b2db      	uxtb	r3, r3
 800174c:	723b      	strb	r3, [r7, #8]
	LCD_DelayMs(1);
 800174e:	2001      	movs	r0, #1
 8001750:	f001 f8d8 	bl	8002904 <HAL_Delay>
	Data_I2C[1] = Data_H;
 8001754:	7bfb      	ldrb	r3, [r7, #15]
 8001756:	727b      	strb	r3, [r7, #9]

    /* Assign data to lower bits */
	Data_I2C[2] = Data_L|LCD_EN;
 8001758:	7bbb      	ldrb	r3, [r7, #14]
 800175a:	f043 0304 	orr.w	r3, r3, #4
 800175e:	b2db      	uxtb	r3, r3
 8001760:	72bb      	strb	r3, [r7, #10]
	LCD_DelayMs(1);
 8001762:	2001      	movs	r0, #1
 8001764:	f001 f8ce 	bl	8002904 <HAL_Delay>
	Data_I2C[3] = Data_L;
 8001768:	7bbb      	ldrb	r3, [r7, #14]
 800176a:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit(lcd->I2c, lcd->Address, (uint8_t *)Data_I2C, sizeof(Data_I2C), 1000);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6818      	ldr	r0, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	791b      	ldrb	r3, [r3, #4]
 8001774:	b299      	uxth	r1, r3
 8001776:	f107 0208 	add.w	r2, r7, #8
 800177a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800177e:	9300      	str	r3, [sp, #0]
 8001780:	2304      	movs	r3, #4
 8001782:	f001 fd81 	bl	8003288 <HAL_I2C_Master_Transmit>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <LCD_Init>:

void LCD_Init(LCD_I2C_Name* lcd, I2C_HandleTypeDef* i2c, uint8_t address, uint8_t columns, uint8_t rows)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	60f8      	str	r0, [r7, #12]
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	4611      	mov	r1, r2
 800179a:	461a      	mov	r2, r3
 800179c:	460b      	mov	r3, r1
 800179e:	71fb      	strb	r3, [r7, #7]
 80017a0:	4613      	mov	r3, r2
 80017a2:	71bb      	strb	r3, [r7, #6]
    lcd->I2c        = i2c;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	601a      	str	r2, [r3, #0]
    lcd->Address    = address;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	79fa      	ldrb	r2, [r7, #7]
 80017ae:	711a      	strb	r2, [r3, #4]
    lcd->Columns    = columns;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	79ba      	ldrb	r2, [r7, #6]
 80017b4:	715a      	strb	r2, [r3, #5]
    lcd->Rows       = rows;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	7e3a      	ldrb	r2, [r7, #24]
 80017ba:	719a      	strb	r2, [r3, #6]

    lcd->FunctionSet    = LCD_FUNCTIONSET|LCD_4BITMODE|LCD_2LINE|LCD_5x8DOTS;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2228      	movs	r2, #40	; 0x28
 80017c0:	729a      	strb	r2, [r3, #10]
    lcd->EntryMode      = LCD_ENTRYMODESET|LCD_ENTRYLEFT|LCD_ENTRYSHIFTDECREMENT;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2206      	movs	r2, #6
 80017c6:	71da      	strb	r2, [r3, #7]
    lcd->DisplayControl = LCD_DISPLAYCONTROL|LCD_DISPLAYON|LCD_CURSOROFF|LCD_BLINKOFF;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	220c      	movs	r2, #12
 80017cc:	721a      	strb	r2, [r3, #8]
    lcd->CursorShift    = LCD_CURSORSHIFT|LCD_CURSORMOVE|LCD_MOVERIGHT;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2214      	movs	r2, #20
 80017d2:	725a      	strb	r2, [r3, #9]
    lcd->BackLight      = LCD_BACKLIGHT;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2208      	movs	r2, #8
 80017d8:	72da      	strb	r2, [r3, #11]

    LCD_DelayMs(50);
 80017da:	2032      	movs	r0, #50	; 0x32
 80017dc:	f001 f892 	bl	8002904 <HAL_Delay>
	LCD_Write(lcd, 0x33, LCD_COMMAND);
 80017e0:	2200      	movs	r2, #0
 80017e2:	2133      	movs	r1, #51	; 0x33
 80017e4:	68f8      	ldr	r0, [r7, #12]
 80017e6:	f7ff ff7b 	bl	80016e0 <LCD_Write>

	LCD_Write(lcd, 0x33, LCD_COMMAND);
 80017ea:	2200      	movs	r2, #0
 80017ec:	2133      	movs	r1, #51	; 0x33
 80017ee:	68f8      	ldr	r0, [r7, #12]
 80017f0:	f7ff ff76 	bl	80016e0 <LCD_Write>
	LCD_DelayMs(5);
 80017f4:	2005      	movs	r0, #5
 80017f6:	f001 f885 	bl	8002904 <HAL_Delay>
	LCD_Write(lcd, 0x32, LCD_COMMAND);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2132      	movs	r1, #50	; 0x32
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f7ff ff6e 	bl	80016e0 <LCD_Write>
	LCD_DelayMs(5);
 8001804:	2005      	movs	r0, #5
 8001806:	f001 f87d 	bl	8002904 <HAL_Delay>
	LCD_Write(lcd, 0x20, LCD_COMMAND);
 800180a:	2200      	movs	r2, #0
 800180c:	2120      	movs	r1, #32
 800180e:	68f8      	ldr	r0, [r7, #12]
 8001810:	f7ff ff66 	bl	80016e0 <LCD_Write>
	LCD_DelayMs(5);
 8001814:	2005      	movs	r0, #5
 8001816:	f001 f875 	bl	8002904 <HAL_Delay>

	LCD_Write(lcd, lcd->EntryMode, LCD_COMMAND);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	79db      	ldrb	r3, [r3, #7]
 800181e:	2200      	movs	r2, #0
 8001820:	4619      	mov	r1, r3
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f7ff ff5c 	bl	80016e0 <LCD_Write>
	LCD_Write(lcd, lcd->DisplayControl, LCD_COMMAND);
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	7a1b      	ldrb	r3, [r3, #8]
 800182c:	2200      	movs	r2, #0
 800182e:	4619      	mov	r1, r3
 8001830:	68f8      	ldr	r0, [r7, #12]
 8001832:	f7ff ff55 	bl	80016e0 <LCD_Write>
	LCD_Write(lcd, lcd->CursorShift, LCD_COMMAND);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	7a5b      	ldrb	r3, [r3, #9]
 800183a:	2200      	movs	r2, #0
 800183c:	4619      	mov	r1, r3
 800183e:	68f8      	ldr	r0, [r7, #12]
 8001840:	f7ff ff4e 	bl	80016e0 <LCD_Write>
	LCD_Write(lcd, lcd->FunctionSet, LCD_COMMAND);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	7a9b      	ldrb	r3, [r3, #10]
 8001848:	2200      	movs	r2, #0
 800184a:	4619      	mov	r1, r3
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff ff47 	bl	80016e0 <LCD_Write>

	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 8001852:	2200      	movs	r2, #0
 8001854:	2101      	movs	r1, #1
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f7ff ff42 	bl	80016e0 <LCD_Write>
	LCD_Write(lcd, LCD_RETURNHOME, LCD_COMMAND);
 800185c:	2200      	movs	r2, #0
 800185e:	2102      	movs	r1, #2
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff ff3d 	bl	80016e0 <LCD_Write>
}
 8001866:	bf00      	nop
 8001868:	3710      	adds	r7, #16
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}

0800186e <LCD_WriteChar>:

static void LCD_WriteChar(LCD_I2C_Name* lcd, char character)
{
 800186e:	b580      	push	{r7, lr}
 8001870:	b082      	sub	sp, #8
 8001872:	af00      	add	r7, sp, #0
 8001874:	6078      	str	r0, [r7, #4]
 8001876:	460b      	mov	r3, r1
 8001878:	70fb      	strb	r3, [r7, #3]
	LCD_Write(lcd, character, LCD_DATA);
 800187a:	78fb      	ldrb	r3, [r7, #3]
 800187c:	2201      	movs	r2, #1
 800187e:	4619      	mov	r1, r3
 8001880:	6878      	ldr	r0, [r7, #4]
 8001882:	f7ff ff2d 	bl	80016e0 <LCD_Write>
}
 8001886:	bf00      	nop
 8001888:	3708      	adds	r7, #8
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <LCD_WriteString>:

void LCD_WriteString(LCD_I2C_Name* lcd, char *string)
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b082      	sub	sp, #8
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
 8001896:	6039      	str	r1, [r7, #0]
	while(*string)
 8001898:	e007      	b.n	80018aa <LCD_WriteString+0x1c>
	{
		LCD_WriteChar(lcd, *string++);
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	1c5a      	adds	r2, r3, #1
 800189e:	603a      	str	r2, [r7, #0]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	4619      	mov	r1, r3
 80018a4:	6878      	ldr	r0, [r7, #4]
 80018a6:	f7ff ffe2 	bl	800186e <LCD_WriteChar>
	while(*string)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f3      	bne.n	800189a <LCD_WriteString+0xc>
	}
}
 80018b2:	bf00      	nop
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <LCD_Clear>:

void LCD_Clear(LCD_I2C_Name* lcd)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
	LCD_Write(lcd, LCD_CLEARDISPLAY, LCD_COMMAND);
 80018c4:	2200      	movs	r2, #0
 80018c6:	2101      	movs	r1, #1
 80018c8:	6878      	ldr	r0, [r7, #4]
 80018ca:	f7ff ff09 	bl	80016e0 <LCD_Write>
	LCD_DelayMs(5);
 80018ce:	2005      	movs	r0, #5
 80018d0:	f001 f818 	bl	8002904 <HAL_Delay>
}
 80018d4:	bf00      	nop
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}

080018dc <LCD_SetCursor>:

void LCD_SetCursor(LCD_I2C_Name* lcd, uint8_t x_pos, uint8_t y_pos)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
 80018e4:	460b      	mov	r3, r1
 80018e6:	70fb      	strb	r3, [r7, #3]
 80018e8:	4613      	mov	r3, r2
 80018ea:	70bb      	strb	r3, [r7, #2]
	uint8_t DRAM_ADDRESS = 0x00;
 80018ec:	2300      	movs	r3, #0
 80018ee:	73fb      	strb	r3, [r7, #15]

	if(x_pos >= lcd->Columns)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	795b      	ldrb	r3, [r3, #5]
 80018f4:	78fa      	ldrb	r2, [r7, #3]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d303      	bcc.n	8001902 <LCD_SetCursor+0x26>
	{
		x_pos = lcd->Columns - 1;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	795b      	ldrb	r3, [r3, #5]
 80018fe:	3b01      	subs	r3, #1
 8001900:	70fb      	strb	r3, [r7, #3]
	}

	if(y_pos >= lcd->Rows)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	799b      	ldrb	r3, [r3, #6]
 8001906:	78ba      	ldrb	r2, [r7, #2]
 8001908:	429a      	cmp	r2, r3
 800190a:	d303      	bcc.n	8001914 <LCD_SetCursor+0x38>
	{
		y_pos = lcd->Rows -1;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	799b      	ldrb	r3, [r3, #6]
 8001910:	3b01      	subs	r3, #1
 8001912:	70bb      	strb	r3, [r7, #2]
	}

	switch (y_pos)
 8001914:	78bb      	ldrb	r3, [r7, #2]
 8001916:	2b03      	cmp	r3, #3
 8001918:	d819      	bhi.n	800194e <LCD_SetCursor+0x72>
 800191a:	a201      	add	r2, pc, #4	; (adr r2, 8001920 <LCD_SetCursor+0x44>)
 800191c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001920:	08001931 	.word	0x08001931
 8001924:	08001937 	.word	0x08001937
 8001928:	0800193f 	.word	0x0800193f
 800192c:	08001947 	.word	0x08001947
	{
		case 0:
			DRAM_ADDRESS = 0x00 + x_pos;
 8001930:	78fb      	ldrb	r3, [r7, #3]
 8001932:	73fb      	strb	r3, [r7, #15]
			break;
 8001934:	e00b      	b.n	800194e <LCD_SetCursor+0x72>
		case 1:
			DRAM_ADDRESS = 0x40 + x_pos;
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	3340      	adds	r3, #64	; 0x40
 800193a:	73fb      	strb	r3, [r7, #15]
			break;
 800193c:	e007      	b.n	800194e <LCD_SetCursor+0x72>
		case 2:
			DRAM_ADDRESS = 0x14 + x_pos;
 800193e:	78fb      	ldrb	r3, [r7, #3]
 8001940:	3314      	adds	r3, #20
 8001942:	73fb      	strb	r3, [r7, #15]
			break;
 8001944:	e003      	b.n	800194e <LCD_SetCursor+0x72>
		case 3:
			DRAM_ADDRESS = 0x54 + x_pos;
 8001946:	78fb      	ldrb	r3, [r7, #3]
 8001948:	3354      	adds	r3, #84	; 0x54
 800194a:	73fb      	strb	r3, [r7, #15]
			break;
 800194c:	bf00      	nop
	}

	LCD_Write(lcd, LCD_SETDDRAMADDR|DRAM_ADDRESS, LCD_COMMAND);
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001954:	b2db      	uxtb	r3, r3
 8001956:	2200      	movs	r2, #0
 8001958:	4619      	mov	r1, r3
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f7ff fec0 	bl	80016e0 <LCD_Write>
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	4603      	mov	r3, r0
 8001970:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	2b00      	cmp	r3, #0
 8001978:	db0b      	blt.n	8001992 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f003 021f 	and.w	r2, r3, #31
 8001980:	4907      	ldr	r1, [pc, #28]	; (80019a0 <__NVIC_EnableIRQ+0x38>)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	095b      	lsrs	r3, r3, #5
 8001988:	2001      	movs	r0, #1
 800198a:	fa00 f202 	lsl.w	r2, r0, r2
 800198e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001992:	bf00      	nop
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	e000e100 	.word	0xe000e100

080019a4 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db12      	blt.n	80019dc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	490a      	ldr	r1, [pc, #40]	; (80019e8 <__NVIC_DisableIRQ+0x44>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	3320      	adds	r3, #32
 80019cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80019d0:	f3bf 8f4f 	dsb	sy
}
 80019d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019d6:	f3bf 8f6f 	isb	sy
}
 80019da:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000e100 	.word	0xe000e100

080019ec <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80019f4:	1d39      	adds	r1, r7, #4
 80019f6:	f04f 33ff 	mov.w	r3, #4294967295
 80019fa:	2201      	movs	r2, #1
 80019fc:	4803      	ldr	r0, [pc, #12]	; (8001a0c <__io_putchar+0x20>)
 80019fe:	f003 f8d9 	bl	8004bb4 <HAL_UART_Transmit>

	return ch;
 8001a02:	687b      	ldr	r3, [r7, #4]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	2000031c 	.word	0x2000031c

08001a10 <HAL_UART_RxCpltCallback>:

/* UART Interrupt Task handler */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart2.Instance)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <HAL_UART_RxCpltCallback+0x64>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d119      	bne.n	8001a58 <HAL_UART_RxCpltCallback+0x48>
	{
		if (rxData[rxDataIndex] == '\n')
 8001a24:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <HAL_UART_RxCpltCallback+0x68>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	461a      	mov	r2, r3
 8001a2a:	4b14      	ldr	r3, [pc, #80]	; (8001a7c <HAL_UART_RxCpltCallback+0x6c>)
 8001a2c:	5c9b      	ldrb	r3, [r3, r2]
 8001a2e:	2b0a      	cmp	r3, #10
 8001a30:	d10c      	bne.n	8001a4c <HAL_UART_RxCpltCallback+0x3c>
		{
			rxData[rxDataIndex] = '\0';
 8001a32:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <HAL_UART_RxCpltCallback+0x68>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b10      	ldr	r3, [pc, #64]	; (8001a7c <HAL_UART_RxCpltCallback+0x6c>)
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	5499      	strb	r1, [r3, r2]
			isInterrupt = 1;
 8001a3e:	4b10      	ldr	r3, [pc, #64]	; (8001a80 <HAL_UART_RxCpltCallback+0x70>)
 8001a40:	2201      	movs	r2, #1
 8001a42:	701a      	strb	r2, [r3, #0]
			rxDataIndex = 0;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <HAL_UART_RxCpltCallback+0x68>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	701a      	strb	r2, [r3, #0]
 8001a4a:	e005      	b.n	8001a58 <HAL_UART_RxCpltCallback+0x48>
		}
		else
		{
			rxDataIndex ++;
 8001a4c:	4b0a      	ldr	r3, [pc, #40]	; (8001a78 <HAL_UART_RxCpltCallback+0x68>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	3301      	adds	r3, #1
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	4b08      	ldr	r3, [pc, #32]	; (8001a78 <HAL_UART_RxCpltCallback+0x68>)
 8001a56:	701a      	strb	r2, [r3, #0]
		}
	}
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData[rxDataIndex], 1);
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <HAL_UART_RxCpltCallback+0x68>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4b07      	ldr	r3, [pc, #28]	; (8001a7c <HAL_UART_RxCpltCallback+0x6c>)
 8001a60:	4413      	add	r3, r2
 8001a62:	2201      	movs	r2, #1
 8001a64:	4619      	mov	r1, r3
 8001a66:	4803      	ldr	r0, [pc, #12]	; (8001a74 <HAL_UART_RxCpltCallback+0x64>)
 8001a68:	f003 f92f 	bl	8004cca <HAL_UART_Receive_IT>
}
 8001a6c:	bf00      	nop
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	2000031c 	.word	0x2000031c
 8001a78:	200003c4 	.word	0x200003c4
 8001a7c:	200003b0 	.word	0x200003b0
 8001a80:	200003c5 	.word	0x200003c5

08001a84 <TASK_UART_Handler>:

/* UART command handler */
void TASK_UART_Handler(){
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
	if (isInterrupt){
 8001a8a:	4b51      	ldr	r3, [pc, #324]	; (8001bd0 <TASK_UART_Handler+0x14c>)
 8001a8c:	781b      	ldrb	r3, [r3, #0]
 8001a8e:	b2db      	uxtb	r3, r3
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 8095 	beq.w	8001bc0 <TASK_UART_Handler+0x13c>
		printf("UART Handler IN: %ld\r\n", uwTick);
 8001a96:	4b4f      	ldr	r3, [pc, #316]	; (8001bd4 <TASK_UART_Handler+0x150>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	484e      	ldr	r0, [pc, #312]	; (8001bd8 <TASK_UART_Handler+0x154>)
 8001a9e:	f004 fe47 	bl	8006730 <iprintf>
		NVIC_DisableIRQ(USART2_IRQn);
 8001aa2:	2026      	movs	r0, #38	; 0x26
 8001aa4:	f7ff ff7e 	bl	80019a4 <__NVIC_DisableIRQ>
		 * timetemp
		 * timehumi
		 * timedist
		 */

		char *command = strtok((char*)rxData, " ");
 8001aa8:	494c      	ldr	r1, [pc, #304]	; (8001bdc <TASK_UART_Handler+0x158>)
 8001aaa:	484d      	ldr	r0, [pc, #308]	; (8001be0 <TASK_UART_Handler+0x15c>)
 8001aac:	f004 ffae 	bl	8006a0c <strtok>
 8001ab0:	60f8      	str	r0, [r7, #12]
		char *time = strtok(NULL, " ");
 8001ab2:	494a      	ldr	r1, [pc, #296]	; (8001bdc <TASK_UART_Handler+0x158>)
 8001ab4:	2000      	movs	r0, #0
 8001ab6:	f004 ffa9 	bl	8006a0c <strtok>
 8001aba:	60b8      	str	r0, [r7, #8]
		if (NULL == time){
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d13b      	bne.n	8001b3a <TASK_UART_Handler+0xb6>
			if (strcmp((const char*)rxData, "displaytemp") == 0)
 8001ac2:	4948      	ldr	r1, [pc, #288]	; (8001be4 <TASK_UART_Handler+0x160>)
 8001ac4:	4846      	ldr	r0, [pc, #280]	; (8001be0 <TASK_UART_Handler+0x15c>)
 8001ac6:	f7fe fb8b 	bl	80001e0 <strcmp>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d106      	bne.n	8001ade <TASK_UART_Handler+0x5a>
			{
				DisplayMode = DISPLAY_TEMP;
 8001ad0:	4b45      	ldr	r3, [pc, #276]	; (8001be8 <TASK_UART_Handler+0x164>)
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_TEMP\r\n\n");
 8001ad6:	4845      	ldr	r0, [pc, #276]	; (8001bec <TASK_UART_Handler+0x168>)
 8001ad8:	f004 fe90 	bl	80067fc <puts>
 8001adc:	e067      	b.n	8001bae <TASK_UART_Handler+0x12a>
			}
			else if (strcmp((const char*)rxData, "displayhumi") == 0)
 8001ade:	4944      	ldr	r1, [pc, #272]	; (8001bf0 <TASK_UART_Handler+0x16c>)
 8001ae0:	483f      	ldr	r0, [pc, #252]	; (8001be0 <TASK_UART_Handler+0x15c>)
 8001ae2:	f7fe fb7d 	bl	80001e0 <strcmp>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d106      	bne.n	8001afa <TASK_UART_Handler+0x76>
			{
				DisplayMode = DISPLAY_HUMI;
 8001aec:	4b3e      	ldr	r3, [pc, #248]	; (8001be8 <TASK_UART_Handler+0x164>)
 8001aee:	2202      	movs	r2, #2
 8001af0:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_HUMI\r\n\n");
 8001af2:	4840      	ldr	r0, [pc, #256]	; (8001bf4 <TASK_UART_Handler+0x170>)
 8001af4:	f004 fe82 	bl	80067fc <puts>
 8001af8:	e059      	b.n	8001bae <TASK_UART_Handler+0x12a>
			}
			else if (strcmp((const char*)rxData, "displaydist") == 0)
 8001afa:	493f      	ldr	r1, [pc, #252]	; (8001bf8 <TASK_UART_Handler+0x174>)
 8001afc:	4838      	ldr	r0, [pc, #224]	; (8001be0 <TASK_UART_Handler+0x15c>)
 8001afe:	f7fe fb6f 	bl	80001e0 <strcmp>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d106      	bne.n	8001b16 <TASK_UART_Handler+0x92>
			{
				DisplayMode = DISPLAY_DISTANCE;
 8001b08:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <TASK_UART_Handler+0x164>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_DIST\r\n\n");
 8001b0e:	483b      	ldr	r0, [pc, #236]	; (8001bfc <TASK_UART_Handler+0x178>)
 8001b10:	f004 fe74 	bl	80067fc <puts>
 8001b14:	e04b      	b.n	8001bae <TASK_UART_Handler+0x12a>
			}
			else if (strcmp((const char*)rxData, "displayboth") == 0)
 8001b16:	493a      	ldr	r1, [pc, #232]	; (8001c00 <TASK_UART_Handler+0x17c>)
 8001b18:	4831      	ldr	r0, [pc, #196]	; (8001be0 <TASK_UART_Handler+0x15c>)
 8001b1a:	f7fe fb61 	bl	80001e0 <strcmp>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d106      	bne.n	8001b32 <TASK_UART_Handler+0xae>
			{
				DisplayMode = DISPLAY_ALL;
 8001b24:	4b30      	ldr	r3, [pc, #192]	; (8001be8 <TASK_UART_Handler+0x164>)
 8001b26:	2203      	movs	r2, #3
 8001b28:	701a      	strb	r2, [r3, #0]
				printf("Change Display Mode to DISPLAY_ALL\r\n\n");
 8001b2a:	4836      	ldr	r0, [pc, #216]	; (8001c04 <TASK_UART_Handler+0x180>)
 8001b2c:	f004 fe66 	bl	80067fc <puts>
 8001b30:	e03d      	b.n	8001bae <TASK_UART_Handler+0x12a>
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
 8001b32:	4835      	ldr	r0, [pc, #212]	; (8001c08 <TASK_UART_Handler+0x184>)
 8001b34:	f004 fe62 	bl	80067fc <puts>
 8001b38:	e039      	b.n	8001bae <TASK_UART_Handler+0x12a>
			}
		}
		else {
			uint32_t pTime = atoi(time);
 8001b3a:	68b8      	ldr	r0, [r7, #8]
 8001b3c:	f004 f840 	bl	8005bc0 <atoi>
 8001b40:	4603      	mov	r3, r0
 8001b42:	607b      	str	r3, [r7, #4]
			if (strcmp((const char*)command, "timedht1") == 0)
 8001b44:	4931      	ldr	r1, [pc, #196]	; (8001c0c <TASK_UART_Handler+0x188>)
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f7fe fb4a 	bl	80001e0 <strcmp>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10c      	bne.n	8001b6c <TASK_UART_Handler+0xe8>
			{
				TASK_DHT_MEASUREMENT->Period = pTime/FRAME_TICK_LENGTH_MS;
 8001b52:	4b2f      	ldr	r3, [pc, #188]	; (8001c10 <TASK_UART_Handler+0x18c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	492e      	ldr	r1, [pc, #184]	; (8001c14 <TASK_UART_Handler+0x190>)
 8001b5a:	fba1 1202 	umull	r1, r2, r1, r2
 8001b5e:	0992      	lsrs	r2, r2, #6
 8001b60:	609a      	str	r2, [r3, #8]
				printf("Change period of temp time to %ld\r\n", pTime);
 8001b62:	6879      	ldr	r1, [r7, #4]
 8001b64:	482c      	ldr	r0, [pc, #176]	; (8001c18 <TASK_UART_Handler+0x194>)
 8001b66:	f004 fde3 	bl	8006730 <iprintf>
 8001b6a:	e016      	b.n	8001b9a <TASK_UART_Handler+0x116>
			}
			else if (strcmp((const char*)command, "timedist") == 0)
 8001b6c:	492b      	ldr	r1, [pc, #172]	; (8001c1c <TASK_UART_Handler+0x198>)
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7fe fb36 	bl	80001e0 <strcmp>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d10c      	bne.n	8001b94 <TASK_UART_Handler+0x110>
			{
				TASK_DIST_MEASUREMENT->Period = pTime/FRAME_TICK_LENGTH_MS;
 8001b7a:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <TASK_UART_Handler+0x19c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	4924      	ldr	r1, [pc, #144]	; (8001c14 <TASK_UART_Handler+0x190>)
 8001b82:	fba1 1202 	umull	r1, r2, r1, r2
 8001b86:	0992      	lsrs	r2, r2, #6
 8001b88:	609a      	str	r2, [r3, #8]
				printf("Change period of dist time to %ld\r\n", pTime);
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	4825      	ldr	r0, [pc, #148]	; (8001c24 <TASK_UART_Handler+0x1a0>)
 8001b8e:	f004 fdcf 	bl	8006730 <iprintf>
 8001b92:	e002      	b.n	8001b9a <TASK_UART_Handler+0x116>
			}
			else
			{
				printf("Error Command Syntax\r\n\n");
 8001b94:	481c      	ldr	r0, [pc, #112]	; (8001c08 <TASK_UART_Handler+0x184>)
 8001b96:	f004 fe31 	bl	80067fc <puts>
			}
			TASK_DISPLAY_MEASUREMENT->Period = TASK_DHT_MEASUREMENT->Period + TASK_DIST_MEASUREMENT->Period;
 8001b9a:	4b1d      	ldr	r3, [pc, #116]	; (8001c10 <TASK_UART_Handler+0x18c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	6899      	ldr	r1, [r3, #8]
 8001ba0:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <TASK_UART_Handler+0x19c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	689a      	ldr	r2, [r3, #8]
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <TASK_UART_Handler+0x1a4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	440a      	add	r2, r1
 8001bac:	609a      	str	r2, [r3, #8]

		}
		NVIC_EnableIRQ(USART2_IRQn);
 8001bae:	2026      	movs	r0, #38	; 0x26
 8001bb0:	f7ff feda 	bl	8001968 <__NVIC_EnableIRQ>
		printf("UART Handler OUT: %ld\r\n", uwTick);
 8001bb4:	4b07      	ldr	r3, [pc, #28]	; (8001bd4 <TASK_UART_Handler+0x150>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	481c      	ldr	r0, [pc, #112]	; (8001c2c <TASK_UART_Handler+0x1a8>)
 8001bbc:	f004 fdb8 	bl	8006730 <iprintf>
	}
	isInterrupt = 0;
 8001bc0:	4b03      	ldr	r3, [pc, #12]	; (8001bd0 <TASK_UART_Handler+0x14c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	701a      	strb	r2, [r3, #0]

}
 8001bc6:	bf00      	nop
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	200003c5 	.word	0x200003c5
 8001bd4:	200003e8 	.word	0x200003e8
 8001bd8:	08008b98 	.word	0x08008b98
 8001bdc:	08008bb0 	.word	0x08008bb0
 8001be0:	200003b0 	.word	0x200003b0
 8001be4:	08008bb4 	.word	0x08008bb4
 8001be8:	20000000 	.word	0x20000000
 8001bec:	08008bc0 	.word	0x08008bc0
 8001bf0:	08008be8 	.word	0x08008be8
 8001bf4:	08008bf4 	.word	0x08008bf4
 8001bf8:	08008c1c 	.word	0x08008c1c
 8001bfc:	08008c28 	.word	0x08008c28
 8001c00:	08008c50 	.word	0x08008c50
 8001c04:	08008c5c 	.word	0x08008c5c
 8001c08:	08008c84 	.word	0x08008c84
 8001c0c:	08008c9c 	.word	0x08008c9c
 8001c10:	200003d4 	.word	0x200003d4
 8001c14:	51eb851f 	.word	0x51eb851f
 8001c18:	08008ca8 	.word	0x08008ca8
 8001c1c:	08008ccc 	.word	0x08008ccc
 8001c20:	200003d8 	.word	0x200003d8
 8001c24:	08008cd8 	.word	0x08008cd8
 8001c28:	200003dc 	.word	0x200003dc
 8001c2c:	08008cfc 	.word	0x08008cfc

08001c30 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
	if(htim == &htim3){
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	4a04      	ldr	r2, [pc, #16]	; (8001c4c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d101      	bne.n	8001c44 <HAL_TIM_PeriodElapsedCallback+0x14>
		SCH_Update();
 8001c40:	f7ff fa82 	bl	8001148 <SCH_Update>
	}
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	2000028c 	.word	0x2000028c

08001c50 <TASK_Dht_Sense>:

void TASK_Dht_Sense(){
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
//	printf("TASK_DHT_MEASUREMENT IN: %ld\r\n", uwTick);
	dhtStatus = DHT11_GetData(&dht);
 8001c54:	4808      	ldr	r0, [pc, #32]	; (8001c78 <TASK_Dht_Sense+0x28>)
 8001c56:	f7ff fc29 	bl	80014ac <DHT11_GetData>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b07      	ldr	r3, [pc, #28]	; (8001c7c <TASK_Dht_Sense+0x2c>)
 8001c60:	701a      	strb	r2, [r3, #0]
	dhtHumid = dht.Humi;
 8001c62:	4b05      	ldr	r3, [pc, #20]	; (8001c78 <TASK_Dht_Sense+0x28>)
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	4a06      	ldr	r2, [pc, #24]	; (8001c80 <TASK_Dht_Sense+0x30>)
 8001c68:	6013      	str	r3, [r2, #0]
	dhtTemp = dht.Temp;
 8001c6a:	4b03      	ldr	r3, [pc, #12]	; (8001c78 <TASK_Dht_Sense+0x28>)
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	4a05      	ldr	r2, [pc, #20]	; (8001c84 <TASK_Dht_Sense+0x34>)
 8001c70:	6013      	str	r3, [r2, #0]
//	printf("TASK_DHT_MEASUREMENT OUT: %ld\r\n", uwTick);
}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	20000364 	.word	0x20000364
 8001c7c:	20000398 	.word	0x20000398
 8001c80:	200003cc 	.word	0x200003cc
 8001c84:	200003c8 	.word	0x200003c8

08001c88 <TASK_Dist_Sense>:

void TASK_Dist_Sense(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
//	printf("TASK_DIST_MEASUREMENT IN: %ld\r\n", uwTick);
	SRF05_Read(&hrf05);
 8001c8c:	4804      	ldr	r0, [pc, #16]	; (8001ca0 <TASK_Dist_Sense+0x18>)
 8001c8e:	f7ff fcc1 	bl	8001614 <SRF05_Read>
	distance = hrf05.Distance;
 8001c92:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <TASK_Dist_Sense+0x18>)
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	4a03      	ldr	r2, [pc, #12]	; (8001ca4 <TASK_Dist_Sense+0x1c>)
 8001c98:	6013      	str	r3, [r2, #0]
//	printf("TASK_DIST_MEASUREMENT OUT: %ld\r\n", uwTick);
}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	20000384 	.word	0x20000384
 8001ca4:	200003d0 	.word	0x200003d0

08001ca8 <TASK_Display_Measurement>:

void TASK_Display_Measurement(){
 8001ca8:	b5b0      	push	{r4, r5, r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af02      	add	r7, sp, #8
//	printf("TASK_DISPLAY_MEASUREMENT IN: %ld\r\n", uwTick);
	LCD_Clear(&lcd);
 8001cae:	4862      	ldr	r0, [pc, #392]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001cb0:	f7ff fe04 	bl	80018bc <LCD_Clear>
	switch (DisplayMode){
 8001cb4:	4b61      	ldr	r3, [pc, #388]	; (8001e3c <TASK_Display_Measurement+0x194>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	f200 80ba 	bhi.w	8001e32 <TASK_Display_Measurement+0x18a>
 8001cbe:	a201      	add	r2, pc, #4	; (adr r2, 8001cc4 <TASK_Display_Measurement+0x1c>)
 8001cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cc4:	08001cd5 	.word	0x08001cd5
 8001cc8:	08001d51 	.word	0x08001d51
 8001ccc:	08001d13 	.word	0x08001d13
 8001cd0:	08001d8f 	.word	0x08001d8f
	case DISPLAY_DISTANCE:
		sprintf(temp, "D: %.2f", distance);
 8001cd4:	4b5a      	ldr	r3, [pc, #360]	; (8001e40 <TASK_Display_Measurement+0x198>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7fe fc4d 	bl	8000578 <__aeabi_f2d>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4958      	ldr	r1, [pc, #352]	; (8001e44 <TASK_Display_Measurement+0x19c>)
 8001ce4:	4858      	ldr	r0, [pc, #352]	; (8001e48 <TASK_Display_Measurement+0x1a0>)
 8001ce6:	f004 fd91 	bl	800680c <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001cea:	2200      	movs	r2, #0
 8001cec:	2100      	movs	r1, #0
 8001cee:	4852      	ldr	r0, [pc, #328]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001cf0:	f7ff fdf4 	bl	80018dc <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001cf4:	4954      	ldr	r1, [pc, #336]	; (8001e48 <TASK_Display_Measurement+0x1a0>)
 8001cf6:	4850      	ldr	r0, [pc, #320]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001cf8:	f7ff fdc9 	bl	800188e <LCD_WriteString>
		printf("Distance: %.2f\r\n", distance);
 8001cfc:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <TASK_Display_Measurement+0x198>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4618      	mov	r0, r3
 8001d02:	f7fe fc39 	bl	8000578 <__aeabi_f2d>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4850      	ldr	r0, [pc, #320]	; (8001e4c <TASK_Display_Measurement+0x1a4>)
 8001d0c:	f004 fd10 	bl	8006730 <iprintf>
		break;
 8001d10:	e08f      	b.n	8001e32 <TASK_Display_Measurement+0x18a>
	case DISPLAY_HUMI:
		sprintf(temp, "H: %.2f", dhtHumid);
 8001d12:	4b4f      	ldr	r3, [pc, #316]	; (8001e50 <TASK_Display_Measurement+0x1a8>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7fe fc2e 	bl	8000578 <__aeabi_f2d>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	460b      	mov	r3, r1
 8001d20:	494c      	ldr	r1, [pc, #304]	; (8001e54 <TASK_Display_Measurement+0x1ac>)
 8001d22:	4849      	ldr	r0, [pc, #292]	; (8001e48 <TASK_Display_Measurement+0x1a0>)
 8001d24:	f004 fd72 	bl	800680c <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001d28:	2200      	movs	r2, #0
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4842      	ldr	r0, [pc, #264]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001d2e:	f7ff fdd5 	bl	80018dc <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001d32:	4945      	ldr	r1, [pc, #276]	; (8001e48 <TASK_Display_Measurement+0x1a0>)
 8001d34:	4840      	ldr	r0, [pc, #256]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001d36:	f7ff fdaa 	bl	800188e <LCD_WriteString>
		printf("Humidity: %.2f\r\n", dhtHumid);
 8001d3a:	4b45      	ldr	r3, [pc, #276]	; (8001e50 <TASK_Display_Measurement+0x1a8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fc1a 	bl	8000578 <__aeabi_f2d>
 8001d44:	4602      	mov	r2, r0
 8001d46:	460b      	mov	r3, r1
 8001d48:	4843      	ldr	r0, [pc, #268]	; (8001e58 <TASK_Display_Measurement+0x1b0>)
 8001d4a:	f004 fcf1 	bl	8006730 <iprintf>
		break;
 8001d4e:	e070      	b.n	8001e32 <TASK_Display_Measurement+0x18a>
	case DISPLAY_TEMP:
		sprintf(temp, "T: %.2f", dhtTemp);
 8001d50:	4b42      	ldr	r3, [pc, #264]	; (8001e5c <TASK_Display_Measurement+0x1b4>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fc0f 	bl	8000578 <__aeabi_f2d>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	4940      	ldr	r1, [pc, #256]	; (8001e60 <TASK_Display_Measurement+0x1b8>)
 8001d60:	4839      	ldr	r0, [pc, #228]	; (8001e48 <TASK_Display_Measurement+0x1a0>)
 8001d62:	f004 fd53 	bl	800680c <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001d66:	2200      	movs	r2, #0
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4833      	ldr	r0, [pc, #204]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001d6c:	f7ff fdb6 	bl	80018dc <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001d70:	4935      	ldr	r1, [pc, #212]	; (8001e48 <TASK_Display_Measurement+0x1a0>)
 8001d72:	4831      	ldr	r0, [pc, #196]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001d74:	f7ff fd8b 	bl	800188e <LCD_WriteString>
		printf("Temperature: %.2f\r\n", dhtTemp);
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <TASK_Display_Measurement+0x1b4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fbfb 	bl	8000578 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4837      	ldr	r0, [pc, #220]	; (8001e64 <TASK_Display_Measurement+0x1bc>)
 8001d88:	f004 fcd2 	bl	8006730 <iprintf>
		break;
 8001d8c:	e051      	b.n	8001e32 <TASK_Display_Measurement+0x18a>
	case DISPLAY_ALL:
		sprintf(temp, "T: %.2f D: %.2f", dhtTemp, distance);
 8001d8e:	4b33      	ldr	r3, [pc, #204]	; (8001e5c <TASK_Display_Measurement+0x1b4>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7fe fbf0 	bl	8000578 <__aeabi_f2d>
 8001d98:	4604      	mov	r4, r0
 8001d9a:	460d      	mov	r5, r1
 8001d9c:	4b28      	ldr	r3, [pc, #160]	; (8001e40 <TASK_Display_Measurement+0x198>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7fe fbe9 	bl	8000578 <__aeabi_f2d>
 8001da6:	4602      	mov	r2, r0
 8001da8:	460b      	mov	r3, r1
 8001daa:	e9cd 2300 	strd	r2, r3, [sp]
 8001dae:	4622      	mov	r2, r4
 8001db0:	462b      	mov	r3, r5
 8001db2:	492d      	ldr	r1, [pc, #180]	; (8001e68 <TASK_Display_Measurement+0x1c0>)
 8001db4:	4824      	ldr	r0, [pc, #144]	; (8001e48 <TASK_Display_Measurement+0x1a0>)
 8001db6:	f004 fd29 	bl	800680c <siprintf>
		LCD_SetCursor(&lcd, 0, 0);
 8001dba:	2200      	movs	r2, #0
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	481e      	ldr	r0, [pc, #120]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001dc0:	f7ff fd8c 	bl	80018dc <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001dc4:	4920      	ldr	r1, [pc, #128]	; (8001e48 <TASK_Display_Measurement+0x1a0>)
 8001dc6:	481c      	ldr	r0, [pc, #112]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001dc8:	f7ff fd61 	bl	800188e <LCD_WriteString>
		sprintf(temp, "H: %.2f", dhtHumid);
 8001dcc:	4b20      	ldr	r3, [pc, #128]	; (8001e50 <TASK_Display_Measurement+0x1a8>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	f7fe fbd1 	bl	8000578 <__aeabi_f2d>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	491e      	ldr	r1, [pc, #120]	; (8001e54 <TASK_Display_Measurement+0x1ac>)
 8001ddc:	481a      	ldr	r0, [pc, #104]	; (8001e48 <TASK_Display_Measurement+0x1a0>)
 8001dde:	f004 fd15 	bl	800680c <siprintf>
		LCD_SetCursor(&lcd, 0, 1);
 8001de2:	2201      	movs	r2, #1
 8001de4:	2100      	movs	r1, #0
 8001de6:	4814      	ldr	r0, [pc, #80]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001de8:	f7ff fd78 	bl	80018dc <LCD_SetCursor>
		LCD_WriteString(&lcd, temp);
 8001dec:	4916      	ldr	r1, [pc, #88]	; (8001e48 <TASK_Display_Measurement+0x1a0>)
 8001dee:	4812      	ldr	r0, [pc, #72]	; (8001e38 <TASK_Display_Measurement+0x190>)
 8001df0:	f7ff fd4d 	bl	800188e <LCD_WriteString>
		printf("Distance: %.2f\r\n", distance);
 8001df4:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <TASK_Display_Measurement+0x198>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7fe fbbd 	bl	8000578 <__aeabi_f2d>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	460b      	mov	r3, r1
 8001e02:	4812      	ldr	r0, [pc, #72]	; (8001e4c <TASK_Display_Measurement+0x1a4>)
 8001e04:	f004 fc94 	bl	8006730 <iprintf>
		printf("Humidity: %.2f\r\n", dhtHumid);
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <TASK_Display_Measurement+0x1a8>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fbb3 	bl	8000578 <__aeabi_f2d>
 8001e12:	4602      	mov	r2, r0
 8001e14:	460b      	mov	r3, r1
 8001e16:	4810      	ldr	r0, [pc, #64]	; (8001e58 <TASK_Display_Measurement+0x1b0>)
 8001e18:	f004 fc8a 	bl	8006730 <iprintf>
		printf("Temperature: %.2f\r\n", dhtTemp);
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <TASK_Display_Measurement+0x1b4>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fba9 	bl	8000578 <__aeabi_f2d>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	480e      	ldr	r0, [pc, #56]	; (8001e64 <TASK_Display_Measurement+0x1bc>)
 8001e2c:	f004 fc80 	bl	8006730 <iprintf>
		break;
 8001e30:	bf00      	nop
	}
//	printf("TASK_DISPLAY_MEASUREMENT OUT: %ld\r\n", uwTick);
}
 8001e32:	bf00      	nop
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bdb0      	pop	{r4, r5, r7, pc}
 8001e38:	20000378 	.word	0x20000378
 8001e3c:	20000000 	.word	0x20000000
 8001e40:	200003d0 	.word	0x200003d0
 8001e44:	08008d14 	.word	0x08008d14
 8001e48:	2000039c 	.word	0x2000039c
 8001e4c:	08008d1c 	.word	0x08008d1c
 8001e50:	200003cc 	.word	0x200003cc
 8001e54:	08008d30 	.word	0x08008d30
 8001e58:	08008d38 	.word	0x08008d38
 8001e5c:	200003c8 	.word	0x200003c8
 8001e60:	08008d4c 	.word	0x08008d4c
 8001e64:	08008d54 	.word	0x08008d54
 8001e68:	08008d68 	.word	0x08008d68

08001e6c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e72:	f000 fcd5 	bl	8002820 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e76:	f000 f88b 	bl	8001f90 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e7a:	f000 f9e7 	bl	800224c <MX_GPIO_Init>
	MX_TIM4_Init();
 8001e7e:	f000 f96d 	bl	800215c <MX_TIM4_Init>
	MX_I2C2_Init();
 8001e82:	f000 f8ef 	bl	8002064 <MX_I2C2_Init>
	MX_USART2_UART_Init();
 8001e86:	f000 f9b7 	bl	80021f8 <MX_USART2_UART_Init>
	MX_TIM3_Init();
 8001e8a:	f000 f919 	bl	80020c0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	DHT11_Init(&dht, DHT_GPIO_Port, DHT_Pin, &htim4);
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	; (8001f40 <main+0xd4>)
 8001e90:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001e94:	492b      	ldr	r1, [pc, #172]	; (8001f44 <main+0xd8>)
 8001e96:	482c      	ldr	r0, [pc, #176]	; (8001f48 <main+0xdc>)
 8001e98:	f7ff fae8 	bl	800146c <DHT11_Init>
	LCD_Init(&lcd, &hi2c2, LDC_DEFAULT_ADDRESS, 20, 4);
 8001e9c:	2304      	movs	r3, #4
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	2314      	movs	r3, #20
 8001ea2:	224e      	movs	r2, #78	; 0x4e
 8001ea4:	4929      	ldr	r1, [pc, #164]	; (8001f4c <main+0xe0>)
 8001ea6:	482a      	ldr	r0, [pc, #168]	; (8001f50 <main+0xe4>)
 8001ea8:	f7ff fc71 	bl	800178e <LCD_Init>
	SRF05_Init(&hrf05, ECHO_GPIO_Port, ECHO_Pin, TRIG_GPIO_Port, TRIG_Pin);
 8001eac:	2302      	movs	r3, #2
 8001eae:	9300      	str	r3, [sp, #0]
 8001eb0:	4b28      	ldr	r3, [pc, #160]	; (8001f54 <main+0xe8>)
 8001eb2:	2210      	movs	r2, #16
 8001eb4:	4927      	ldr	r1, [pc, #156]	; (8001f54 <main+0xe8>)
 8001eb6:	4828      	ldr	r0, [pc, #160]	; (8001f58 <main+0xec>)
 8001eb8:	f7ff fb7e 	bl	80015b8 <SRF05_Init>
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&rxData[rxDataIndex], 1);
 8001ebc:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <main+0xf0>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <main+0xf4>)
 8001ec4:	4413      	add	r3, r2
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4826      	ldr	r0, [pc, #152]	; (8001f64 <main+0xf8>)
 8001ecc:	f002 fefd 	bl	8004cca <HAL_UART_Receive_IT>
	printf("Start\r\n");
 8001ed0:	4825      	ldr	r0, [pc, #148]	; (8001f68 <main+0xfc>)
 8001ed2:	f004 fc93 	bl	80067fc <puts>
	hSCH_Init();
 8001ed6:	f7ff f84d 	bl	8000f74 <hSCH_Init>
	/* Initialize tasks */
	TASK_DHT_MEASUREMENT              = SCH_Add_Task((TASK_SCH *)TASK_Dht_Sense,
 8001eda:	2301      	movs	r3, #1
 8001edc:	9300      	str	r3, [sp, #0]
 8001ede:	2301      	movs	r3, #1
 8001ee0:	2205      	movs	r2, #5
 8001ee2:	2100      	movs	r1, #0
 8001ee4:	4821      	ldr	r0, [pc, #132]	; (8001f6c <main+0x100>)
 8001ee6:	f7ff f8df 	bl	80010a8 <SCH_Add_Task>
 8001eea:	4603      	mov	r3, r0
 8001eec:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <main+0x104>)
 8001eee:	6013      	str	r3, [r2, #0]
										0,
										1000/FRAME_TICK_LENGTH_MS,
										1,
										1);
	TASK_DIST_MEASUREMENT             = SCH_Add_Task((TASK_SCH *)TASK_Dist_Sense,
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	2205      	movs	r2, #5
 8001ef8:	2100      	movs	r1, #0
 8001efa:	481e      	ldr	r0, [pc, #120]	; (8001f74 <main+0x108>)
 8001efc:	f7ff f8d4 	bl	80010a8 <SCH_Add_Task>
 8001f00:	4603      	mov	r3, r0
 8001f02:	4a1d      	ldr	r2, [pc, #116]	; (8001f78 <main+0x10c>)
 8001f04:	6013      	str	r3, [r2, #0]
										0,
										1000/FRAME_TICK_LENGTH_MS,
										1,
										1);
	TASK_DISPLAY_MEASUREMENT          = SCH_Add_Task((TASK_SCH *)TASK_Display_Measurement,
 8001f06:	2301      	movs	r3, #1
 8001f08:	9300      	str	r3, [sp, #0]
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	2205      	movs	r2, #5
 8001f0e:	2100      	movs	r1, #0
 8001f10:	481a      	ldr	r0, [pc, #104]	; (8001f7c <main+0x110>)
 8001f12:	f7ff f8c9 	bl	80010a8 <SCH_Add_Task>
 8001f16:	4603      	mov	r3, r0
 8001f18:	4a19      	ldr	r2, [pc, #100]	; (8001f80 <main+0x114>)
 8001f1a:	6013      	str	r3, [r2, #0]
										0,
										1000/FRAME_TICK_LENGTH_MS,
										1,
										1);
	TASK_INTERRUPT_HANDLER			  = SCH_Add_Task((TASK_SCH *)TASK_UART_Handler,
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	9300      	str	r3, [sp, #0]
 8001f20:	2301      	movs	r3, #1
 8001f22:	2205      	movs	r2, #5
 8001f24:	2100      	movs	r1, #0
 8001f26:	4817      	ldr	r0, [pc, #92]	; (8001f84 <main+0x118>)
 8001f28:	f7ff f8be 	bl	80010a8 <SCH_Add_Task>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <main+0x11c>)
 8001f30:	6013      	str	r3, [r2, #0]
										0,
										1000/FRAME_TICK_LENGTH_MS,
										1,
										1);

	SCH_Start(&htim3);
 8001f32:	4816      	ldr	r0, [pc, #88]	; (8001f8c <main+0x120>)
 8001f34:	f7ff f85c 	bl	8000ff0 <SCH_Start>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		hSCH_Dispatch_Tasks();
 8001f38:	f7ff f866 	bl	8001008 <hSCH_Dispatch_Tasks>
 8001f3c:	e7fc      	b.n	8001f38 <main+0xcc>
 8001f3e:	bf00      	nop
 8001f40:	200002d4 	.word	0x200002d4
 8001f44:	40020400 	.word	0x40020400
 8001f48:	20000364 	.word	0x20000364
 8001f4c:	20000238 	.word	0x20000238
 8001f50:	20000378 	.word	0x20000378
 8001f54:	40020000 	.word	0x40020000
 8001f58:	20000384 	.word	0x20000384
 8001f5c:	200003c4 	.word	0x200003c4
 8001f60:	200003b0 	.word	0x200003b0
 8001f64:	2000031c 	.word	0x2000031c
 8001f68:	08008d78 	.word	0x08008d78
 8001f6c:	08001c51 	.word	0x08001c51
 8001f70:	200003d4 	.word	0x200003d4
 8001f74:	08001c89 	.word	0x08001c89
 8001f78:	200003d8 	.word	0x200003d8
 8001f7c:	08001ca9 	.word	0x08001ca9
 8001f80:	200003dc 	.word	0x200003dc
 8001f84:	08001a85 	.word	0x08001a85
 8001f88:	200003e0 	.word	0x200003e0
 8001f8c:	2000028c 	.word	0x2000028c

08001f90 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b094      	sub	sp, #80	; 0x50
 8001f94:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f96:	f107 0320 	add.w	r3, r7, #32
 8001f9a:	2230      	movs	r2, #48	; 0x30
 8001f9c:	2100      	movs	r1, #0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f004 fd2c 	bl	80069fc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <SystemClock_Config+0xcc>)
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	4a27      	ldr	r2, [pc, #156]	; (800205c <SystemClock_Config+0xcc>)
 8001fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc2:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc4:	4b25      	ldr	r3, [pc, #148]	; (800205c <SystemClock_Config+0xcc>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	607b      	str	r3, [r7, #4]
 8001fd4:	4b22      	ldr	r3, [pc, #136]	; (8002060 <SystemClock_Config+0xd0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001fdc:	4a20      	ldr	r2, [pc, #128]	; (8002060 <SystemClock_Config+0xd0>)
 8001fde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fe2:	6013      	str	r3, [r2, #0]
 8001fe4:	4b1e      	ldr	r3, [pc, #120]	; (8002060 <SystemClock_Config+0xd0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fec:	607b      	str	r3, [r7, #4]
 8001fee:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ffc:	2302      	movs	r3, #2
 8001ffe:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002000:	2300      	movs	r3, #0
 8002002:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002004:	2308      	movs	r3, #8
 8002006:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 84;
 8002008:	2354      	movs	r3, #84	; 0x54
 800200a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800200c:	2302      	movs	r3, #2
 800200e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8002010:	2304      	movs	r3, #4
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002014:	f107 0320 	add.w	r3, r7, #32
 8002018:	4618      	mov	r0, r3
 800201a:	f001 fc8f 	bl	800393c <HAL_RCC_OscConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0x98>
	{
		Error_Handler();
 8002024:	f000 f9a8 	bl	8002378 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002028:	230f      	movs	r3, #15
 800202a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202c:	2302      	movs	r3, #2
 800202e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002034:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002038:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800203a:	2300      	movs	r3, #0
 800203c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800203e:	f107 030c 	add.w	r3, r7, #12
 8002042:	2102      	movs	r1, #2
 8002044:	4618      	mov	r0, r3
 8002046:	f001 fef1 	bl	8003e2c <HAL_RCC_ClockConfig>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 8002050:	f000 f992 	bl	8002378 <Error_Handler>
	}
}
 8002054:	bf00      	nop
 8002056:	3750      	adds	r7, #80	; 0x50
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40023800 	.word	0x40023800
 8002060:	40007000 	.word	0x40007000

08002064 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002068:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <MX_I2C2_Init+0x50>)
 800206a:	4a13      	ldr	r2, [pc, #76]	; (80020b8 <MX_I2C2_Init+0x54>)
 800206c:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800206e:	4b11      	ldr	r3, [pc, #68]	; (80020b4 <MX_I2C2_Init+0x50>)
 8002070:	4a12      	ldr	r2, [pc, #72]	; (80020bc <MX_I2C2_Init+0x58>)
 8002072:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002074:	4b0f      	ldr	r3, [pc, #60]	; (80020b4 <MX_I2C2_Init+0x50>)
 8002076:	2200      	movs	r2, #0
 8002078:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 800207a:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <MX_I2C2_Init+0x50>)
 800207c:	2200      	movs	r2, #0
 800207e:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002080:	4b0c      	ldr	r3, [pc, #48]	; (80020b4 <MX_I2C2_Init+0x50>)
 8002082:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002086:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002088:	4b0a      	ldr	r3, [pc, #40]	; (80020b4 <MX_I2C2_Init+0x50>)
 800208a:	2200      	movs	r2, #0
 800208c:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800208e:	4b09      	ldr	r3, [pc, #36]	; (80020b4 <MX_I2C2_Init+0x50>)
 8002090:	2200      	movs	r2, #0
 8002092:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002094:	4b07      	ldr	r3, [pc, #28]	; (80020b4 <MX_I2C2_Init+0x50>)
 8002096:	2200      	movs	r2, #0
 8002098:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800209a:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <MX_I2C2_Init+0x50>)
 800209c:	2200      	movs	r2, #0
 800209e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80020a0:	4804      	ldr	r0, [pc, #16]	; (80020b4 <MX_I2C2_Init+0x50>)
 80020a2:	f000 ffad 	bl	8003000 <HAL_I2C_Init>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <MX_I2C2_Init+0x4c>
	{
		Error_Handler();
 80020ac:	f000 f964 	bl	8002378 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80020b0:	bf00      	nop
 80020b2:	bd80      	pop	{r7, pc}
 80020b4:	20000238 	.word	0x20000238
 80020b8:	40005800 	.word	0x40005800
 80020bc:	000186a0 	.word	0x000186a0

080020c0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020c6:	f107 0308 	add.w	r3, r7, #8
 80020ca:	2200      	movs	r2, #0
 80020cc:	601a      	str	r2, [r3, #0]
 80020ce:	605a      	str	r2, [r3, #4]
 80020d0:	609a      	str	r2, [r3, #8]
 80020d2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020d4:	463b      	mov	r3, r7
 80020d6:	2200      	movs	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
 80020da:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <MX_TIM3_Init+0x94>)
 80020de:	4a1e      	ldr	r2, [pc, #120]	; (8002158 <MX_TIM3_Init+0x98>)
 80020e0:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 839;
 80020e2:	4b1c      	ldr	r3, [pc, #112]	; (8002154 <MX_TIM3_Init+0x94>)
 80020e4:	f240 3247 	movw	r2, #839	; 0x347
 80020e8:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020ea:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <MX_TIM3_Init+0x94>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 19999;
 80020f0:	4b18      	ldr	r3, [pc, #96]	; (8002154 <MX_TIM3_Init+0x94>)
 80020f2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80020f6:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <MX_TIM3_Init+0x94>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020fe:	4b15      	ldr	r3, [pc, #84]	; (8002154 <MX_TIM3_Init+0x94>)
 8002100:	2200      	movs	r2, #0
 8002102:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002104:	4813      	ldr	r0, [pc, #76]	; (8002154 <MX_TIM3_Init+0x94>)
 8002106:	f002 f871 	bl	80041ec <HAL_TIM_Base_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_TIM3_Init+0x54>
	{
		Error_Handler();
 8002110:	f000 f932 	bl	8002378 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002114:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002118:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	4619      	mov	r1, r3
 8002120:	480c      	ldr	r0, [pc, #48]	; (8002154 <MX_TIM3_Init+0x94>)
 8002122:	f002 fa5f 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <MX_TIM3_Init+0x70>
	{
		Error_Handler();
 800212c:	f000 f924 	bl	8002378 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002130:	2300      	movs	r3, #0
 8002132:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002134:	2300      	movs	r3, #0
 8002136:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002138:	463b      	mov	r3, r7
 800213a:	4619      	mov	r1, r3
 800213c:	4805      	ldr	r0, [pc, #20]	; (8002154 <MX_TIM3_Init+0x94>)
 800213e:	f002 fc67 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 8002142:	4603      	mov	r3, r0
 8002144:	2b00      	cmp	r3, #0
 8002146:	d001      	beq.n	800214c <MX_TIM3_Init+0x8c>
	{
		Error_Handler();
 8002148:	f000 f916 	bl	8002378 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 800214c:	bf00      	nop
 800214e:	3718      	adds	r7, #24
 8002150:	46bd      	mov	sp, r7
 8002152:	bd80      	pop	{r7, pc}
 8002154:	2000028c 	.word	0x2000028c
 8002158:	40000400 	.word	0x40000400

0800215c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b086      	sub	sp, #24
 8002160:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002162:	f107 0308 	add.w	r3, r7, #8
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002170:	463b      	mov	r3, r7
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002178:	4b1d      	ldr	r3, [pc, #116]	; (80021f0 <MX_TIM4_Init+0x94>)
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <MX_TIM4_Init+0x98>)
 800217c:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 83;
 800217e:	4b1c      	ldr	r3, [pc, #112]	; (80021f0 <MX_TIM4_Init+0x94>)
 8002180:	2253      	movs	r2, #83	; 0x53
 8002182:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002184:	4b1a      	ldr	r3, [pc, #104]	; (80021f0 <MX_TIM4_Init+0x94>)
 8002186:	2200      	movs	r2, #0
 8002188:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <MX_TIM4_Init+0x94>)
 800218c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002190:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002192:	4b17      	ldr	r3, [pc, #92]	; (80021f0 <MX_TIM4_Init+0x94>)
 8002194:	2200      	movs	r2, #0
 8002196:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002198:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <MX_TIM4_Init+0x94>)
 800219a:	2200      	movs	r2, #0
 800219c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800219e:	4814      	ldr	r0, [pc, #80]	; (80021f0 <MX_TIM4_Init+0x94>)
 80021a0:	f002 f824 	bl	80041ec <HAL_TIM_Base_Init>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <MX_TIM4_Init+0x52>
	{
		Error_Handler();
 80021aa:	f000 f8e5 	bl	8002378 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b2:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021b4:	f107 0308 	add.w	r3, r7, #8
 80021b8:	4619      	mov	r1, r3
 80021ba:	480d      	ldr	r0, [pc, #52]	; (80021f0 <MX_TIM4_Init+0x94>)
 80021bc:	f002 fa12 	bl	80045e4 <HAL_TIM_ConfigClockSource>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM4_Init+0x6e>
	{
		Error_Handler();
 80021c6:	f000 f8d7 	bl	8002378 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021ca:	2300      	movs	r3, #0
 80021cc:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021ce:	2300      	movs	r3, #0
 80021d0:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021d2:	463b      	mov	r3, r7
 80021d4:	4619      	mov	r1, r3
 80021d6:	4806      	ldr	r0, [pc, #24]	; (80021f0 <MX_TIM4_Init+0x94>)
 80021d8:	f002 fc1a 	bl	8004a10 <HAL_TIMEx_MasterConfigSynchronization>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_TIM4_Init+0x8a>
	{
		Error_Handler();
 80021e2:	f000 f8c9 	bl	8002378 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	3718      	adds	r7, #24
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	200002d4 	.word	0x200002d4
 80021f4:	40000800 	.word	0x40000800

080021f8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80021fc:	4b11      	ldr	r3, [pc, #68]	; (8002244 <MX_USART2_UART_Init+0x4c>)
 80021fe:	4a12      	ldr	r2, [pc, #72]	; (8002248 <MX_USART2_UART_Init+0x50>)
 8002200:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002202:	4b10      	ldr	r3, [pc, #64]	; (8002244 <MX_USART2_UART_Init+0x4c>)
 8002204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002208:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800220a:	4b0e      	ldr	r3, [pc, #56]	; (8002244 <MX_USART2_UART_Init+0x4c>)
 800220c:	2200      	movs	r2, #0
 800220e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002210:	4b0c      	ldr	r3, [pc, #48]	; (8002244 <MX_USART2_UART_Init+0x4c>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002216:	4b0b      	ldr	r3, [pc, #44]	; (8002244 <MX_USART2_UART_Init+0x4c>)
 8002218:	2200      	movs	r2, #0
 800221a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800221c:	4b09      	ldr	r3, [pc, #36]	; (8002244 <MX_USART2_UART_Init+0x4c>)
 800221e:	220c      	movs	r2, #12
 8002220:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002222:	4b08      	ldr	r3, [pc, #32]	; (8002244 <MX_USART2_UART_Init+0x4c>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002228:	4b06      	ldr	r3, [pc, #24]	; (8002244 <MX_USART2_UART_Init+0x4c>)
 800222a:	2200      	movs	r2, #0
 800222c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800222e:	4805      	ldr	r0, [pc, #20]	; (8002244 <MX_USART2_UART_Init+0x4c>)
 8002230:	f002 fc70 	bl	8004b14 <HAL_UART_Init>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800223a:	f000 f89d 	bl	8002378 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000031c 	.word	0x2000031c
 8002248:	40004400 	.word	0x40004400

0800224c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b08a      	sub	sp, #40	; 0x28
 8002250:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	2200      	movs	r2, #0
 8002258:	601a      	str	r2, [r3, #0]
 800225a:	605a      	str	r2, [r3, #4]
 800225c:	609a      	str	r2, [r3, #8]
 800225e:	60da      	str	r2, [r3, #12]
 8002260:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	613b      	str	r3, [r7, #16]
 8002266:	4b40      	ldr	r3, [pc, #256]	; (8002368 <MX_GPIO_Init+0x11c>)
 8002268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800226a:	4a3f      	ldr	r2, [pc, #252]	; (8002368 <MX_GPIO_Init+0x11c>)
 800226c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002270:	6313      	str	r3, [r2, #48]	; 0x30
 8002272:	4b3d      	ldr	r3, [pc, #244]	; (8002368 <MX_GPIO_Init+0x11c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	4b39      	ldr	r3, [pc, #228]	; (8002368 <MX_GPIO_Init+0x11c>)
 8002284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002286:	4a38      	ldr	r2, [pc, #224]	; (8002368 <MX_GPIO_Init+0x11c>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6313      	str	r3, [r2, #48]	; 0x30
 800228e:	4b36      	ldr	r3, [pc, #216]	; (8002368 <MX_GPIO_Init+0x11c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002292:	f003 0301 	and.w	r3, r3, #1
 8002296:	60fb      	str	r3, [r7, #12]
 8002298:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	4b32      	ldr	r3, [pc, #200]	; (8002368 <MX_GPIO_Init+0x11c>)
 80022a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022a2:	4a31      	ldr	r2, [pc, #196]	; (8002368 <MX_GPIO_Init+0x11c>)
 80022a4:	f043 0304 	orr.w	r3, r3, #4
 80022a8:	6313      	str	r3, [r2, #48]	; 0x30
 80022aa:	4b2f      	ldr	r3, [pc, #188]	; (8002368 <MX_GPIO_Init+0x11c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f003 0304 	and.w	r3, r3, #4
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4b2b      	ldr	r3, [pc, #172]	; (8002368 <MX_GPIO_Init+0x11c>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a2a      	ldr	r2, [pc, #168]	; (8002368 <MX_GPIO_Init+0x11c>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b28      	ldr	r3, [pc, #160]	; (8002368 <MX_GPIO_Init+0x11c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 80022d2:	2200      	movs	r2, #0
 80022d4:	2102      	movs	r1, #2
 80022d6:	4825      	ldr	r0, [pc, #148]	; (800236c <MX_GPIO_Init+0x120>)
 80022d8:	f000 fe78 	bl	8002fcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80022dc:	2200      	movs	r2, #0
 80022de:	2110      	movs	r1, #16
 80022e0:	4823      	ldr	r0, [pc, #140]	; (8002370 <MX_GPIO_Init+0x124>)
 80022e2:	f000 fe73 	bl	8002fcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DHT_GPIO_Port, DHT_Pin, GPIO_PIN_RESET);
 80022e6:	2200      	movs	r2, #0
 80022e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022ec:	4821      	ldr	r0, [pc, #132]	; (8002374 <MX_GPIO_Init+0x128>)
 80022ee:	f000 fe6d 	bl	8002fcc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : TRIG_Pin */
	GPIO_InitStruct.Pin = TRIG_Pin;
 80022f2:	2302      	movs	r3, #2
 80022f4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022f6:	2301      	movs	r3, #1
 80022f8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fe:	2300      	movs	r3, #0
 8002300:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4818      	ldr	r0, [pc, #96]	; (800236c <MX_GPIO_Init+0x120>)
 800230a:	f000 fcc3 	bl	8002c94 <HAL_GPIO_Init>

	/*Configure GPIO pin : ECHO_Pin */
	GPIO_InitStruct.Pin = ECHO_Pin;
 800230e:	2310      	movs	r3, #16
 8002310:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002312:	2300      	movs	r3, #0
 8002314:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ECHO_GPIO_Port, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4812      	ldr	r0, [pc, #72]	; (800236c <MX_GPIO_Init+0x120>)
 8002322:	f000 fcb7 	bl	8002c94 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED_Pin */
	GPIO_InitStruct.Pin = LED_Pin;
 8002326:	2310      	movs	r3, #16
 8002328:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800232a:	2301      	movs	r3, #1
 800232c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232e:	2300      	movs	r3, #0
 8002330:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002332:	2300      	movs	r3, #0
 8002334:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002336:	f107 0314 	add.w	r3, r7, #20
 800233a:	4619      	mov	r1, r3
 800233c:	480c      	ldr	r0, [pc, #48]	; (8002370 <MX_GPIO_Init+0x124>)
 800233e:	f000 fca9 	bl	8002c94 <HAL_GPIO_Init>

	/*Configure GPIO pin : DHT_Pin */
	GPIO_InitStruct.Pin = DHT_Pin;
 8002342:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002346:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002348:	2301      	movs	r3, #1
 800234a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234c:	2300      	movs	r3, #0
 800234e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(DHT_GPIO_Port, &GPIO_InitStruct);
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <MX_GPIO_Init+0x128>)
 800235c:	f000 fc9a 	bl	8002c94 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8002360:	bf00      	nop
 8002362:	3728      	adds	r7, #40	; 0x28
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	40020000 	.word	0x40020000
 8002370:	40020800 	.word	0x40020800
 8002374:	40020400 	.word	0x40020400

08002378 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800237c:	b672      	cpsid	i
}
 800237e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002380:	e7fe      	b.n	8002380 <Error_Handler+0x8>
	...

08002384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002384:	b480      	push	{r7}
 8002386:	b083      	sub	sp, #12
 8002388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <HAL_MspInit+0x4c>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_MspInit+0x4c>)
 8002394:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002398:	6453      	str	r3, [r2, #68]	; 0x44
 800239a:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_MspInit+0x4c>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a2:	607b      	str	r3, [r7, #4]
 80023a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	603b      	str	r3, [r7, #0]
 80023aa:	4b09      	ldr	r3, [pc, #36]	; (80023d0 <HAL_MspInit+0x4c>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a08      	ldr	r2, [pc, #32]	; (80023d0 <HAL_MspInit+0x4c>)
 80023b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b06      	ldr	r3, [pc, #24]	; (80023d0 <HAL_MspInit+0x4c>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023be:	603b      	str	r3, [r7, #0]
 80023c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023c2:	bf00      	nop
 80023c4:	370c      	adds	r7, #12
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	40023800 	.word	0x40023800

080023d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	; 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a21      	ldr	r2, [pc, #132]	; (8002478 <HAL_I2C_MspInit+0xa4>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d13c      	bne.n	8002470 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b20      	ldr	r3, [pc, #128]	; (800247c <HAL_I2C_MspInit+0xa8>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a1f      	ldr	r2, [pc, #124]	; (800247c <HAL_I2C_MspInit+0xa8>)
 8002400:	f043 0302 	orr.w	r3, r3, #2
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b1d      	ldr	r3, [pc, #116]	; (800247c <HAL_I2C_MspInit+0xa8>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0302 	and.w	r3, r3, #2
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB3     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002412:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002416:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002418:	2312      	movs	r3, #18
 800241a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002420:	2303      	movs	r3, #3
 8002422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002424:	2304      	movs	r3, #4
 8002426:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002428:	f107 0314 	add.w	r3, r7, #20
 800242c:	4619      	mov	r1, r3
 800242e:	4814      	ldr	r0, [pc, #80]	; (8002480 <HAL_I2C_MspInit+0xac>)
 8002430:	f000 fc30 	bl	8002c94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002434:	2308      	movs	r3, #8
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002438:	2312      	movs	r3, #18
 800243a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002440:	2303      	movs	r3, #3
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002444:	2309      	movs	r3, #9
 8002446:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	480c      	ldr	r0, [pc, #48]	; (8002480 <HAL_I2C_MspInit+0xac>)
 8002450:	f000 fc20 	bl	8002c94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002454:	2300      	movs	r3, #0
 8002456:	60fb      	str	r3, [r7, #12]
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <HAL_I2C_MspInit+0xa8>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a07      	ldr	r2, [pc, #28]	; (800247c <HAL_I2C_MspInit+0xa8>)
 800245e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
 8002464:	4b05      	ldr	r3, [pc, #20]	; (800247c <HAL_I2C_MspInit+0xa8>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800246c:	60fb      	str	r3, [r7, #12]
 800246e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002470:	bf00      	nop
 8002472:	3728      	adds	r7, #40	; 0x28
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40005800 	.word	0x40005800
 800247c:	40023800 	.word	0x40023800
 8002480:	40020400 	.word	0x40020400

08002484 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a18      	ldr	r2, [pc, #96]	; (80024f4 <HAL_TIM_Base_MspInit+0x70>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d116      	bne.n	80024c4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b17      	ldr	r3, [pc, #92]	; (80024f8 <HAL_TIM_Base_MspInit+0x74>)
 800249c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800249e:	4a16      	ldr	r2, [pc, #88]	; (80024f8 <HAL_TIM_Base_MspInit+0x74>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	6413      	str	r3, [r2, #64]	; 0x40
 80024a6:	4b14      	ldr	r3, [pc, #80]	; (80024f8 <HAL_TIM_Base_MspInit+0x74>)
 80024a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80024b2:	2200      	movs	r2, #0
 80024b4:	2101      	movs	r1, #1
 80024b6:	201d      	movs	r0, #29
 80024b8:	f000 fb23 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024bc:	201d      	movs	r0, #29
 80024be:	f000 fb3c 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024c2:	e012      	b.n	80024ea <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM4)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a0c      	ldr	r2, [pc, #48]	; (80024fc <HAL_TIM_Base_MspInit+0x78>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d10d      	bne.n	80024ea <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60bb      	str	r3, [r7, #8]
 80024d2:	4b09      	ldr	r3, [pc, #36]	; (80024f8 <HAL_TIM_Base_MspInit+0x74>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	4a08      	ldr	r2, [pc, #32]	; (80024f8 <HAL_TIM_Base_MspInit+0x74>)
 80024d8:	f043 0304 	orr.w	r3, r3, #4
 80024dc:	6413      	str	r3, [r2, #64]	; 0x40
 80024de:	4b06      	ldr	r3, [pc, #24]	; (80024f8 <HAL_TIM_Base_MspInit+0x74>)
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f003 0304 	and.w	r3, r3, #4
 80024e6:	60bb      	str	r3, [r7, #8]
 80024e8:	68bb      	ldr	r3, [r7, #8]
}
 80024ea:	bf00      	nop
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	40000400 	.word	0x40000400
 80024f8:	40023800 	.word	0x40023800
 80024fc:	40000800 	.word	0x40000800

08002500 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b08a      	sub	sp, #40	; 0x28
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002508:	f107 0314 	add.w	r3, r7, #20
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
 8002510:	605a      	str	r2, [r3, #4]
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	60da      	str	r2, [r3, #12]
 8002516:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a1d      	ldr	r2, [pc, #116]	; (8002594 <HAL_UART_MspInit+0x94>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d133      	bne.n	800258a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002522:	2300      	movs	r3, #0
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <HAL_UART_MspInit+0x98>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	4a1b      	ldr	r2, [pc, #108]	; (8002598 <HAL_UART_MspInit+0x98>)
 800252c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002530:	6413      	str	r3, [r2, #64]	; 0x40
 8002532:	4b19      	ldr	r3, [pc, #100]	; (8002598 <HAL_UART_MspInit+0x98>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800253a:	613b      	str	r3, [r7, #16]
 800253c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800253e:	2300      	movs	r3, #0
 8002540:	60fb      	str	r3, [r7, #12]
 8002542:	4b15      	ldr	r3, [pc, #84]	; (8002598 <HAL_UART_MspInit+0x98>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a14      	ldr	r2, [pc, #80]	; (8002598 <HAL_UART_MspInit+0x98>)
 8002548:	f043 0301 	orr.w	r3, r3, #1
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b12      	ldr	r3, [pc, #72]	; (8002598 <HAL_UART_MspInit+0x98>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0301 	and.w	r3, r3, #1
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800255a:	230c      	movs	r3, #12
 800255c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255e:	2302      	movs	r3, #2
 8002560:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002566:	2303      	movs	r3, #3
 8002568:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800256a:	2307      	movs	r3, #7
 800256c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800256e:	f107 0314 	add.w	r3, r7, #20
 8002572:	4619      	mov	r1, r3
 8002574:	4809      	ldr	r0, [pc, #36]	; (800259c <HAL_UART_MspInit+0x9c>)
 8002576:	f000 fb8d 	bl	8002c94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 1, 0);
 800257a:	2200      	movs	r2, #0
 800257c:	2101      	movs	r1, #1
 800257e:	2026      	movs	r0, #38	; 0x26
 8002580:	f000 fabf 	bl	8002b02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002584:	2026      	movs	r0, #38	; 0x26
 8002586:	f000 fad8 	bl	8002b3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800258a:	bf00      	nop
 800258c:	3728      	adds	r7, #40	; 0x28
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	40004400 	.word	0x40004400
 8002598:	40023800 	.word	0x40023800
 800259c:	40020000 	.word	0x40020000

080025a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025a4:	e7fe      	b.n	80025a4 <NMI_Handler+0x4>

080025a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025a6:	b480      	push	{r7}
 80025a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025aa:	e7fe      	b.n	80025aa <HardFault_Handler+0x4>

080025ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025b0:	e7fe      	b.n	80025b0 <MemManage_Handler+0x4>

080025b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025b2:	b480      	push	{r7}
 80025b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025b6:	e7fe      	b.n	80025b6 <BusFault_Handler+0x4>

080025b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025bc:	e7fe      	b.n	80025bc <UsageFault_Handler+0x4>

080025be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025be:	b480      	push	{r7}
 80025c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr

080025cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr

080025da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ec:	f000 f96a 	bl	80028c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}

080025f4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80025f8:	4802      	ldr	r0, [pc, #8]	; (8002604 <TIM3_IRQHandler+0x10>)
 80025fa:	f001 ff03 	bl	8004404 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000028c 	.word	0x2000028c

08002608 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800260c:	4802      	ldr	r0, [pc, #8]	; (8002618 <USART2_IRQHandler+0x10>)
 800260e:	f002 fb81 	bl	8004d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  /* USER CODE END USART2_IRQn 1 */
}
 8002612:	bf00      	nop
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	2000031c 	.word	0x2000031c

0800261c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0
  return 1;
 8002620:	2301      	movs	r3, #1
}
 8002622:	4618      	mov	r0, r3
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <_kill>:

int _kill(int pid, int sig)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
 8002634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002636:	f004 fa8f 	bl	8006b58 <__errno>
 800263a:	4603      	mov	r3, r0
 800263c:	2216      	movs	r2, #22
 800263e:	601a      	str	r2, [r3, #0]
  return -1;
 8002640:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002644:	4618      	mov	r0, r3
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <_exit>:

void _exit (int status)
{
 800264c:	b580      	push	{r7, lr}
 800264e:	b082      	sub	sp, #8
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ffe7 	bl	800262c <_kill>
  while (1) {}    /* Make sure we hang here */
 800265e:	e7fe      	b.n	800265e <_exit+0x12>

08002660 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af00      	add	r7, sp, #0
 8002666:	60f8      	str	r0, [r7, #12]
 8002668:	60b9      	str	r1, [r7, #8]
 800266a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e00a      	b.n	8002688 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002672:	f3af 8000 	nop.w
 8002676:	4601      	mov	r1, r0
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	1c5a      	adds	r2, r3, #1
 800267c:	60ba      	str	r2, [r7, #8]
 800267e:	b2ca      	uxtb	r2, r1
 8002680:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	3301      	adds	r3, #1
 8002686:	617b      	str	r3, [r7, #20]
 8002688:	697a      	ldr	r2, [r7, #20]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	dbf0      	blt.n	8002672 <_read+0x12>
  }

  return len;
 8002690:	687b      	ldr	r3, [r7, #4]
}
 8002692:	4618      	mov	r0, r3
 8002694:	3718      	adds	r7, #24
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}

0800269a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800269a:	b580      	push	{r7, lr}
 800269c:	b086      	sub	sp, #24
 800269e:	af00      	add	r7, sp, #0
 80026a0:	60f8      	str	r0, [r7, #12]
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a6:	2300      	movs	r3, #0
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e009      	b.n	80026c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	1c5a      	adds	r2, r3, #1
 80026b0:	60ba      	str	r2, [r7, #8]
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7ff f999 	bl	80019ec <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	3301      	adds	r3, #1
 80026be:	617b      	str	r3, [r7, #20]
 80026c0:	697a      	ldr	r2, [r7, #20]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	429a      	cmp	r2, r3
 80026c6:	dbf1      	blt.n	80026ac <_write+0x12>
  }
  return len;
 80026c8:	687b      	ldr	r3, [r7, #4]
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3718      	adds	r7, #24
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <_close>:

int _close(int file)
{
 80026d2:	b480      	push	{r7}
 80026d4:	b083      	sub	sp, #12
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026de:	4618      	mov	r0, r3
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e8:	4770      	bx	lr

080026ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026ea:	b480      	push	{r7}
 80026ec:	b083      	sub	sp, #12
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
 80026f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026fa:	605a      	str	r2, [r3, #4]
  return 0;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr

0800270a <_isatty>:

int _isatty(int file)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002712:	2301      	movs	r3, #1
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002720:	b480      	push	{r7}
 8002722:	b085      	sub	sp, #20
 8002724:	af00      	add	r7, sp, #0
 8002726:	60f8      	str	r0, [r7, #12]
 8002728:	60b9      	str	r1, [r7, #8]
 800272a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800272c:	2300      	movs	r3, #0
}
 800272e:	4618      	mov	r0, r3
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
	...

0800273c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002744:	4a14      	ldr	r2, [pc, #80]	; (8002798 <_sbrk+0x5c>)
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <_sbrk+0x60>)
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002750:	4b13      	ldr	r3, [pc, #76]	; (80027a0 <_sbrk+0x64>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b00      	cmp	r3, #0
 8002756:	d102      	bne.n	800275e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002758:	4b11      	ldr	r3, [pc, #68]	; (80027a0 <_sbrk+0x64>)
 800275a:	4a12      	ldr	r2, [pc, #72]	; (80027a4 <_sbrk+0x68>)
 800275c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800275e:	4b10      	ldr	r3, [pc, #64]	; (80027a0 <_sbrk+0x64>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4413      	add	r3, r2
 8002766:	693a      	ldr	r2, [r7, #16]
 8002768:	429a      	cmp	r2, r3
 800276a:	d207      	bcs.n	800277c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800276c:	f004 f9f4 	bl	8006b58 <__errno>
 8002770:	4603      	mov	r3, r0
 8002772:	220c      	movs	r2, #12
 8002774:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	e009      	b.n	8002790 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800277c:	4b08      	ldr	r3, [pc, #32]	; (80027a0 <_sbrk+0x64>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002782:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <_sbrk+0x64>)
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	4413      	add	r3, r2
 800278a:	4a05      	ldr	r2, [pc, #20]	; (80027a0 <_sbrk+0x64>)
 800278c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	20018000 	.word	0x20018000
 800279c:	00000400 	.word	0x00000400
 80027a0:	200003e4 	.word	0x200003e4
 80027a4:	20000538 	.word	0x20000538

080027a8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <SystemInit+0x20>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <SystemInit+0x20>)
 80027b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027bc:	bf00      	nop
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
 80027c6:	bf00      	nop
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80027cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002804 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 80027d0:	f7ff ffea 	bl	80027a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027d4:	480c      	ldr	r0, [pc, #48]	; (8002808 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80027d6:	490d      	ldr	r1, [pc, #52]	; (800280c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80027d8:	4a0d      	ldr	r2, [pc, #52]	; (8002810 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027dc:	e002      	b.n	80027e4 <LoopCopyDataInit>

080027de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027e2:	3304      	adds	r3, #4

080027e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027e8:	d3f9      	bcc.n	80027de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027ea:	4a0a      	ldr	r2, [pc, #40]	; (8002814 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027ec:	4c0a      	ldr	r4, [pc, #40]	; (8002818 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027f0:	e001      	b.n	80027f6 <LoopFillZerobss>

080027f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027f4:	3204      	adds	r2, #4

080027f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027f8:	d3fb      	bcc.n	80027f2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80027fa:	f004 f9b3 	bl	8006b64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027fe:	f7ff fb35 	bl	8001e6c <main>
  bx  lr    
 8002802:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002804:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002808:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800280c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002810:	08009178 	.word	0x08009178
  ldr r2, =_sbss
 8002814:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002818:	20000538 	.word	0x20000538

0800281c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800281c:	e7fe      	b.n	800281c <ADC_IRQHandler>
	...

08002820 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002824:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_Init+0x40>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0d      	ldr	r2, [pc, #52]	; (8002860 <HAL_Init+0x40>)
 800282a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800282e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002830:	4b0b      	ldr	r3, [pc, #44]	; (8002860 <HAL_Init+0x40>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <HAL_Init+0x40>)
 8002836:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800283a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800283c:	4b08      	ldr	r3, [pc, #32]	; (8002860 <HAL_Init+0x40>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a07      	ldr	r2, [pc, #28]	; (8002860 <HAL_Init+0x40>)
 8002842:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002846:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002848:	2003      	movs	r0, #3
 800284a:	f000 f94f 	bl	8002aec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800284e:	200f      	movs	r0, #15
 8002850:	f000 f808 	bl	8002864 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002854:	f7ff fd96 	bl	8002384 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	40023c00 	.word	0x40023c00

08002864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b082      	sub	sp, #8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800286c:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_InitTick+0x54>)
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_InitTick+0x58>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	4619      	mov	r1, r3
 8002876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800287a:	fbb3 f3f1 	udiv	r3, r3, r1
 800287e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002882:	4618      	mov	r0, r3
 8002884:	f000 f967 	bl	8002b56 <HAL_SYSTICK_Config>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d001      	beq.n	8002892 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e00e      	b.n	80028b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2b0f      	cmp	r3, #15
 8002896:	d80a      	bhi.n	80028ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002898:	2200      	movs	r2, #0
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	f04f 30ff 	mov.w	r0, #4294967295
 80028a0:	f000 f92f 	bl	8002b02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028a4:	4a06      	ldr	r2, [pc, #24]	; (80028c0 <HAL_InitTick+0x5c>)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028aa:	2300      	movs	r3, #0
 80028ac:	e000      	b.n	80028b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000004 	.word	0x20000004
 80028bc:	2000000c 	.word	0x2000000c
 80028c0:	20000008 	.word	0x20000008

080028c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028c4:	b480      	push	{r7}
 80028c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028c8:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_IncTick+0x20>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	461a      	mov	r2, r3
 80028ce:	4b06      	ldr	r3, [pc, #24]	; (80028e8 <HAL_IncTick+0x24>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a04      	ldr	r2, [pc, #16]	; (80028e8 <HAL_IncTick+0x24>)
 80028d6:	6013      	str	r3, [r2, #0]
}
 80028d8:	bf00      	nop
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	2000000c 	.word	0x2000000c
 80028e8:	200003e8 	.word	0x200003e8

080028ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  return uwTick;
 80028f0:	4b03      	ldr	r3, [pc, #12]	; (8002900 <HAL_GetTick+0x14>)
 80028f2:	681b      	ldr	r3, [r3, #0]
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr
 80028fe:	bf00      	nop
 8002900:	200003e8 	.word	0x200003e8

08002904 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800290c:	f7ff ffee 	bl	80028ec <HAL_GetTick>
 8002910:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800291c:	d005      	beq.n	800292a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_Delay+0x44>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	461a      	mov	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	4413      	add	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800292a:	bf00      	nop
 800292c:	f7ff ffde 	bl	80028ec <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	429a      	cmp	r2, r3
 800293a:	d8f7      	bhi.n	800292c <HAL_Delay+0x28>
  {
  }
}
 800293c:	bf00      	nop
 800293e:	bf00      	nop
 8002940:	3710      	adds	r7, #16
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}
 8002946:	bf00      	nop
 8002948:	2000000c 	.word	0x2000000c

0800294c <__NVIC_SetPriorityGrouping>:
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f003 0307 	and.w	r3, r3, #7
 800295a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800295c:	4b0c      	ldr	r3, [pc, #48]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002962:	68ba      	ldr	r2, [r7, #8]
 8002964:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002968:	4013      	ands	r3, r2
 800296a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002974:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800297c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800297e:	4a04      	ldr	r2, [pc, #16]	; (8002990 <__NVIC_SetPriorityGrouping+0x44>)
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	60d3      	str	r3, [r2, #12]
}
 8002984:	bf00      	nop
 8002986:	3714      	adds	r7, #20
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_GetPriorityGrouping>:
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002998:	4b04      	ldr	r3, [pc, #16]	; (80029ac <__NVIC_GetPriorityGrouping+0x18>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	0a1b      	lsrs	r3, r3, #8
 800299e:	f003 0307 	and.w	r3, r3, #7
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000ed00 	.word	0xe000ed00

080029b0 <__NVIC_EnableIRQ>:
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	db0b      	blt.n	80029da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029c2:	79fb      	ldrb	r3, [r7, #7]
 80029c4:	f003 021f 	and.w	r2, r3, #31
 80029c8:	4907      	ldr	r1, [pc, #28]	; (80029e8 <__NVIC_EnableIRQ+0x38>)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	095b      	lsrs	r3, r3, #5
 80029d0:	2001      	movs	r0, #1
 80029d2:	fa00 f202 	lsl.w	r2, r0, r2
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	e000e100 	.word	0xe000e100

080029ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	4603      	mov	r3, r0
 80029f4:	6039      	str	r1, [r7, #0]
 80029f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	db0a      	blt.n	8002a16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	b2da      	uxtb	r2, r3
 8002a04:	490c      	ldr	r1, [pc, #48]	; (8002a38 <__NVIC_SetPriority+0x4c>)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	0112      	lsls	r2, r2, #4
 8002a0c:	b2d2      	uxtb	r2, r2
 8002a0e:	440b      	add	r3, r1
 8002a10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a14:	e00a      	b.n	8002a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	b2da      	uxtb	r2, r3
 8002a1a:	4908      	ldr	r1, [pc, #32]	; (8002a3c <__NVIC_SetPriority+0x50>)
 8002a1c:	79fb      	ldrb	r3, [r7, #7]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	3b04      	subs	r3, #4
 8002a24:	0112      	lsls	r2, r2, #4
 8002a26:	b2d2      	uxtb	r2, r2
 8002a28:	440b      	add	r3, r1
 8002a2a:	761a      	strb	r2, [r3, #24]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000e100 	.word	0xe000e100
 8002a3c:	e000ed00 	.word	0xe000ed00

08002a40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b089      	sub	sp, #36	; 0x24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	f1c3 0307 	rsb	r3, r3, #7
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	bf28      	it	cs
 8002a5e:	2304      	movcs	r3, #4
 8002a60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3304      	adds	r3, #4
 8002a66:	2b06      	cmp	r3, #6
 8002a68:	d902      	bls.n	8002a70 <NVIC_EncodePriority+0x30>
 8002a6a:	69fb      	ldr	r3, [r7, #28]
 8002a6c:	3b03      	subs	r3, #3
 8002a6e:	e000      	b.n	8002a72 <NVIC_EncodePriority+0x32>
 8002a70:	2300      	movs	r3, #0
 8002a72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a74:	f04f 32ff 	mov.w	r2, #4294967295
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7e:	43da      	mvns	r2, r3
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	401a      	ands	r2, r3
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a88:	f04f 31ff 	mov.w	r1, #4294967295
 8002a8c:	697b      	ldr	r3, [r7, #20]
 8002a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a92:	43d9      	mvns	r1, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	4313      	orrs	r3, r2
         );
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3724      	adds	r7, #36	; 0x24
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b082      	sub	sp, #8
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ab8:	d301      	bcc.n	8002abe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002aba:	2301      	movs	r3, #1
 8002abc:	e00f      	b.n	8002ade <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002abe:	4a0a      	ldr	r2, [pc, #40]	; (8002ae8 <SysTick_Config+0x40>)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ac6:	210f      	movs	r1, #15
 8002ac8:	f04f 30ff 	mov.w	r0, #4294967295
 8002acc:	f7ff ff8e 	bl	80029ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad0:	4b05      	ldr	r3, [pc, #20]	; (8002ae8 <SysTick_Config+0x40>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ad6:	4b04      	ldr	r3, [pc, #16]	; (8002ae8 <SysTick_Config+0x40>)
 8002ad8:	2207      	movs	r2, #7
 8002ada:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	e000e010 	.word	0xe000e010

08002aec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff ff29 	bl	800294c <__NVIC_SetPriorityGrouping>
}
 8002afa:	bf00      	nop
 8002afc:	3708      	adds	r7, #8
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}

08002b02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b02:	b580      	push	{r7, lr}
 8002b04:	b086      	sub	sp, #24
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	4603      	mov	r3, r0
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b14:	f7ff ff3e 	bl	8002994 <__NVIC_GetPriorityGrouping>
 8002b18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	68b9      	ldr	r1, [r7, #8]
 8002b1e:	6978      	ldr	r0, [r7, #20]
 8002b20:	f7ff ff8e 	bl	8002a40 <NVIC_EncodePriority>
 8002b24:	4602      	mov	r2, r0
 8002b26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff5d 	bl	80029ec <__NVIC_SetPriority>
}
 8002b32:	bf00      	nop
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	4603      	mov	r3, r0
 8002b42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff ff31 	bl	80029b0 <__NVIC_EnableIRQ>
}
 8002b4e:	bf00      	nop
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b082      	sub	sp, #8
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f7ff ffa2 	bl	8002aa8 <SysTick_Config>
 8002b64:	4603      	mov	r3, r0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b084      	sub	sp, #16
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b7a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b7c:	f7ff feb6 	bl	80028ec <HAL_GetTick>
 8002b80:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d008      	beq.n	8002ba0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2280      	movs	r2, #128	; 0x80
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2200      	movs	r2, #0
 8002b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e052      	b.n	8002c46 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0216 	bic.w	r2, r2, #22
 8002bae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695a      	ldr	r2, [r3, #20]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002bbe:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <HAL_DMA_Abort+0x62>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d007      	beq.n	8002be0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	681a      	ldr	r2, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f022 0208 	bic.w	r2, r2, #8
 8002bde:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0201 	bic.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf0:	e013      	b.n	8002c1a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bf2:	f7ff fe7b 	bl	80028ec <HAL_GetTick>
 8002bf6:	4602      	mov	r2, r0
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	1ad3      	subs	r3, r2, r3
 8002bfc:	2b05      	cmp	r3, #5
 8002bfe:	d90c      	bls.n	8002c1a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e015      	b.n	8002c46 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1e4      	bne.n	8002bf2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	223f      	movs	r2, #63	; 0x3f
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d004      	beq.n	8002c6c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2280      	movs	r2, #128	; 0x80
 8002c66:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002c68:	2301      	movs	r3, #1
 8002c6a:	e00c      	b.n	8002c86 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2205      	movs	r2, #5
 8002c70:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f022 0201 	bic.w	r2, r2, #1
 8002c82:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr
	...

08002c94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b089      	sub	sp, #36	; 0x24
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
 8002cae:	e159      	b.n	8002f64 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	429a      	cmp	r2, r3
 8002cca:	f040 8148 	bne.w	8002f5e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f003 0303 	and.w	r3, r3, #3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d005      	beq.n	8002ce6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d130      	bne.n	8002d48 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002cec:	69fb      	ldr	r3, [r7, #28]
 8002cee:	005b      	lsls	r3, r3, #1
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf6:	43db      	mvns	r3, r3
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	68da      	ldr	r2, [r3, #12]
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	43db      	mvns	r3, r3
 8002d26:	69ba      	ldr	r2, [r7, #24]
 8002d28:	4013      	ands	r3, r2
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	091b      	lsrs	r3, r3, #4
 8002d32:	f003 0201 	and.w	r2, r3, #1
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3c:	69ba      	ldr	r2, [r7, #24]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	69ba      	ldr	r2, [r7, #24]
 8002d46:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 0303 	and.w	r3, r3, #3
 8002d50:	2b03      	cmp	r3, #3
 8002d52:	d017      	beq.n	8002d84 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	2203      	movs	r2, #3
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	689a      	ldr	r2, [r3, #8]
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	005b      	lsls	r3, r3, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f003 0303 	and.w	r3, r3, #3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d123      	bne.n	8002dd8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	08da      	lsrs	r2, r3, #3
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	3208      	adds	r2, #8
 8002d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	220f      	movs	r2, #15
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	43db      	mvns	r3, r3
 8002dae:	69ba      	ldr	r2, [r7, #24]
 8002db0:	4013      	ands	r3, r2
 8002db2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	691a      	ldr	r2, [r3, #16]
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	08da      	lsrs	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3208      	adds	r2, #8
 8002dd2:	69b9      	ldr	r1, [r7, #24]
 8002dd4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	2203      	movs	r2, #3
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43db      	mvns	r3, r3
 8002dea:	69ba      	ldr	r2, [r7, #24]
 8002dec:	4013      	ands	r3, r2
 8002dee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	f003 0203 	and.w	r2, r3, #3
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4313      	orrs	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 80a2 	beq.w	8002f5e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	4b57      	ldr	r3, [pc, #348]	; (8002f7c <HAL_GPIO_Init+0x2e8>)
 8002e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e22:	4a56      	ldr	r2, [pc, #344]	; (8002f7c <HAL_GPIO_Init+0x2e8>)
 8002e24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e28:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2a:	4b54      	ldr	r3, [pc, #336]	; (8002f7c <HAL_GPIO_Init+0x2e8>)
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e36:	4a52      	ldr	r2, [pc, #328]	; (8002f80 <HAL_GPIO_Init+0x2ec>)
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	089b      	lsrs	r3, r3, #2
 8002e3c:	3302      	adds	r3, #2
 8002e3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	220f      	movs	r2, #15
 8002e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e52:	43db      	mvns	r3, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4013      	ands	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a49      	ldr	r2, [pc, #292]	; (8002f84 <HAL_GPIO_Init+0x2f0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d019      	beq.n	8002e96 <HAL_GPIO_Init+0x202>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a48      	ldr	r2, [pc, #288]	; (8002f88 <HAL_GPIO_Init+0x2f4>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d013      	beq.n	8002e92 <HAL_GPIO_Init+0x1fe>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a47      	ldr	r2, [pc, #284]	; (8002f8c <HAL_GPIO_Init+0x2f8>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d00d      	beq.n	8002e8e <HAL_GPIO_Init+0x1fa>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a46      	ldr	r2, [pc, #280]	; (8002f90 <HAL_GPIO_Init+0x2fc>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d007      	beq.n	8002e8a <HAL_GPIO_Init+0x1f6>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a45      	ldr	r2, [pc, #276]	; (8002f94 <HAL_GPIO_Init+0x300>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d101      	bne.n	8002e86 <HAL_GPIO_Init+0x1f2>
 8002e82:	2304      	movs	r3, #4
 8002e84:	e008      	b.n	8002e98 <HAL_GPIO_Init+0x204>
 8002e86:	2307      	movs	r3, #7
 8002e88:	e006      	b.n	8002e98 <HAL_GPIO_Init+0x204>
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e004      	b.n	8002e98 <HAL_GPIO_Init+0x204>
 8002e8e:	2302      	movs	r3, #2
 8002e90:	e002      	b.n	8002e98 <HAL_GPIO_Init+0x204>
 8002e92:	2301      	movs	r3, #1
 8002e94:	e000      	b.n	8002e98 <HAL_GPIO_Init+0x204>
 8002e96:	2300      	movs	r3, #0
 8002e98:	69fa      	ldr	r2, [r7, #28]
 8002e9a:	f002 0203 	and.w	r2, r2, #3
 8002e9e:	0092      	lsls	r2, r2, #2
 8002ea0:	4093      	lsls	r3, r2
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ea8:	4935      	ldr	r1, [pc, #212]	; (8002f80 <HAL_GPIO_Init+0x2ec>)
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	089b      	lsrs	r3, r3, #2
 8002eae:	3302      	adds	r3, #2
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002eb6:	4b38      	ldr	r3, [pc, #224]	; (8002f98 <HAL_GPIO_Init+0x304>)
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	43db      	mvns	r3, r3
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	4013      	ands	r3, r2
 8002ec4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d003      	beq.n	8002eda <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	693b      	ldr	r3, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eda:	4a2f      	ldr	r2, [pc, #188]	; (8002f98 <HAL_GPIO_Init+0x304>)
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ee0:	4b2d      	ldr	r3, [pc, #180]	; (8002f98 <HAL_GPIO_Init+0x304>)
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d003      	beq.n	8002f04 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002efc:	69ba      	ldr	r2, [r7, #24]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4313      	orrs	r3, r2
 8002f02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f04:	4a24      	ldr	r2, [pc, #144]	; (8002f98 <HAL_GPIO_Init+0x304>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f0a:	4b23      	ldr	r3, [pc, #140]	; (8002f98 <HAL_GPIO_Init+0x304>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	43db      	mvns	r3, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	4013      	ands	r3, r2
 8002f18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f2e:	4a1a      	ldr	r2, [pc, #104]	; (8002f98 <HAL_GPIO_Init+0x304>)
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f34:	4b18      	ldr	r3, [pc, #96]	; (8002f98 <HAL_GPIO_Init+0x304>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	43db      	mvns	r3, r3
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	4013      	ands	r3, r2
 8002f42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d003      	beq.n	8002f58 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	693b      	ldr	r3, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f58:	4a0f      	ldr	r2, [pc, #60]	; (8002f98 <HAL_GPIO_Init+0x304>)
 8002f5a:	69bb      	ldr	r3, [r7, #24]
 8002f5c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	3301      	adds	r3, #1
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	2b0f      	cmp	r3, #15
 8002f68:	f67f aea2 	bls.w	8002cb0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f6c:	bf00      	nop
 8002f6e:	bf00      	nop
 8002f70:	3724      	adds	r7, #36	; 0x24
 8002f72:	46bd      	mov	sp, r7
 8002f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f78:	4770      	bx	lr
 8002f7a:	bf00      	nop
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40020000 	.word	0x40020000
 8002f88:	40020400 	.word	0x40020400
 8002f8c:	40020800 	.word	0x40020800
 8002f90:	40020c00 	.word	0x40020c00
 8002f94:	40021000 	.word	0x40021000
 8002f98:	40013c00 	.word	0x40013c00

08002f9c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b085      	sub	sp, #20
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	4013      	ands	r3, r2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d002      	beq.n	8002fba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	73fb      	strb	r3, [r7, #15]
 8002fb8:	e001      	b.n	8002fbe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr

08002fcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b083      	sub	sp, #12
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	807b      	strh	r3, [r7, #2]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fdc:	787b      	ldrb	r3, [r7, #1]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d003      	beq.n	8002fea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe2:	887a      	ldrh	r2, [r7, #2]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002fe8:	e003      	b.n	8002ff2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002fea:	887b      	ldrh	r3, [r7, #2]
 8002fec:	041a      	lsls	r2, r3, #16
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	619a      	str	r2, [r3, #24]
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b084      	sub	sp, #16
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e12b      	b.n	800326a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7ff f9d4 	bl	80023d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2224      	movs	r2, #36	; 0x24
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0201 	bic.w	r2, r2, #1
 8003042:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003052:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681a      	ldr	r2, [r3, #0]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003062:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003064:	f001 f89a 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8003068:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a81      	ldr	r2, [pc, #516]	; (8003274 <HAL_I2C_Init+0x274>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d807      	bhi.n	8003084 <HAL_I2C_Init+0x84>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	4a80      	ldr	r2, [pc, #512]	; (8003278 <HAL_I2C_Init+0x278>)
 8003078:	4293      	cmp	r3, r2
 800307a:	bf94      	ite	ls
 800307c:	2301      	movls	r3, #1
 800307e:	2300      	movhi	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	e006      	b.n	8003092 <HAL_I2C_Init+0x92>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4a7d      	ldr	r2, [pc, #500]	; (800327c <HAL_I2C_Init+0x27c>)
 8003088:	4293      	cmp	r3, r2
 800308a:	bf94      	ite	ls
 800308c:	2301      	movls	r3, #1
 800308e:	2300      	movhi	r3, #0
 8003090:	b2db      	uxtb	r3, r3
 8003092:	2b00      	cmp	r3, #0
 8003094:	d001      	beq.n	800309a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e0e7      	b.n	800326a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4a78      	ldr	r2, [pc, #480]	; (8003280 <HAL_I2C_Init+0x280>)
 800309e:	fba2 2303 	umull	r2, r3, r2, r3
 80030a2:	0c9b      	lsrs	r3, r3, #18
 80030a4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68ba      	ldr	r2, [r7, #8]
 80030b6:	430a      	orrs	r2, r1
 80030b8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	6a1b      	ldr	r3, [r3, #32]
 80030c0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	4a6a      	ldr	r2, [pc, #424]	; (8003274 <HAL_I2C_Init+0x274>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d802      	bhi.n	80030d4 <HAL_I2C_Init+0xd4>
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	3301      	adds	r3, #1
 80030d2:	e009      	b.n	80030e8 <HAL_I2C_Init+0xe8>
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	4a69      	ldr	r2, [pc, #420]	; (8003284 <HAL_I2C_Init+0x284>)
 80030e0:	fba2 2303 	umull	r2, r3, r2, r3
 80030e4:	099b      	lsrs	r3, r3, #6
 80030e6:	3301      	adds	r3, #1
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	6812      	ldr	r2, [r2, #0]
 80030ec:	430b      	orrs	r3, r1
 80030ee:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	69db      	ldr	r3, [r3, #28]
 80030f6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030fa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	495c      	ldr	r1, [pc, #368]	; (8003274 <HAL_I2C_Init+0x274>)
 8003104:	428b      	cmp	r3, r1
 8003106:	d819      	bhi.n	800313c <HAL_I2C_Init+0x13c>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	1e59      	subs	r1, r3, #1
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	fbb1 f3f3 	udiv	r3, r1, r3
 8003116:	1c59      	adds	r1, r3, #1
 8003118:	f640 73fc 	movw	r3, #4092	; 0xffc
 800311c:	400b      	ands	r3, r1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_I2C_Init+0x138>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1e59      	subs	r1, r3, #1
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003130:	3301      	adds	r3, #1
 8003132:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003136:	e051      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 8003138:	2304      	movs	r3, #4
 800313a:	e04f      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d111      	bne.n	8003168 <HAL_I2C_Init+0x168>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	440b      	add	r3, r1
 8003152:	fbb0 f3f3 	udiv	r3, r0, r3
 8003156:	3301      	adds	r3, #1
 8003158:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800315c:	2b00      	cmp	r3, #0
 800315e:	bf0c      	ite	eq
 8003160:	2301      	moveq	r3, #1
 8003162:	2300      	movne	r3, #0
 8003164:	b2db      	uxtb	r3, r3
 8003166:	e012      	b.n	800318e <HAL_I2C_Init+0x18e>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e58      	subs	r0, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6859      	ldr	r1, [r3, #4]
 8003170:	460b      	mov	r3, r1
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	0099      	lsls	r1, r3, #2
 8003178:	440b      	add	r3, r1
 800317a:	fbb0 f3f3 	udiv	r3, r0, r3
 800317e:	3301      	adds	r3, #1
 8003180:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003184:	2b00      	cmp	r3, #0
 8003186:	bf0c      	ite	eq
 8003188:	2301      	moveq	r3, #1
 800318a:	2300      	movne	r3, #0
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d001      	beq.n	8003196 <HAL_I2C_Init+0x196>
 8003192:	2301      	movs	r3, #1
 8003194:	e022      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10e      	bne.n	80031bc <HAL_I2C_Init+0x1bc>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	1e58      	subs	r0, r3, #1
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6859      	ldr	r1, [r3, #4]
 80031a6:	460b      	mov	r3, r1
 80031a8:	005b      	lsls	r3, r3, #1
 80031aa:	440b      	add	r3, r1
 80031ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031ba:	e00f      	b.n	80031dc <HAL_I2C_Init+0x1dc>
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	1e58      	subs	r0, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6859      	ldr	r1, [r3, #4]
 80031c4:	460b      	mov	r3, r1
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	0099      	lsls	r1, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d2:	3301      	adds	r3, #1
 80031d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031dc:	6879      	ldr	r1, [r7, #4]
 80031de:	6809      	ldr	r1, [r1, #0]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	69da      	ldr	r2, [r3, #28]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	6a1b      	ldr	r3, [r3, #32]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800320a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6911      	ldr	r1, [r2, #16]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	68d2      	ldr	r2, [r2, #12]
 8003216:	4311      	orrs	r1, r2
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	430b      	orrs	r3, r1
 800321e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	431a      	orrs	r2, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	430a      	orrs	r2, r1
 800323a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f042 0201 	orr.w	r2, r2, #1
 800324a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2200      	movs	r2, #0
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2220      	movs	r2, #32
 8003256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2200      	movs	r2, #0
 800325e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003268:	2300      	movs	r3, #0
}
 800326a:	4618      	mov	r0, r3
 800326c:	3710      	adds	r7, #16
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}
 8003272:	bf00      	nop
 8003274:	000186a0 	.word	0x000186a0
 8003278:	001e847f 	.word	0x001e847f
 800327c:	003d08ff 	.word	0x003d08ff
 8003280:	431bde83 	.word	0x431bde83
 8003284:	10624dd3 	.word	0x10624dd3

08003288 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b088      	sub	sp, #32
 800328c:	af02      	add	r7, sp, #8
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	607a      	str	r2, [r7, #4]
 8003292:	461a      	mov	r2, r3
 8003294:	460b      	mov	r3, r1
 8003296:	817b      	strh	r3, [r7, #10]
 8003298:	4613      	mov	r3, r2
 800329a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800329c:	f7ff fb26 	bl	80028ec <HAL_GetTick>
 80032a0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	2b20      	cmp	r3, #32
 80032ac:	f040 80e0 	bne.w	8003470 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80032b0:	697b      	ldr	r3, [r7, #20]
 80032b2:	9300      	str	r3, [sp, #0]
 80032b4:	2319      	movs	r3, #25
 80032b6:	2201      	movs	r2, #1
 80032b8:	4970      	ldr	r1, [pc, #448]	; (800347c <HAL_I2C_Master_Transmit+0x1f4>)
 80032ba:	68f8      	ldr	r0, [r7, #12]
 80032bc:	f000 f964 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032c6:	2302      	movs	r3, #2
 80032c8:	e0d3      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d101      	bne.n	80032d8 <HAL_I2C_Master_Transmit+0x50>
 80032d4:	2302      	movs	r3, #2
 80032d6:	e0cc      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d007      	beq.n	80032fe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0201 	orr.w	r2, r2, #1
 80032fc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2221      	movs	r2, #33	; 0x21
 8003312:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2210      	movs	r2, #16
 800331a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	687a      	ldr	r2, [r7, #4]
 8003328:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	893a      	ldrh	r2, [r7, #8]
 800332e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4a50      	ldr	r2, [pc, #320]	; (8003480 <HAL_I2C_Master_Transmit+0x1f8>)
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003340:	8979      	ldrh	r1, [r7, #10]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	6a3a      	ldr	r2, [r7, #32]
 8003346:	68f8      	ldr	r0, [r7, #12]
 8003348:	f000 f89c 	bl	8003484 <I2C_MasterRequestWrite>
 800334c:	4603      	mov	r3, r0
 800334e:	2b00      	cmp	r3, #0
 8003350:	d001      	beq.n	8003356 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e08d      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003356:	2300      	movs	r3, #0
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800336c:	e066      	b.n	800343c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800336e:	697a      	ldr	r2, [r7, #20]
 8003370:	6a39      	ldr	r1, [r7, #32]
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f000 fa22 	bl	80037bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00d      	beq.n	800339a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	2b04      	cmp	r3, #4
 8003384:	d107      	bne.n	8003396 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003394:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e06b      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339e:	781a      	ldrb	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	3b01      	subs	r3, #1
 80033b8:	b29a      	uxth	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b04      	cmp	r3, #4
 80033d6:	d11b      	bne.n	8003410 <HAL_I2C_Master_Transmit+0x188>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d017      	beq.n	8003410 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003408:	3b01      	subs	r3, #1
 800340a:	b29a      	uxth	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	6a39      	ldr	r1, [r7, #32]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fa19 	bl	800384c <I2C_WaitOnBTFFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00d      	beq.n	800343c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	2b04      	cmp	r3, #4
 8003426:	d107      	bne.n	8003438 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003436:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e01a      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d194      	bne.n	800336e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003452:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2220      	movs	r2, #32
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3718      	adds	r7, #24
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	00100002 	.word	0x00100002
 8003480:	ffff0000 	.word	0xffff0000

08003484 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b088      	sub	sp, #32
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	607a      	str	r2, [r7, #4]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	460b      	mov	r3, r1
 8003492:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003498:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800349a:	697b      	ldr	r3, [r7, #20]
 800349c:	2b08      	cmp	r3, #8
 800349e:	d006      	beq.n	80034ae <I2C_MasterRequestWrite+0x2a>
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d003      	beq.n	80034ae <I2C_MasterRequestWrite+0x2a>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034ac:	d108      	bne.n	80034c0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034bc:	601a      	str	r2, [r3, #0]
 80034be:	e00b      	b.n	80034d8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034c4:	2b12      	cmp	r3, #18
 80034c6:	d107      	bne.n	80034d8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	681a      	ldr	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f84f 	bl	8003588 <I2C_WaitOnFlagUntilTimeout>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00d      	beq.n	800350c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80034fe:	d103      	bne.n	8003508 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e035      	b.n	8003578 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	691b      	ldr	r3, [r3, #16]
 8003510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003514:	d108      	bne.n	8003528 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	b2db      	uxtb	r3, r3
 800351a:	461a      	mov	r2, r3
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003524:	611a      	str	r2, [r3, #16]
 8003526:	e01b      	b.n	8003560 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003528:	897b      	ldrh	r3, [r7, #10]
 800352a:	11db      	asrs	r3, r3, #7
 800352c:	b2db      	uxtb	r3, r3
 800352e:	f003 0306 	and.w	r3, r3, #6
 8003532:	b2db      	uxtb	r3, r3
 8003534:	f063 030f 	orn	r3, r3, #15
 8003538:	b2da      	uxtb	r2, r3
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	490e      	ldr	r1, [pc, #56]	; (8003580 <I2C_MasterRequestWrite+0xfc>)
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f000 f898 	bl	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d001      	beq.n	8003556 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003552:	2301      	movs	r3, #1
 8003554:	e010      	b.n	8003578 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003556:	897b      	ldrh	r3, [r7, #10]
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4907      	ldr	r1, [pc, #28]	; (8003584 <I2C_MasterRequestWrite+0x100>)
 8003566:	68f8      	ldr	r0, [r7, #12]
 8003568:	f000 f888 	bl	800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800356c:	4603      	mov	r3, r0
 800356e:	2b00      	cmp	r3, #0
 8003570:	d001      	beq.n	8003576 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003572:	2301      	movs	r3, #1
 8003574:	e000      	b.n	8003578 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	00010008 	.word	0x00010008
 8003584:	00010002 	.word	0x00010002

08003588 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	603b      	str	r3, [r7, #0]
 8003594:	4613      	mov	r3, r2
 8003596:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003598:	e048      	b.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a0:	d044      	beq.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035a2:	f7ff f9a3 	bl	80028ec <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	69bb      	ldr	r3, [r7, #24]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d302      	bcc.n	80035b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d139      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	2b01      	cmp	r3, #1
 80035c0:	d10d      	bne.n	80035de <I2C_WaitOnFlagUntilTimeout+0x56>
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	43da      	mvns	r2, r3
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	4013      	ands	r3, r2
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	bf0c      	ite	eq
 80035d4:	2301      	moveq	r3, #1
 80035d6:	2300      	movne	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	461a      	mov	r2, r3
 80035dc:	e00c      	b.n	80035f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	43da      	mvns	r2, r3
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	4013      	ands	r3, r2
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	bf0c      	ite	eq
 80035f0:	2301      	moveq	r3, #1
 80035f2:	2300      	movne	r3, #0
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	461a      	mov	r2, r3
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d116      	bne.n	800362c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	2220      	movs	r2, #32
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003618:	f043 0220 	orr.w	r2, r3, #32
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2200      	movs	r2, #0
 8003624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e023      	b.n	8003674 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	0c1b      	lsrs	r3, r3, #16
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b01      	cmp	r3, #1
 8003634:	d10d      	bne.n	8003652 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	695b      	ldr	r3, [r3, #20]
 800363c:	43da      	mvns	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	4013      	ands	r3, r2
 8003642:	b29b      	uxth	r3, r3
 8003644:	2b00      	cmp	r3, #0
 8003646:	bf0c      	ite	eq
 8003648:	2301      	moveq	r3, #1
 800364a:	2300      	movne	r3, #0
 800364c:	b2db      	uxtb	r3, r3
 800364e:	461a      	mov	r2, r3
 8003650:	e00c      	b.n	800366c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	43da      	mvns	r2, r3
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4013      	ands	r3, r2
 800365e:	b29b      	uxth	r3, r3
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	461a      	mov	r2, r3
 800366c:	79fb      	ldrb	r3, [r7, #7]
 800366e:	429a      	cmp	r2, r3
 8003670:	d093      	beq.n	800359a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003672:	2300      	movs	r3, #0
}
 8003674:	4618      	mov	r0, r3
 8003676:	3710      	adds	r7, #16
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800368a:	e071      	b.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003696:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800369a:	d123      	bne.n	80036e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2220      	movs	r2, #32
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d0:	f043 0204 	orr.w	r2, r3, #4
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e067      	b.n	80037b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d041      	beq.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ec:	f7ff f8fe 	bl	80028ec <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d302      	bcc.n	8003702 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d136      	bne.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	d10c      	bne.n	8003726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	43da      	mvns	r2, r3
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4013      	ands	r3, r2
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	bf14      	ite	ne
 800371e:	2301      	movne	r3, #1
 8003720:	2300      	moveq	r3, #0
 8003722:	b2db      	uxtb	r3, r3
 8003724:	e00b      	b.n	800373e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	43da      	mvns	r2, r3
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	4013      	ands	r3, r2
 8003732:	b29b      	uxth	r3, r3
 8003734:	2b00      	cmp	r3, #0
 8003736:	bf14      	ite	ne
 8003738:	2301      	movne	r3, #1
 800373a:	2300      	moveq	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d016      	beq.n	8003770 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2200      	movs	r2, #0
 8003746:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	2220      	movs	r2, #32
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	f043 0220 	orr.w	r2, r3, #32
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	e021      	b.n	80037b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	0c1b      	lsrs	r3, r3, #16
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b01      	cmp	r3, #1
 8003778:	d10c      	bne.n	8003794 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	43da      	mvns	r2, r3
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4013      	ands	r3, r2
 8003786:	b29b      	uxth	r3, r3
 8003788:	2b00      	cmp	r3, #0
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
 8003792:	e00b      	b.n	80037ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf14      	ite	ne
 80037a6:	2301      	movne	r3, #1
 80037a8:	2300      	moveq	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	f47f af6d 	bne.w	800368c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3710      	adds	r7, #16
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80037c8:	e034      	b.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80037ca:	68f8      	ldr	r0, [r7, #12]
 80037cc:	f000 f886 	bl	80038dc <I2C_IsAcknowledgeFailed>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e034      	b.n	8003844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037da:	68bb      	ldr	r3, [r7, #8]
 80037dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037e0:	d028      	beq.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037e2:	f7ff f883 	bl	80028ec <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	68ba      	ldr	r2, [r7, #8]
 80037ee:	429a      	cmp	r2, r3
 80037f0:	d302      	bcc.n	80037f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d11d      	bne.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	695b      	ldr	r3, [r3, #20]
 80037fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003802:	2b80      	cmp	r3, #128	; 0x80
 8003804:	d016      	beq.n	8003834 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2220      	movs	r2, #32
 8003810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	f043 0220 	orr.w	r2, r3, #32
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e007      	b.n	8003844 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800383e:	2b80      	cmp	r3, #128	; 0x80
 8003840:	d1c3      	bne.n	80037ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003858:	e034      	b.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 f83e 	bl	80038dc <I2C_IsAcknowledgeFailed>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d001      	beq.n	800386a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e034      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003870:	d028      	beq.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003872:	f7ff f83b 	bl	80028ec <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	429a      	cmp	r2, r3
 8003880:	d302      	bcc.n	8003888 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d11d      	bne.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	f003 0304 	and.w	r3, r3, #4
 8003892:	2b04      	cmp	r3, #4
 8003894:	d016      	beq.n	80038c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2200      	movs	r2, #0
 800389a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2220      	movs	r2, #32
 80038a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2200      	movs	r2, #0
 80038a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	f043 0220 	orr.w	r2, r3, #32
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e007      	b.n	80038d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f003 0304 	and.w	r3, r3, #4
 80038ce:	2b04      	cmp	r3, #4
 80038d0:	d1c3      	bne.n	800385a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80038d2:	2300      	movs	r3, #0
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038f2:	d11b      	bne.n	800392c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038fc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2220      	movs	r2, #32
 8003908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003918:	f043 0204 	orr.w	r2, r3, #4
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e000      	b.n	800392e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	370c      	adds	r7, #12
 8003932:	46bd      	mov	sp, r7
 8003934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003938:	4770      	bx	lr
	...

0800393c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	e267      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d075      	beq.n	8003a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800395a:	4b88      	ldr	r3, [pc, #544]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b04      	cmp	r3, #4
 8003964:	d00c      	beq.n	8003980 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003966:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800396e:	2b08      	cmp	r3, #8
 8003970:	d112      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003972:	4b82      	ldr	r3, [pc, #520]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800397a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800397e:	d10b      	bne.n	8003998 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003980:	4b7e      	ldr	r3, [pc, #504]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d05b      	beq.n	8003a44 <HAL_RCC_OscConfig+0x108>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d157      	bne.n	8003a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	e242      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039a0:	d106      	bne.n	80039b0 <HAL_RCC_OscConfig+0x74>
 80039a2:	4b76      	ldr	r3, [pc, #472]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a75      	ldr	r2, [pc, #468]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]
 80039ae:	e01d      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039b8:	d10c      	bne.n	80039d4 <HAL_RCC_OscConfig+0x98>
 80039ba:	4b70      	ldr	r3, [pc, #448]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a6f      	ldr	r2, [pc, #444]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039c4:	6013      	str	r3, [r2, #0]
 80039c6:	4b6d      	ldr	r3, [pc, #436]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4a6c      	ldr	r2, [pc, #432]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e00b      	b.n	80039ec <HAL_RCC_OscConfig+0xb0>
 80039d4:	4b69      	ldr	r3, [pc, #420]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a68      	ldr	r2, [pc, #416]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039de:	6013      	str	r3, [r2, #0]
 80039e0:	4b66      	ldr	r3, [pc, #408]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	4a65      	ldr	r2, [pc, #404]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 80039e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80039ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f4:	f7fe ff7a 	bl	80028ec <HAL_GetTick>
 80039f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039fa:	e008      	b.n	8003a0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80039fc:	f7fe ff76 	bl	80028ec <HAL_GetTick>
 8003a00:	4602      	mov	r2, r0
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	1ad3      	subs	r3, r2, r3
 8003a06:	2b64      	cmp	r3, #100	; 0x64
 8003a08:	d901      	bls.n	8003a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e207      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a0e:	4b5b      	ldr	r3, [pc, #364]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d0f0      	beq.n	80039fc <HAL_RCC_OscConfig+0xc0>
 8003a1a:	e014      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe ff66 	bl	80028ec <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a24:	f7fe ff62 	bl	80028ec <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b64      	cmp	r3, #100	; 0x64
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e1f3      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003a36:	4b51      	ldr	r3, [pc, #324]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0xe8>
 8003a42:	e000      	b.n	8003a46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0302 	and.w	r3, r3, #2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d063      	beq.n	8003b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a52:	4b4a      	ldr	r3, [pc, #296]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f003 030c 	and.w	r3, r3, #12
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d00b      	beq.n	8003a76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a5e:	4b47      	ldr	r3, [pc, #284]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003a66:	2b08      	cmp	r3, #8
 8003a68:	d11c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003a6a:	4b44      	ldr	r3, [pc, #272]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d116      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003a76:	4b41      	ldr	r3, [pc, #260]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0302 	and.w	r3, r3, #2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d005      	beq.n	8003a8e <HAL_RCC_OscConfig+0x152>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d001      	beq.n	8003a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e1c7      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a8e:	4b3b      	ldr	r3, [pc, #236]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	691b      	ldr	r3, [r3, #16]
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	4937      	ldr	r1, [pc, #220]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003aa2:	e03a      	b.n	8003b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d020      	beq.n	8003aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003aac:	4b34      	ldr	r3, [pc, #208]	; (8003b80 <HAL_RCC_OscConfig+0x244>)
 8003aae:	2201      	movs	r2, #1
 8003ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ab2:	f7fe ff1b 	bl	80028ec <HAL_GetTick>
 8003ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ab8:	e008      	b.n	8003acc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003aba:	f7fe ff17 	bl	80028ec <HAL_GetTick>
 8003abe:	4602      	mov	r2, r0
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b02      	cmp	r3, #2
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e1a8      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003acc:	4b2b      	ldr	r3, [pc, #172]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0f0      	beq.n	8003aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ad8:	4b28      	ldr	r3, [pc, #160]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	00db      	lsls	r3, r3, #3
 8003ae6:	4925      	ldr	r1, [pc, #148]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	600b      	str	r3, [r1, #0]
 8003aec:	e015      	b.n	8003b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aee:	4b24      	ldr	r3, [pc, #144]	; (8003b80 <HAL_RCC_OscConfig+0x244>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af4:	f7fe fefa 	bl	80028ec <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003afa:	e008      	b.n	8003b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003afc:	f7fe fef6 	bl	80028ec <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	2b02      	cmp	r3, #2
 8003b08:	d901      	bls.n	8003b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e187      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b0e:	4b1b      	ldr	r3, [pc, #108]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d1f0      	bne.n	8003afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0308 	and.w	r3, r3, #8
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d036      	beq.n	8003b94 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d016      	beq.n	8003b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b2e:	4b15      	ldr	r3, [pc, #84]	; (8003b84 <HAL_RCC_OscConfig+0x248>)
 8003b30:	2201      	movs	r2, #1
 8003b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b34:	f7fe feda 	bl	80028ec <HAL_GetTick>
 8003b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b3a:	e008      	b.n	8003b4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b3c:	f7fe fed6 	bl	80028ec <HAL_GetTick>
 8003b40:	4602      	mov	r2, r0
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	1ad3      	subs	r3, r2, r3
 8003b46:	2b02      	cmp	r3, #2
 8003b48:	d901      	bls.n	8003b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e167      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003b4e:	4b0b      	ldr	r3, [pc, #44]	; (8003b7c <HAL_RCC_OscConfig+0x240>)
 8003b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d0f0      	beq.n	8003b3c <HAL_RCC_OscConfig+0x200>
 8003b5a:	e01b      	b.n	8003b94 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003b5c:	4b09      	ldr	r3, [pc, #36]	; (8003b84 <HAL_RCC_OscConfig+0x248>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b62:	f7fe fec3 	bl	80028ec <HAL_GetTick>
 8003b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b68:	e00e      	b.n	8003b88 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003b6a:	f7fe febf 	bl	80028ec <HAL_GetTick>
 8003b6e:	4602      	mov	r2, r0
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	1ad3      	subs	r3, r2, r3
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d907      	bls.n	8003b88 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e150      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
 8003b7c:	40023800 	.word	0x40023800
 8003b80:	42470000 	.word	0x42470000
 8003b84:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003b88:	4b88      	ldr	r3, [pc, #544]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8c:	f003 0302 	and.w	r3, r3, #2
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1ea      	bne.n	8003b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0304 	and.w	r3, r3, #4
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8097 	beq.w	8003cd0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ba6:	4b81      	ldr	r3, [pc, #516]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10f      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60bb      	str	r3, [r7, #8]
 8003bb6:	4b7d      	ldr	r3, [pc, #500]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	4a7c      	ldr	r2, [pc, #496]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003bc2:	4b7a      	ldr	r3, [pc, #488]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bd2:	4b77      	ldr	r3, [pc, #476]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d118      	bne.n	8003c10 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003bde:	4b74      	ldr	r3, [pc, #464]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4a73      	ldr	r2, [pc, #460]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003be8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003bea:	f7fe fe7f 	bl	80028ec <HAL_GetTick>
 8003bee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003bf0:	e008      	b.n	8003c04 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bf2:	f7fe fe7b 	bl	80028ec <HAL_GetTick>
 8003bf6:	4602      	mov	r2, r0
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	1ad3      	subs	r3, r2, r3
 8003bfc:	2b02      	cmp	r3, #2
 8003bfe:	d901      	bls.n	8003c04 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c00:	2303      	movs	r3, #3
 8003c02:	e10c      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c04:	4b6a      	ldr	r3, [pc, #424]	; (8003db0 <HAL_RCC_OscConfig+0x474>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d0f0      	beq.n	8003bf2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d106      	bne.n	8003c26 <HAL_RCC_OscConfig+0x2ea>
 8003c18:	4b64      	ldr	r3, [pc, #400]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c1c:	4a63      	ldr	r2, [pc, #396]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c1e:	f043 0301 	orr.w	r3, r3, #1
 8003c22:	6713      	str	r3, [r2, #112]	; 0x70
 8003c24:	e01c      	b.n	8003c60 <HAL_RCC_OscConfig+0x324>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	2b05      	cmp	r3, #5
 8003c2c:	d10c      	bne.n	8003c48 <HAL_RCC_OscConfig+0x30c>
 8003c2e:	4b5f      	ldr	r3, [pc, #380]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c32:	4a5e      	ldr	r2, [pc, #376]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c34:	f043 0304 	orr.w	r3, r3, #4
 8003c38:	6713      	str	r3, [r2, #112]	; 0x70
 8003c3a:	4b5c      	ldr	r3, [pc, #368]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c3e:	4a5b      	ldr	r2, [pc, #364]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	6713      	str	r3, [r2, #112]	; 0x70
 8003c46:	e00b      	b.n	8003c60 <HAL_RCC_OscConfig+0x324>
 8003c48:	4b58      	ldr	r3, [pc, #352]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c4c:	4a57      	ldr	r2, [pc, #348]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c4e:	f023 0301 	bic.w	r3, r3, #1
 8003c52:	6713      	str	r3, [r2, #112]	; 0x70
 8003c54:	4b55      	ldr	r3, [pc, #340]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c58:	4a54      	ldr	r2, [pc, #336]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c5a:	f023 0304 	bic.w	r3, r3, #4
 8003c5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d015      	beq.n	8003c94 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fe fe40 	bl	80028ec <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c6e:	e00a      	b.n	8003c86 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c70:	f7fe fe3c 	bl	80028ec <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e0cb      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c86:	4b49      	ldr	r3, [pc, #292]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003c88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8a:	f003 0302 	and.w	r3, r3, #2
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0ee      	beq.n	8003c70 <HAL_RCC_OscConfig+0x334>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c94:	f7fe fe2a 	bl	80028ec <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c9a:	e00a      	b.n	8003cb2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c9c:	f7fe fe26 	bl	80028ec <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d901      	bls.n	8003cb2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0b5      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cb2:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1ee      	bne.n	8003c9c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cbe:	7dfb      	ldrb	r3, [r7, #23]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d105      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc4:	4b39      	ldr	r3, [pc, #228]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc8:	4a38      	ldr	r2, [pc, #224]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003cce:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	f000 80a1 	beq.w	8003e1c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003cda:	4b34      	ldr	r3, [pc, #208]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f003 030c 	and.w	r3, r3, #12
 8003ce2:	2b08      	cmp	r3, #8
 8003ce4:	d05c      	beq.n	8003da0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d141      	bne.n	8003d72 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cee:	4b31      	ldr	r3, [pc, #196]	; (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf4:	f7fe fdfa 	bl	80028ec <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cfc:	f7fe fdf6 	bl	80028ec <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e087      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d0e:	4b27      	ldr	r3, [pc, #156]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69da      	ldr	r2, [r3, #28]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	431a      	orrs	r2, r3
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d28:	019b      	lsls	r3, r3, #6
 8003d2a:	431a      	orrs	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d30:	085b      	lsrs	r3, r3, #1
 8003d32:	3b01      	subs	r3, #1
 8003d34:	041b      	lsls	r3, r3, #16
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	491b      	ldr	r1, [pc, #108]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d44:	4b1b      	ldr	r3, [pc, #108]	; (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d4a:	f7fe fdcf 	bl	80028ec <HAL_GetTick>
 8003d4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d52:	f7fe fdcb 	bl	80028ec <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e05c      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d64:	4b11      	ldr	r3, [pc, #68]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x416>
 8003d70:	e054      	b.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d72:	4b10      	ldr	r3, [pc, #64]	; (8003db4 <HAL_RCC_OscConfig+0x478>)
 8003d74:	2200      	movs	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d78:	f7fe fdb8 	bl	80028ec <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d80:	f7fe fdb4 	bl	80028ec <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e045      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCC_OscConfig+0x470>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1f0      	bne.n	8003d80 <HAL_RCC_OscConfig+0x444>
 8003d9e:	e03d      	b.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d107      	bne.n	8003db8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e038      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
 8003dac:	40023800 	.word	0x40023800
 8003db0:	40007000 	.word	0x40007000
 8003db4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <HAL_RCC_OscConfig+0x4ec>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	2b01      	cmp	r3, #1
 8003dc4:	d028      	beq.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d121      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d11a      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003de8:	4013      	ands	r3, r2
 8003dea:	687a      	ldr	r2, [r7, #4]
 8003dec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003dee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d111      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfe:	085b      	lsrs	r3, r3, #1
 8003e00:	3b01      	subs	r3, #1
 8003e02:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d107      	bne.n	8003e18 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e12:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e14:	429a      	cmp	r2, r3
 8003e16:	d001      	beq.n	8003e1c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e000      	b.n	8003e1e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003e1c:	2300      	movs	r3, #0
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3718      	adds	r7, #24
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	40023800 	.word	0x40023800

08003e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d101      	bne.n	8003e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	e0cc      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e40:	4b68      	ldr	r3, [pc, #416]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d90c      	bls.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e4e:	4b65      	ldr	r3, [pc, #404]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	b2d2      	uxtb	r2, r2
 8003e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e56:	4b63      	ldr	r3, [pc, #396]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0307 	and.w	r3, r3, #7
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d001      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e0b8      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0302 	and.w	r3, r3, #2
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d020      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f003 0304 	and.w	r3, r3, #4
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d005      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e80:	4b59      	ldr	r3, [pc, #356]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e82:	689b      	ldr	r3, [r3, #8]
 8003e84:	4a58      	ldr	r2, [pc, #352]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d005      	beq.n	8003ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003e98:	4b53      	ldr	r3, [pc, #332]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	4a52      	ldr	r2, [pc, #328]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea4:	4b50      	ldr	r3, [pc, #320]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	494d      	ldr	r1, [pc, #308]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d044      	beq.n	8003f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	685b      	ldr	r3, [r3, #4]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d107      	bne.n	8003eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eca:	4b47      	ldr	r3, [pc, #284]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d119      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e07f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d003      	beq.n	8003eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d107      	bne.n	8003efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eea:	4b3f      	ldr	r3, [pc, #252]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d109      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e06f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003efa:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d101      	bne.n	8003f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e067      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003f0a:	4b37      	ldr	r3, [pc, #220]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	f023 0203 	bic.w	r2, r3, #3
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	4934      	ldr	r1, [pc, #208]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f18:	4313      	orrs	r3, r2
 8003f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003f1c:	f7fe fce6 	bl	80028ec <HAL_GetTick>
 8003f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f24:	f7fe fce2 	bl	80028ec <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e04f      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003f3a:	4b2b      	ldr	r3, [pc, #172]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 020c 	and.w	r2, r3, #12
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	009b      	lsls	r3, r3, #2
 8003f48:	429a      	cmp	r2, r3
 8003f4a:	d1eb      	bne.n	8003f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	683a      	ldr	r2, [r7, #0]
 8003f56:	429a      	cmp	r2, r3
 8003f58:	d20c      	bcs.n	8003f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f5a:	4b22      	ldr	r3, [pc, #136]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	b2d2      	uxtb	r2, r2
 8003f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f62:	4b20      	ldr	r3, [pc, #128]	; (8003fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0307 	and.w	r3, r3, #7
 8003f6a:	683a      	ldr	r2, [r7, #0]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d001      	beq.n	8003f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e032      	b.n	8003fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d008      	beq.n	8003f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f80:	4b19      	ldr	r3, [pc, #100]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	4916      	ldr	r1, [pc, #88]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d009      	beq.n	8003fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f9e:	4b12      	ldr	r3, [pc, #72]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	00db      	lsls	r3, r3, #3
 8003fac:	490e      	ldr	r1, [pc, #56]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003fb2:	f000 f821 	bl	8003ff8 <HAL_RCC_GetSysClockFreq>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	; (8003fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	490a      	ldr	r1, [pc, #40]	; (8003fec <HAL_RCC_ClockConfig+0x1c0>)
 8003fc4:	5ccb      	ldrb	r3, [r1, r3]
 8003fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8003fca:	4a09      	ldr	r2, [pc, #36]	; (8003ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8003fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003fce:	4b09      	ldr	r3, [pc, #36]	; (8003ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7fe fc46 	bl	8002864 <HAL_InitTick>

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3710      	adds	r7, #16
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bd80      	pop	{r7, pc}
 8003fe2:	bf00      	nop
 8003fe4:	40023c00 	.word	0x40023c00
 8003fe8:	40023800 	.word	0x40023800
 8003fec:	08008d80 	.word	0x08008d80
 8003ff0:	20000004 	.word	0x20000004
 8003ff4:	20000008 	.word	0x20000008

08003ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ff8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ffc:	b090      	sub	sp, #64	; 0x40
 8003ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004000:	2300      	movs	r3, #0
 8004002:	637b      	str	r3, [r7, #52]	; 0x34
 8004004:	2300      	movs	r3, #0
 8004006:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004008:	2300      	movs	r3, #0
 800400a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800400c:	2300      	movs	r3, #0
 800400e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004010:	4b59      	ldr	r3, [pc, #356]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f003 030c 	and.w	r3, r3, #12
 8004018:	2b08      	cmp	r3, #8
 800401a:	d00d      	beq.n	8004038 <HAL_RCC_GetSysClockFreq+0x40>
 800401c:	2b08      	cmp	r3, #8
 800401e:	f200 80a1 	bhi.w	8004164 <HAL_RCC_GetSysClockFreq+0x16c>
 8004022:	2b00      	cmp	r3, #0
 8004024:	d002      	beq.n	800402c <HAL_RCC_GetSysClockFreq+0x34>
 8004026:	2b04      	cmp	r3, #4
 8004028:	d003      	beq.n	8004032 <HAL_RCC_GetSysClockFreq+0x3a>
 800402a:	e09b      	b.n	8004164 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800402c:	4b53      	ldr	r3, [pc, #332]	; (800417c <HAL_RCC_GetSysClockFreq+0x184>)
 800402e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004030:	e09b      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004032:	4b53      	ldr	r3, [pc, #332]	; (8004180 <HAL_RCC_GetSysClockFreq+0x188>)
 8004034:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004036:	e098      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004038:	4b4f      	ldr	r3, [pc, #316]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004040:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004042:	4b4d      	ldr	r3, [pc, #308]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d028      	beq.n	80040a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800404e:	4b4a      	ldr	r3, [pc, #296]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	099b      	lsrs	r3, r3, #6
 8004054:	2200      	movs	r2, #0
 8004056:	623b      	str	r3, [r7, #32]
 8004058:	627a      	str	r2, [r7, #36]	; 0x24
 800405a:	6a3b      	ldr	r3, [r7, #32]
 800405c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004060:	2100      	movs	r1, #0
 8004062:	4b47      	ldr	r3, [pc, #284]	; (8004180 <HAL_RCC_GetSysClockFreq+0x188>)
 8004064:	fb03 f201 	mul.w	r2, r3, r1
 8004068:	2300      	movs	r3, #0
 800406a:	fb00 f303 	mul.w	r3, r0, r3
 800406e:	4413      	add	r3, r2
 8004070:	4a43      	ldr	r2, [pc, #268]	; (8004180 <HAL_RCC_GetSysClockFreq+0x188>)
 8004072:	fba0 1202 	umull	r1, r2, r0, r2
 8004076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004078:	460a      	mov	r2, r1
 800407a:	62ba      	str	r2, [r7, #40]	; 0x28
 800407c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800407e:	4413      	add	r3, r2
 8004080:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004084:	2200      	movs	r2, #0
 8004086:	61bb      	str	r3, [r7, #24]
 8004088:	61fa      	str	r2, [r7, #28]
 800408a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800408e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004092:	f7fc fdf1 	bl	8000c78 <__aeabi_uldivmod>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4613      	mov	r3, r2
 800409c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800409e:	e053      	b.n	8004148 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040a0:	4b35      	ldr	r3, [pc, #212]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	099b      	lsrs	r3, r3, #6
 80040a6:	2200      	movs	r2, #0
 80040a8:	613b      	str	r3, [r7, #16]
 80040aa:	617a      	str	r2, [r7, #20]
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80040b2:	f04f 0b00 	mov.w	fp, #0
 80040b6:	4652      	mov	r2, sl
 80040b8:	465b      	mov	r3, fp
 80040ba:	f04f 0000 	mov.w	r0, #0
 80040be:	f04f 0100 	mov.w	r1, #0
 80040c2:	0159      	lsls	r1, r3, #5
 80040c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c8:	0150      	lsls	r0, r2, #5
 80040ca:	4602      	mov	r2, r0
 80040cc:	460b      	mov	r3, r1
 80040ce:	ebb2 080a 	subs.w	r8, r2, sl
 80040d2:	eb63 090b 	sbc.w	r9, r3, fp
 80040d6:	f04f 0200 	mov.w	r2, #0
 80040da:	f04f 0300 	mov.w	r3, #0
 80040de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80040e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80040e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80040ea:	ebb2 0408 	subs.w	r4, r2, r8
 80040ee:	eb63 0509 	sbc.w	r5, r3, r9
 80040f2:	f04f 0200 	mov.w	r2, #0
 80040f6:	f04f 0300 	mov.w	r3, #0
 80040fa:	00eb      	lsls	r3, r5, #3
 80040fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004100:	00e2      	lsls	r2, r4, #3
 8004102:	4614      	mov	r4, r2
 8004104:	461d      	mov	r5, r3
 8004106:	eb14 030a 	adds.w	r3, r4, sl
 800410a:	603b      	str	r3, [r7, #0]
 800410c:	eb45 030b 	adc.w	r3, r5, fp
 8004110:	607b      	str	r3, [r7, #4]
 8004112:	f04f 0200 	mov.w	r2, #0
 8004116:	f04f 0300 	mov.w	r3, #0
 800411a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800411e:	4629      	mov	r1, r5
 8004120:	028b      	lsls	r3, r1, #10
 8004122:	4621      	mov	r1, r4
 8004124:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004128:	4621      	mov	r1, r4
 800412a:	028a      	lsls	r2, r1, #10
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004132:	2200      	movs	r2, #0
 8004134:	60bb      	str	r3, [r7, #8]
 8004136:	60fa      	str	r2, [r7, #12]
 8004138:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800413c:	f7fc fd9c 	bl	8000c78 <__aeabi_uldivmod>
 8004140:	4602      	mov	r2, r0
 8004142:	460b      	mov	r3, r1
 8004144:	4613      	mov	r3, r2
 8004146:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004148:	4b0b      	ldr	r3, [pc, #44]	; (8004178 <HAL_RCC_GetSysClockFreq+0x180>)
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	0c1b      	lsrs	r3, r3, #16
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	3301      	adds	r3, #1
 8004154:	005b      	lsls	r3, r3, #1
 8004156:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004158:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800415a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004162:	e002      	b.n	800416a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <HAL_RCC_GetSysClockFreq+0x184>)
 8004166:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004168:	bf00      	nop
    }
  }
  return sysclockfreq;
 800416a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800416c:	4618      	mov	r0, r3
 800416e:	3740      	adds	r7, #64	; 0x40
 8004170:	46bd      	mov	sp, r7
 8004172:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004176:	bf00      	nop
 8004178:	40023800 	.word	0x40023800
 800417c:	00f42400 	.word	0x00f42400
 8004180:	017d7840 	.word	0x017d7840

08004184 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004188:	4b03      	ldr	r3, [pc, #12]	; (8004198 <HAL_RCC_GetHCLKFreq+0x14>)
 800418a:	681b      	ldr	r3, [r3, #0]
}
 800418c:	4618      	mov	r0, r3
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	20000004 	.word	0x20000004

0800419c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80041a0:	f7ff fff0 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041a4:	4602      	mov	r2, r0
 80041a6:	4b05      	ldr	r3, [pc, #20]	; (80041bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	0a9b      	lsrs	r3, r3, #10
 80041ac:	f003 0307 	and.w	r3, r3, #7
 80041b0:	4903      	ldr	r1, [pc, #12]	; (80041c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80041b2:	5ccb      	ldrb	r3, [r1, r3]
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40023800 	.word	0x40023800
 80041c0:	08008d90 	.word	0x08008d90

080041c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80041c8:	f7ff ffdc 	bl	8004184 <HAL_RCC_GetHCLKFreq>
 80041cc:	4602      	mov	r2, r0
 80041ce:	4b05      	ldr	r3, [pc, #20]	; (80041e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	0b5b      	lsrs	r3, r3, #13
 80041d4:	f003 0307 	and.w	r3, r3, #7
 80041d8:	4903      	ldr	r1, [pc, #12]	; (80041e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80041da:	5ccb      	ldrb	r3, [r1, r3]
 80041dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	40023800 	.word	0x40023800
 80041e8:	08008d90 	.word	0x08008d90

080041ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e041      	b.n	8004282 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004204:	b2db      	uxtb	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d106      	bne.n	8004218 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f7fe f936 	bl	8002484 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2202      	movs	r2, #2
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681a      	ldr	r2, [r3, #0]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	3304      	adds	r3, #4
 8004228:	4619      	mov	r1, r3
 800422a:	4610      	mov	r0, r2
 800422c:	f000 faca 	bl	80047c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2201      	movs	r2, #1
 8004234:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2201      	movs	r2, #1
 800423c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004280:	2300      	movs	r3, #0
}
 8004282:	4618      	mov	r0, r3
 8004284:	3708      	adds	r7, #8
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d001      	beq.n	80042a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	e03c      	b.n	800431e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a1e      	ldr	r2, [pc, #120]	; (800432c <HAL_TIM_Base_Start+0xa0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d018      	beq.n	80042e8 <HAL_TIM_Base_Start+0x5c>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042be:	d013      	beq.n	80042e8 <HAL_TIM_Base_Start+0x5c>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a1a      	ldr	r2, [pc, #104]	; (8004330 <HAL_TIM_Base_Start+0xa4>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d00e      	beq.n	80042e8 <HAL_TIM_Base_Start+0x5c>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a19      	ldr	r2, [pc, #100]	; (8004334 <HAL_TIM_Base_Start+0xa8>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d009      	beq.n	80042e8 <HAL_TIM_Base_Start+0x5c>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a17      	ldr	r2, [pc, #92]	; (8004338 <HAL_TIM_Base_Start+0xac>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d004      	beq.n	80042e8 <HAL_TIM_Base_Start+0x5c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a16      	ldr	r2, [pc, #88]	; (800433c <HAL_TIM_Base_Start+0xb0>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d111      	bne.n	800430c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2b06      	cmp	r3, #6
 80042f8:	d010      	beq.n	800431c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800430a:	e007      	b.n	800431c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800431c:	2300      	movs	r3, #0
}
 800431e:	4618      	mov	r0, r3
 8004320:	3714      	adds	r7, #20
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	40010000 	.word	0x40010000
 8004330:	40000400 	.word	0x40000400
 8004334:	40000800 	.word	0x40000800
 8004338:	40000c00 	.word	0x40000c00
 800433c:	40014000 	.word	0x40014000

08004340 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004340:	b480      	push	{r7}
 8004342:	b085      	sub	sp, #20
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800434e:	b2db      	uxtb	r3, r3
 8004350:	2b01      	cmp	r3, #1
 8004352:	d001      	beq.n	8004358 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004354:	2301      	movs	r3, #1
 8004356:	e044      	b.n	80043e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68da      	ldr	r2, [r3, #12]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f042 0201 	orr.w	r2, r2, #1
 800436e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x6c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004382:	d013      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x6c>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1a      	ldr	r2, [pc, #104]	; (80043f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x6c>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a19      	ldr	r2, [pc, #100]	; (80043f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x6c>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a17      	ldr	r2, [pc, #92]	; (80043fc <HAL_TIM_Base_Start_IT+0xbc>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_TIM_Base_Start_IT+0x6c>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a16      	ldr	r2, [pc, #88]	; (8004400 <HAL_TIM_Base_Start_IT+0xc0>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d111      	bne.n	80043d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d010      	beq.n	80043e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0201 	orr.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ce:	e007      	b.n	80043e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3714      	adds	r7, #20
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	40010000 	.word	0x40010000
 80043f4:	40000400 	.word	0x40000400
 80043f8:	40000800 	.word	0x40000800
 80043fc:	40000c00 	.word	0x40000c00
 8004400:	40014000 	.word	0x40014000

08004404 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	691b      	ldr	r3, [r3, #16]
 800441a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d020      	beq.n	8004468 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f003 0302 	and.w	r3, r3, #2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d01b      	beq.n	8004468 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f06f 0202 	mvn.w	r2, #2
 8004438:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2201      	movs	r2, #1
 800443e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	699b      	ldr	r3, [r3, #24]
 8004446:	f003 0303 	and.w	r3, r3, #3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d003      	beq.n	8004456 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f999 	bl	8004786 <HAL_TIM_IC_CaptureCallback>
 8004454:	e005      	b.n	8004462 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f98b 	bl	8004772 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f99c 	bl	800479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f003 0304 	and.w	r3, r3, #4
 800446e:	2b00      	cmp	r3, #0
 8004470:	d020      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f003 0304 	and.w	r3, r3, #4
 8004478:	2b00      	cmp	r3, #0
 800447a:	d01b      	beq.n	80044b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f06f 0204 	mvn.w	r2, #4
 8004484:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	699b      	ldr	r3, [r3, #24]
 8004492:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004496:	2b00      	cmp	r3, #0
 8004498:	d003      	beq.n	80044a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 f973 	bl	8004786 <HAL_TIM_IC_CaptureCallback>
 80044a0:	e005      	b.n	80044ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f965 	bl	8004772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f000 f976 	bl	800479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	2200      	movs	r2, #0
 80044b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	f003 0308 	and.w	r3, r3, #8
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d020      	beq.n	8004500 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f003 0308 	and.w	r3, r3, #8
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d01b      	beq.n	8004500 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f06f 0208 	mvn.w	r2, #8
 80044d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2204      	movs	r2, #4
 80044d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d003      	beq.n	80044ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f000 f94d 	bl	8004786 <HAL_TIM_IC_CaptureCallback>
 80044ec:	e005      	b.n	80044fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f000 f93f 	bl	8004772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f950 	bl	800479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f003 0310 	and.w	r3, r3, #16
 8004506:	2b00      	cmp	r3, #0
 8004508:	d020      	beq.n	800454c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	d01b      	beq.n	800454c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f06f 0210 	mvn.w	r2, #16
 800451c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2208      	movs	r2, #8
 8004522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452e:	2b00      	cmp	r3, #0
 8004530:	d003      	beq.n	800453a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 f927 	bl	8004786 <HAL_TIM_IC_CaptureCallback>
 8004538:	e005      	b.n	8004546 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f000 f919 	bl	8004772 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004540:	6878      	ldr	r0, [r7, #4]
 8004542:	f000 f92a 	bl	800479a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00c      	beq.n	8004570 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d007      	beq.n	8004570 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0201 	mvn.w	r2, #1
 8004568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7fd fb60 	bl	8001c30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00c      	beq.n	8004594 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004580:	2b00      	cmp	r3, #0
 8004582:	d007      	beq.n	8004594 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800458c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 fab6 	bl	8004b00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00c      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d007      	beq.n	80045b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f8fb 	bl	80047ae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00c      	beq.n	80045dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f003 0320 	and.w	r3, r3, #32
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d007      	beq.n	80045dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0220 	mvn.w	r2, #32
 80045d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 fa88 	bl	8004aec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045dc:	bf00      	nop
 80045de:	3710      	adds	r7, #16
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b084      	sub	sp, #16
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d101      	bne.n	8004600 <HAL_TIM_ConfigClockSource+0x1c>
 80045fc:	2302      	movs	r3, #2
 80045fe:	e0b4      	b.n	800476a <HAL_TIM_ConfigClockSource+0x186>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800461e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004626:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68ba      	ldr	r2, [r7, #8]
 800462e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004638:	d03e      	beq.n	80046b8 <HAL_TIM_ConfigClockSource+0xd4>
 800463a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800463e:	f200 8087 	bhi.w	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004646:	f000 8086 	beq.w	8004756 <HAL_TIM_ConfigClockSource+0x172>
 800464a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800464e:	d87f      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004650:	2b70      	cmp	r3, #112	; 0x70
 8004652:	d01a      	beq.n	800468a <HAL_TIM_ConfigClockSource+0xa6>
 8004654:	2b70      	cmp	r3, #112	; 0x70
 8004656:	d87b      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004658:	2b60      	cmp	r3, #96	; 0x60
 800465a:	d050      	beq.n	80046fe <HAL_TIM_ConfigClockSource+0x11a>
 800465c:	2b60      	cmp	r3, #96	; 0x60
 800465e:	d877      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004660:	2b50      	cmp	r3, #80	; 0x50
 8004662:	d03c      	beq.n	80046de <HAL_TIM_ConfigClockSource+0xfa>
 8004664:	2b50      	cmp	r3, #80	; 0x50
 8004666:	d873      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004668:	2b40      	cmp	r3, #64	; 0x40
 800466a:	d058      	beq.n	800471e <HAL_TIM_ConfigClockSource+0x13a>
 800466c:	2b40      	cmp	r3, #64	; 0x40
 800466e:	d86f      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004670:	2b30      	cmp	r3, #48	; 0x30
 8004672:	d064      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 8004674:	2b30      	cmp	r3, #48	; 0x30
 8004676:	d86b      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004678:	2b20      	cmp	r3, #32
 800467a:	d060      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 800467c:	2b20      	cmp	r3, #32
 800467e:	d867      	bhi.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d05c      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 8004684:	2b10      	cmp	r3, #16
 8004686:	d05a      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	e062      	b.n	8004750 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800469a:	f000 f999 	bl	80049d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	609a      	str	r2, [r3, #8]
      break;
 80046b6:	e04f      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046c8:	f000 f982 	bl	80049d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	689a      	ldr	r2, [r3, #8]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046da:	609a      	str	r2, [r3, #8]
      break;
 80046dc:	e03c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046ea:	461a      	mov	r2, r3
 80046ec:	f000 f8f6 	bl	80048dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2150      	movs	r1, #80	; 0x50
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 f94f 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 80046fc:	e02c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800470a:	461a      	mov	r2, r3
 800470c:	f000 f915 	bl	800493a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2160      	movs	r1, #96	; 0x60
 8004716:	4618      	mov	r0, r3
 8004718:	f000 f93f 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 800471c:	e01c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	461a      	mov	r2, r3
 800472c:	f000 f8d6 	bl	80048dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2140      	movs	r1, #64	; 0x40
 8004736:	4618      	mov	r0, r3
 8004738:	f000 f92f 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 800473c:	e00c      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f000 f926 	bl	800499a <TIM_ITRx_SetConfig>
      break;
 800474e:	e003      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	73fb      	strb	r3, [r7, #15]
      break;
 8004754:	e000      	b.n	8004758 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004756:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004768:	7bfb      	ldrb	r3, [r7, #15]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004772:	b480      	push	{r7}
 8004774:	b083      	sub	sp, #12
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800477a:	bf00      	nop
 800477c:	370c      	adds	r7, #12
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr

08004786 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr
	...

080047c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b085      	sub	sp, #20
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
 80047cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a3a      	ldr	r2, [pc, #232]	; (80048c0 <TIM_Base_SetConfig+0xfc>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00f      	beq.n	80047fc <TIM_Base_SetConfig+0x38>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e2:	d00b      	beq.n	80047fc <TIM_Base_SetConfig+0x38>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a37      	ldr	r2, [pc, #220]	; (80048c4 <TIM_Base_SetConfig+0x100>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d007      	beq.n	80047fc <TIM_Base_SetConfig+0x38>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a36      	ldr	r2, [pc, #216]	; (80048c8 <TIM_Base_SetConfig+0x104>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d003      	beq.n	80047fc <TIM_Base_SetConfig+0x38>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	4a35      	ldr	r2, [pc, #212]	; (80048cc <TIM_Base_SetConfig+0x108>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d108      	bne.n	800480e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004802:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	68fa      	ldr	r2, [r7, #12]
 800480a:	4313      	orrs	r3, r2
 800480c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2b      	ldr	r2, [pc, #172]	; (80048c0 <TIM_Base_SetConfig+0xfc>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d01b      	beq.n	800484e <TIM_Base_SetConfig+0x8a>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481c:	d017      	beq.n	800484e <TIM_Base_SetConfig+0x8a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a28      	ldr	r2, [pc, #160]	; (80048c4 <TIM_Base_SetConfig+0x100>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d013      	beq.n	800484e <TIM_Base_SetConfig+0x8a>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a27      	ldr	r2, [pc, #156]	; (80048c8 <TIM_Base_SetConfig+0x104>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d00f      	beq.n	800484e <TIM_Base_SetConfig+0x8a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a26      	ldr	r2, [pc, #152]	; (80048cc <TIM_Base_SetConfig+0x108>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00b      	beq.n	800484e <TIM_Base_SetConfig+0x8a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a25      	ldr	r2, [pc, #148]	; (80048d0 <TIM_Base_SetConfig+0x10c>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d007      	beq.n	800484e <TIM_Base_SetConfig+0x8a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a24      	ldr	r2, [pc, #144]	; (80048d4 <TIM_Base_SetConfig+0x110>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d003      	beq.n	800484e <TIM_Base_SetConfig+0x8a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a23      	ldr	r2, [pc, #140]	; (80048d8 <TIM_Base_SetConfig+0x114>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d108      	bne.n	8004860 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004854:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	68fa      	ldr	r2, [r7, #12]
 800485c:	4313      	orrs	r3, r2
 800485e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	695b      	ldr	r3, [r3, #20]
 800486a:	4313      	orrs	r3, r2
 800486c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	68fa      	ldr	r2, [r7, #12]
 8004872:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a0e      	ldr	r2, [pc, #56]	; (80048c0 <TIM_Base_SetConfig+0xfc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d103      	bne.n	8004894 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	691a      	ldr	r2, [r3, #16]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0301 	and.w	r3, r3, #1
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d105      	bne.n	80048b2 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f023 0201 	bic.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	611a      	str	r2, [r3, #16]
  }
}
 80048b2:	bf00      	nop
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800
 80048cc:	40000c00 	.word	0x40000c00
 80048d0:	40014000 	.word	0x40014000
 80048d4:	40014400 	.word	0x40014400
 80048d8:	40014800 	.word	0x40014800

080048dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048dc:	b480      	push	{r7}
 80048de:	b087      	sub	sp, #28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6a1b      	ldr	r3, [r3, #32]
 80048ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	6a1b      	ldr	r3, [r3, #32]
 80048f2:	f023 0201 	bic.w	r2, r3, #1
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004906:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f023 030a 	bic.w	r3, r3, #10
 8004918:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	693a      	ldr	r2, [r7, #16]
 8004926:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	621a      	str	r2, [r3, #32]
}
 800492e:	bf00      	nop
 8004930:	371c      	adds	r7, #28
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800493a:	b480      	push	{r7}
 800493c:	b087      	sub	sp, #28
 800493e:	af00      	add	r7, sp, #0
 8004940:	60f8      	str	r0, [r7, #12]
 8004942:	60b9      	str	r1, [r7, #8]
 8004944:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1b      	ldr	r3, [r3, #32]
 8004950:	f023 0210 	bic.w	r2, r3, #16
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	699b      	ldr	r3, [r3, #24]
 800495c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004964:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	031b      	lsls	r3, r3, #12
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004976:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	011b      	lsls	r3, r3, #4
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	693a      	ldr	r2, [r7, #16]
 8004986:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	697a      	ldr	r2, [r7, #20]
 800498c:	621a      	str	r2, [r3, #32]
}
 800498e:	bf00      	nop
 8004990:	371c      	adds	r7, #28
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	f043 0307 	orr.w	r3, r3, #7
 80049bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	609a      	str	r2, [r3, #8]
}
 80049c4:	bf00      	nop
 80049c6:	3714      	adds	r7, #20
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049d0:	b480      	push	{r7}
 80049d2:	b087      	sub	sp, #28
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	021a      	lsls	r2, r3, #8
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	431a      	orrs	r2, r3
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	697a      	ldr	r2, [r7, #20]
 8004a02:	609a      	str	r2, [r3, #8]
}
 8004a04:	bf00      	nop
 8004a06:	371c      	adds	r7, #28
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d101      	bne.n	8004a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a24:	2302      	movs	r3, #2
 8004a26:	e050      	b.n	8004aca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2202      	movs	r2, #2
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	68fa      	ldr	r2, [r7, #12]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a1c      	ldr	r2, [pc, #112]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d018      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a74:	d013      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a18      	ldr	r2, [pc, #96]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00e      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a16      	ldr	r2, [pc, #88]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d009      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a15      	ldr	r2, [pc, #84]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d004      	beq.n	8004a9e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a13      	ldr	r2, [pc, #76]	; (8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d10c      	bne.n	8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	685b      	ldr	r3, [r3, #4]
 8004aaa:	68ba      	ldr	r2, [r7, #8]
 8004aac:	4313      	orrs	r3, r2
 8004aae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68ba      	ldr	r2, [r7, #8]
 8004ab6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2201      	movs	r2, #1
 8004abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40010000 	.word	0x40010000
 8004adc:	40000400 	.word	0x40000400
 8004ae0:	40000800 	.word	0x40000800
 8004ae4:	40000c00 	.word	0x40000c00
 8004ae8:	40014000 	.word	0x40014000

08004aec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d101      	bne.n	8004b26 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b22:	2301      	movs	r3, #1
 8004b24:	e042      	b.n	8004bac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d106      	bne.n	8004b40 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fd fce0 	bl	8002500 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2224      	movs	r2, #36	; 0x24
 8004b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b56:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fdbd 	bl	80056d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	691a      	ldr	r2, [r3, #16]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b6c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	695a      	ldr	r2, [r3, #20]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b7c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b8c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2220      	movs	r2, #32
 8004ba0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004baa:	2300      	movs	r3, #0
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	3708      	adds	r7, #8
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	bd80      	pop	{r7, pc}

08004bb4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b08a      	sub	sp, #40	; 0x28
 8004bb8:	af02      	add	r7, sp, #8
 8004bba:	60f8      	str	r0, [r7, #12]
 8004bbc:	60b9      	str	r1, [r7, #8]
 8004bbe:	603b      	str	r3, [r7, #0]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	2b20      	cmp	r3, #32
 8004bd2:	d175      	bne.n	8004cc0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d002      	beq.n	8004be0 <HAL_UART_Transmit+0x2c>
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d101      	bne.n	8004be4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e06e      	b.n	8004cc2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	2221      	movs	r2, #33	; 0x21
 8004bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bf2:	f7fd fe7b 	bl	80028ec <HAL_GetTick>
 8004bf6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	88fa      	ldrh	r2, [r7, #6]
 8004c02:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0c:	d108      	bne.n	8004c20 <HAL_UART_Transmit+0x6c>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d104      	bne.n	8004c20 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004c16:	2300      	movs	r3, #0
 8004c18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	61bb      	str	r3, [r7, #24]
 8004c1e:	e003      	b.n	8004c28 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c24:	2300      	movs	r3, #0
 8004c26:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004c28:	e02e      	b.n	8004c88 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	9300      	str	r3, [sp, #0]
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	2200      	movs	r2, #0
 8004c32:	2180      	movs	r1, #128	; 0x80
 8004c34:	68f8      	ldr	r0, [r7, #12]
 8004c36:	f000 fb1f 	bl	8005278 <UART_WaitOnFlagUntilTimeout>
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d005      	beq.n	8004c4c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e03a      	b.n	8004cc2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004c4c:	69fb      	ldr	r3, [r7, #28]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10b      	bne.n	8004c6a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	881b      	ldrh	r3, [r3, #0]
 8004c56:	461a      	mov	r2, r3
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c60:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	3302      	adds	r3, #2
 8004c66:	61bb      	str	r3, [r7, #24]
 8004c68:	e007      	b.n	8004c7a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	781a      	ldrb	r2, [r3, #0]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	3301      	adds	r3, #1
 8004c78:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1cb      	bne.n	8004c2a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	2140      	movs	r1, #64	; 0x40
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 faeb 	bl	8005278 <UART_WaitOnFlagUntilTimeout>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e006      	b.n	8004cc2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	e000      	b.n	8004cc2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004cc0:	2302      	movs	r3, #2
  }
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}

08004cca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cca:	b580      	push	{r7, lr}
 8004ccc:	b084      	sub	sp, #16
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b20      	cmp	r3, #32
 8004ce2:	d112      	bne.n	8004d0a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d002      	beq.n	8004cf0 <HAL_UART_Receive_IT+0x26>
 8004cea:	88fb      	ldrh	r3, [r7, #6]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d101      	bne.n	8004cf4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	e00b      	b.n	8004d0c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004cfa:	88fb      	ldrh	r3, [r7, #6]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	68b9      	ldr	r1, [r7, #8]
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 fb12 	bl	800532a <UART_Start_Receive_IT>
 8004d06:	4603      	mov	r3, r0
 8004d08:	e000      	b.n	8004d0c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004d0a:	2302      	movs	r3, #2
  }
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}

08004d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b0ba      	sub	sp, #232	; 0xe8
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	695b      	ldr	r3, [r3, #20]
 8004d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d40:	2300      	movs	r3, #0
 8004d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10f      	bne.n	8004d7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d009      	beq.n	8004d7a <HAL_UART_IRQHandler+0x66>
 8004d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d003      	beq.n	8004d7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fbf2 	bl	800555c <UART_Receive_IT>
      return;
 8004d78:	e25b      	b.n	8005232 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	f000 80de 	beq.w	8004f40 <HAL_UART_IRQHandler+0x22c>
 8004d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d106      	bne.n	8004d9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 80d1 	beq.w	8004f40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d00b      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xae>
 8004daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dc6:	f003 0304 	and.w	r3, r3, #4
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d00b      	beq.n	8004de6 <HAL_UART_IRQHandler+0xd2>
 8004dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dd2:	f003 0301 	and.w	r3, r3, #1
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d005      	beq.n	8004de6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dde:	f043 0202 	orr.w	r2, r3, #2
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dea:	f003 0302 	and.w	r3, r3, #2
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d00b      	beq.n	8004e0a <HAL_UART_IRQHandler+0xf6>
 8004df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004df6:	f003 0301 	and.w	r3, r3, #1
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d005      	beq.n	8004e0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	f043 0204 	orr.w	r2, r3, #4
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e0e:	f003 0308 	and.w	r3, r3, #8
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d011      	beq.n	8004e3a <HAL_UART_IRQHandler+0x126>
 8004e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d105      	bne.n	8004e2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d005      	beq.n	8004e3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	f043 0208 	orr.w	r2, r3, #8
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f000 81f2 	beq.w	8005228 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e48:	f003 0320 	and.w	r3, r3, #32
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_UART_IRQHandler+0x14e>
 8004e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e5c:	6878      	ldr	r0, [r7, #4]
 8004e5e:	f000 fb7d 	bl	800555c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	695b      	ldr	r3, [r3, #20]
 8004e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	bf0c      	ite	eq
 8004e70:	2301      	moveq	r3, #1
 8004e72:	2300      	movne	r3, #0
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d103      	bne.n	8004e8e <HAL_UART_IRQHandler+0x17a>
 8004e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d04f      	beq.n	8004f2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa85 	bl	800539e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9e:	2b40      	cmp	r3, #64	; 0x40
 8004ea0:	d141      	bne.n	8004f26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3314      	adds	r3, #20
 8004eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ece:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ede:	e841 2300 	strex	r3, r2, [r1]
 8004ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1d9      	bne.n	8004ea2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d013      	beq.n	8004f1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004efa:	4a7e      	ldr	r2, [pc, #504]	; (80050f4 <HAL_UART_IRQHandler+0x3e0>)
 8004efc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f02:	4618      	mov	r0, r3
 8004f04:	f7fd fea3 	bl	8002c4e <HAL_DMA_Abort_IT>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d016      	beq.n	8004f3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f14:	687a      	ldr	r2, [r7, #4]
 8004f16:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f1c:	e00e      	b.n	8004f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f000 f994 	bl	800524c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f24:	e00a      	b.n	8004f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f990 	bl	800524c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f2c:	e006      	b.n	8004f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f98c 	bl	800524c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004f3a:	e175      	b.n	8005228 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f3c:	bf00      	nop
    return;
 8004f3e:	e173      	b.n	8005228 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	f040 814f 	bne.w	80051e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f003 0310 	and.w	r3, r3, #16
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 8148 	beq.w	80051e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f000 8141 	beq.w	80051e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f66:	2300      	movs	r3, #0
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	60bb      	str	r3, [r7, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60bb      	str	r3, [r7, #8]
 8004f7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	f040 80b6 	bne.w	80050f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 8145 	beq.w	800522c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004faa:	429a      	cmp	r2, r3
 8004fac:	f080 813e 	bcs.w	800522c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fc2:	f000 8088 	beq.w	80050d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	330c      	adds	r3, #12
 8004fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fd4:	e853 3f00 	ldrex	r3, [r3]
 8004fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	330c      	adds	r3, #12
 8004fee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800500a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800500e:	2b00      	cmp	r3, #0
 8005010:	d1d9      	bne.n	8004fc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	3314      	adds	r3, #20
 8005018:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800501a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800501c:	e853 3f00 	ldrex	r3, [r3]
 8005020:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005024:	f023 0301 	bic.w	r3, r3, #1
 8005028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	3314      	adds	r3, #20
 8005032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005036:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800503a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800503e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800504a:	2b00      	cmp	r3, #0
 800504c:	d1e1      	bne.n	8005012 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3314      	adds	r3, #20
 8005054:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005058:	e853 3f00 	ldrex	r3, [r3]
 800505c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800505e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	3314      	adds	r3, #20
 800506e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005072:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e3      	bne.n	800504e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2220      	movs	r2, #32
 800508a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	330c      	adds	r3, #12
 800509a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800509e:	e853 3f00 	ldrex	r3, [r3]
 80050a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050a6:	f023 0310 	bic.w	r3, r3, #16
 80050aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	330c      	adds	r3, #12
 80050b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80050ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050c0:	e841 2300 	strex	r3, r2, [r1]
 80050c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d1e3      	bne.n	8005094 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050d0:	4618      	mov	r0, r3
 80050d2:	f7fd fd4c 	bl	8002b6e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2202      	movs	r2, #2
 80050da:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	4619      	mov	r1, r3
 80050ec:	6878      	ldr	r0, [r7, #4]
 80050ee:	f000 f8b7 	bl	8005260 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050f2:	e09b      	b.n	800522c <HAL_UART_IRQHandler+0x518>
 80050f4:	08005465 	.word	0x08005465
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005100:	b29b      	uxth	r3, r3
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	f000 808e 	beq.w	8005230 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005114:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005118:	2b00      	cmp	r3, #0
 800511a:	f000 8089 	beq.w	8005230 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	330c      	adds	r3, #12
 8005124:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	e853 3f00 	ldrex	r3, [r3]
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800512e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005130:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005134:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	330c      	adds	r3, #12
 800513e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005142:	647a      	str	r2, [r7, #68]	; 0x44
 8005144:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005148:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e3      	bne.n	800511e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3314      	adds	r3, #20
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	623b      	str	r3, [r7, #32]
   return(result);
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3314      	adds	r3, #20
 8005176:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800517a:	633a      	str	r2, [r7, #48]	; 0x30
 800517c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005180:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005182:	e841 2300 	strex	r3, r2, [r1]
 8005186:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800518a:	2b00      	cmp	r3, #0
 800518c:	d1e3      	bne.n	8005156 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2220      	movs	r2, #32
 8005192:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	330c      	adds	r3, #12
 80051a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	693b      	ldr	r3, [r7, #16]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f023 0310 	bic.w	r3, r3, #16
 80051b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051c0:	61fa      	str	r2, [r7, #28]
 80051c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	69b9      	ldr	r1, [r7, #24]
 80051c6:	69fa      	ldr	r2, [r7, #28]
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	617b      	str	r3, [r7, #20]
   return(result);
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e3      	bne.n	800519c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2202      	movs	r2, #2
 80051d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051de:	4619      	mov	r1, r3
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f000 f83d 	bl	8005260 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051e6:	e023      	b.n	8005230 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d009      	beq.n	8005208 <HAL_UART_IRQHandler+0x4f4>
 80051f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d003      	beq.n	8005208 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 f943 	bl	800548c <UART_Transmit_IT>
    return;
 8005206:	e014      	b.n	8005232 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b00      	cmp	r3, #0
 8005212:	d00e      	beq.n	8005232 <HAL_UART_IRQHandler+0x51e>
 8005214:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521c:	2b00      	cmp	r3, #0
 800521e:	d008      	beq.n	8005232 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f983 	bl	800552c <UART_EndTransmit_IT>
    return;
 8005226:	e004      	b.n	8005232 <HAL_UART_IRQHandler+0x51e>
    return;
 8005228:	bf00      	nop
 800522a:	e002      	b.n	8005232 <HAL_UART_IRQHandler+0x51e>
      return;
 800522c:	bf00      	nop
 800522e:	e000      	b.n	8005232 <HAL_UART_IRQHandler+0x51e>
      return;
 8005230:	bf00      	nop
  }
}
 8005232:	37e8      	adds	r7, #232	; 0xe8
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	460b      	mov	r3, r1
 800526a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	603b      	str	r3, [r7, #0]
 8005284:	4613      	mov	r3, r2
 8005286:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005288:	e03b      	b.n	8005302 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528a:	6a3b      	ldr	r3, [r7, #32]
 800528c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005290:	d037      	beq.n	8005302 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005292:	f7fd fb2b 	bl	80028ec <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	6a3a      	ldr	r2, [r7, #32]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d302      	bcc.n	80052a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80052a2:	6a3b      	ldr	r3, [r7, #32]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d101      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052a8:	2303      	movs	r3, #3
 80052aa:	e03a      	b.n	8005322 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	f003 0304 	and.w	r3, r3, #4
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d023      	beq.n	8005302 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052ba:	68bb      	ldr	r3, [r7, #8]
 80052bc:	2b80      	cmp	r3, #128	; 0x80
 80052be:	d020      	beq.n	8005302 <UART_WaitOnFlagUntilTimeout+0x8a>
 80052c0:	68bb      	ldr	r3, [r7, #8]
 80052c2:	2b40      	cmp	r3, #64	; 0x40
 80052c4:	d01d      	beq.n	8005302 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0308 	and.w	r3, r3, #8
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d116      	bne.n	8005302 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80052d4:	2300      	movs	r3, #0
 80052d6:	617b      	str	r3, [r7, #20]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	617b      	str	r3, [r7, #20]
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685b      	ldr	r3, [r3, #4]
 80052e6:	617b      	str	r3, [r7, #20]
 80052e8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052ea:	68f8      	ldr	r0, [r7, #12]
 80052ec:	f000 f857 	bl	800539e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2208      	movs	r2, #8
 80052f4:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	e00f      	b.n	8005322 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	681a      	ldr	r2, [r3, #0]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	4013      	ands	r3, r2
 800530c:	68ba      	ldr	r2, [r7, #8]
 800530e:	429a      	cmp	r2, r3
 8005310:	bf0c      	ite	eq
 8005312:	2301      	moveq	r3, #1
 8005314:	2300      	movne	r3, #0
 8005316:	b2db      	uxtb	r3, r3
 8005318:	461a      	mov	r2, r3
 800531a:	79fb      	ldrb	r3, [r7, #7]
 800531c:	429a      	cmp	r2, r3
 800531e:	d0b4      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3718      	adds	r7, #24
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800532a:	b480      	push	{r7}
 800532c:	b085      	sub	sp, #20
 800532e:	af00      	add	r7, sp, #0
 8005330:	60f8      	str	r0, [r7, #12]
 8005332:	60b9      	str	r1, [r7, #8]
 8005334:	4613      	mov	r3, r2
 8005336:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	88fa      	ldrh	r2, [r7, #6]
 8005342:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	88fa      	ldrh	r2, [r7, #6]
 8005348:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2222      	movs	r2, #34	; 0x22
 8005354:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	691b      	ldr	r3, [r3, #16]
 800535c:	2b00      	cmp	r3, #0
 800535e:	d007      	beq.n	8005370 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68da      	ldr	r2, [r3, #12]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800536e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	695a      	ldr	r2, [r3, #20]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f042 0201 	orr.w	r2, r2, #1
 800537e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	68da      	ldr	r2, [r3, #12]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0220 	orr.w	r2, r2, #32
 800538e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3714      	adds	r7, #20
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr

0800539e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800539e:	b480      	push	{r7}
 80053a0:	b095      	sub	sp, #84	; 0x54
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	330c      	adds	r3, #12
 80053ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053b0:	e853 3f00 	ldrex	r3, [r3]
 80053b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	330c      	adds	r3, #12
 80053c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053c6:	643a      	str	r2, [r7, #64]	; 0x40
 80053c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053ce:	e841 2300 	strex	r3, r2, [r1]
 80053d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1e5      	bne.n	80053a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	3314      	adds	r3, #20
 80053e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e2:	6a3b      	ldr	r3, [r7, #32]
 80053e4:	e853 3f00 	ldrex	r3, [r3]
 80053e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80053ea:	69fb      	ldr	r3, [r7, #28]
 80053ec:	f023 0301 	bic.w	r3, r3, #1
 80053f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	3314      	adds	r3, #20
 80053f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005402:	e841 2300 	strex	r3, r2, [r1]
 8005406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540a:	2b00      	cmp	r3, #0
 800540c:	d1e5      	bne.n	80053da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	2b01      	cmp	r3, #1
 8005414:	d119      	bne.n	800544a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	330c      	adds	r3, #12
 800541c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	60bb      	str	r3, [r7, #8]
   return(result);
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f023 0310 	bic.w	r3, r3, #16
 800542c:	647b      	str	r3, [r7, #68]	; 0x44
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	330c      	adds	r3, #12
 8005434:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005436:	61ba      	str	r2, [r7, #24]
 8005438:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6979      	ldr	r1, [r7, #20]
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	613b      	str	r3, [r7, #16]
   return(result);
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e5      	bne.n	8005416 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2220      	movs	r2, #32
 800544e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005458:	bf00      	nop
 800545a:	3754      	adds	r7, #84	; 0x54
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2200      	movs	r2, #0
 8005476:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f7ff fee4 	bl	800524c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005484:	bf00      	nop
 8005486:	3710      	adds	r7, #16
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800548c:	b480      	push	{r7}
 800548e:	b085      	sub	sp, #20
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b21      	cmp	r3, #33	; 0x21
 800549e:	d13e      	bne.n	800551e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054a8:	d114      	bne.n	80054d4 <UART_Transmit_IT+0x48>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d110      	bne.n	80054d4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	461a      	mov	r2, r3
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054c6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1b      	ldr	r3, [r3, #32]
 80054cc:	1c9a      	adds	r2, r3, #2
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	621a      	str	r2, [r3, #32]
 80054d2:	e008      	b.n	80054e6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	1c59      	adds	r1, r3, #1
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	6211      	str	r1, [r2, #32]
 80054de:	781a      	ldrb	r2, [r3, #0]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	3b01      	subs	r3, #1
 80054ee:	b29b      	uxth	r3, r3
 80054f0:	687a      	ldr	r2, [r7, #4]
 80054f2:	4619      	mov	r1, r3
 80054f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d10f      	bne.n	800551a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68da      	ldr	r2, [r3, #12]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005508:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005518:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	e000      	b.n	8005520 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800551e:	2302      	movs	r3, #2
  }
}
 8005520:	4618      	mov	r0, r3
 8005522:	3714      	adds	r7, #20
 8005524:	46bd      	mov	sp, r7
 8005526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552a:	4770      	bx	lr

0800552c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005542:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f7ff fe73 	bl	8005238 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}

0800555c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08c      	sub	sp, #48	; 0x30
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b22      	cmp	r3, #34	; 0x22
 800556e:	f040 80ae 	bne.w	80056ce <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800557a:	d117      	bne.n	80055ac <UART_Receive_IT+0x50>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d113      	bne.n	80055ac <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005584:	2300      	movs	r3, #0
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800558c:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	685b      	ldr	r3, [r3, #4]
 8005594:	b29b      	uxth	r3, r3
 8005596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800559a:	b29a      	uxth	r2, r3
 800559c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055a4:	1c9a      	adds	r2, r3, #2
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	629a      	str	r2, [r3, #40]	; 0x28
 80055aa:	e026      	b.n	80055fa <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055be:	d007      	beq.n	80055d0 <UART_Receive_IT+0x74>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10a      	bne.n	80055de <UART_Receive_IT+0x82>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	691b      	ldr	r3, [r3, #16]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d106      	bne.n	80055de <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	701a      	strb	r2, [r3, #0]
 80055dc:	e008      	b.n	80055f0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	685b      	ldr	r3, [r3, #4]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ee:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	1c5a      	adds	r2, r3, #1
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80055fe:	b29b      	uxth	r3, r3
 8005600:	3b01      	subs	r3, #1
 8005602:	b29b      	uxth	r3, r3
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	4619      	mov	r1, r3
 8005608:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800560a:	2b00      	cmp	r3, #0
 800560c:	d15d      	bne.n	80056ca <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68da      	ldr	r2, [r3, #12]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f022 0220 	bic.w	r2, r2, #32
 800561c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68da      	ldr	r2, [r3, #12]
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800562c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	695a      	ldr	r2, [r3, #20]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0201 	bic.w	r2, r2, #1
 800563c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2200      	movs	r2, #0
 800564a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005650:	2b01      	cmp	r3, #1
 8005652:	d135      	bne.n	80056c0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	330c      	adds	r3, #12
 8005660:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	613b      	str	r3, [r7, #16]
   return(result);
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f023 0310 	bic.w	r3, r3, #16
 8005670:	627b      	str	r3, [r7, #36]	; 0x24
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	330c      	adds	r3, #12
 8005678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800567a:	623a      	str	r2, [r7, #32]
 800567c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800567e:	69f9      	ldr	r1, [r7, #28]
 8005680:	6a3a      	ldr	r2, [r7, #32]
 8005682:	e841 2300 	strex	r3, r2, [r1]
 8005686:	61bb      	str	r3, [r7, #24]
   return(result);
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1e5      	bne.n	800565a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b10      	cmp	r3, #16
 800569a:	d10a      	bne.n	80056b2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800569c:	2300      	movs	r3, #0
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	60fb      	str	r3, [r7, #12]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	60fb      	str	r3, [r7, #12]
 80056b0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f7ff fdd1 	bl	8005260 <HAL_UARTEx_RxEventCallback>
 80056be:	e002      	b.n	80056c6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fc f9a5 	bl	8001a10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	e002      	b.n	80056d0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80056ca:	2300      	movs	r3, #0
 80056cc:	e000      	b.n	80056d0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80056ce:	2302      	movs	r3, #2
  }
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3730      	adds	r7, #48	; 0x30
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}

080056d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056dc:	b0c0      	sub	sp, #256	; 0x100
 80056de:	af00      	add	r7, sp, #0
 80056e0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80056e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80056f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f4:	68d9      	ldr	r1, [r3, #12]
 80056f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	ea40 0301 	orr.w	r3, r0, r1
 8005700:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005706:	689a      	ldr	r2, [r3, #8]
 8005708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	431a      	orrs	r2, r3
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	431a      	orrs	r2, r3
 8005718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005724:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005730:	f021 010c 	bic.w	r1, r1, #12
 8005734:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800573e:	430b      	orrs	r3, r1
 8005740:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005742:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	695b      	ldr	r3, [r3, #20]
 800574a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800574e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005752:	6999      	ldr	r1, [r3, #24]
 8005754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	ea40 0301 	orr.w	r3, r0, r1
 800575e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	4b8f      	ldr	r3, [pc, #572]	; (80059a4 <UART_SetConfig+0x2cc>)
 8005768:	429a      	cmp	r2, r3
 800576a:	d005      	beq.n	8005778 <UART_SetConfig+0xa0>
 800576c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	4b8d      	ldr	r3, [pc, #564]	; (80059a8 <UART_SetConfig+0x2d0>)
 8005774:	429a      	cmp	r2, r3
 8005776:	d104      	bne.n	8005782 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005778:	f7fe fd24 	bl	80041c4 <HAL_RCC_GetPCLK2Freq>
 800577c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005780:	e003      	b.n	800578a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005782:	f7fe fd0b 	bl	800419c <HAL_RCC_GetPCLK1Freq>
 8005786:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800578a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005794:	f040 810c 	bne.w	80059b0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005798:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800579c:	2200      	movs	r2, #0
 800579e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80057a2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80057a6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80057aa:	4622      	mov	r2, r4
 80057ac:	462b      	mov	r3, r5
 80057ae:	1891      	adds	r1, r2, r2
 80057b0:	65b9      	str	r1, [r7, #88]	; 0x58
 80057b2:	415b      	adcs	r3, r3
 80057b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057b6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80057ba:	4621      	mov	r1, r4
 80057bc:	eb12 0801 	adds.w	r8, r2, r1
 80057c0:	4629      	mov	r1, r5
 80057c2:	eb43 0901 	adc.w	r9, r3, r1
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80057d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80057d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80057da:	4690      	mov	r8, r2
 80057dc:	4699      	mov	r9, r3
 80057de:	4623      	mov	r3, r4
 80057e0:	eb18 0303 	adds.w	r3, r8, r3
 80057e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80057e8:	462b      	mov	r3, r5
 80057ea:	eb49 0303 	adc.w	r3, r9, r3
 80057ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80057f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80057fe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005802:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005806:	460b      	mov	r3, r1
 8005808:	18db      	adds	r3, r3, r3
 800580a:	653b      	str	r3, [r7, #80]	; 0x50
 800580c:	4613      	mov	r3, r2
 800580e:	eb42 0303 	adc.w	r3, r2, r3
 8005812:	657b      	str	r3, [r7, #84]	; 0x54
 8005814:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005818:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800581c:	f7fb fa2c 	bl	8000c78 <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4b61      	ldr	r3, [pc, #388]	; (80059ac <UART_SetConfig+0x2d4>)
 8005826:	fba3 2302 	umull	r2, r3, r3, r2
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	011c      	lsls	r4, r3, #4
 800582e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005832:	2200      	movs	r2, #0
 8005834:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005838:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800583c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005840:	4642      	mov	r2, r8
 8005842:	464b      	mov	r3, r9
 8005844:	1891      	adds	r1, r2, r2
 8005846:	64b9      	str	r1, [r7, #72]	; 0x48
 8005848:	415b      	adcs	r3, r3
 800584a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800584c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005850:	4641      	mov	r1, r8
 8005852:	eb12 0a01 	adds.w	sl, r2, r1
 8005856:	4649      	mov	r1, r9
 8005858:	eb43 0b01 	adc.w	fp, r3, r1
 800585c:	f04f 0200 	mov.w	r2, #0
 8005860:	f04f 0300 	mov.w	r3, #0
 8005864:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005868:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800586c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005870:	4692      	mov	sl, r2
 8005872:	469b      	mov	fp, r3
 8005874:	4643      	mov	r3, r8
 8005876:	eb1a 0303 	adds.w	r3, sl, r3
 800587a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800587e:	464b      	mov	r3, r9
 8005880:	eb4b 0303 	adc.w	r3, fp, r3
 8005884:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	2200      	movs	r2, #0
 8005890:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005894:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005898:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800589c:	460b      	mov	r3, r1
 800589e:	18db      	adds	r3, r3, r3
 80058a0:	643b      	str	r3, [r7, #64]	; 0x40
 80058a2:	4613      	mov	r3, r2
 80058a4:	eb42 0303 	adc.w	r3, r2, r3
 80058a8:	647b      	str	r3, [r7, #68]	; 0x44
 80058aa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80058ae:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80058b2:	f7fb f9e1 	bl	8000c78 <__aeabi_uldivmod>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4611      	mov	r1, r2
 80058bc:	4b3b      	ldr	r3, [pc, #236]	; (80059ac <UART_SetConfig+0x2d4>)
 80058be:	fba3 2301 	umull	r2, r3, r3, r1
 80058c2:	095b      	lsrs	r3, r3, #5
 80058c4:	2264      	movs	r2, #100	; 0x64
 80058c6:	fb02 f303 	mul.w	r3, r2, r3
 80058ca:	1acb      	subs	r3, r1, r3
 80058cc:	00db      	lsls	r3, r3, #3
 80058ce:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80058d2:	4b36      	ldr	r3, [pc, #216]	; (80059ac <UART_SetConfig+0x2d4>)
 80058d4:	fba3 2302 	umull	r2, r3, r3, r2
 80058d8:	095b      	lsrs	r3, r3, #5
 80058da:	005b      	lsls	r3, r3, #1
 80058dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80058e0:	441c      	add	r4, r3
 80058e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058e6:	2200      	movs	r2, #0
 80058e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80058ec:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80058f0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80058f4:	4642      	mov	r2, r8
 80058f6:	464b      	mov	r3, r9
 80058f8:	1891      	adds	r1, r2, r2
 80058fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80058fc:	415b      	adcs	r3, r3
 80058fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005900:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005904:	4641      	mov	r1, r8
 8005906:	1851      	adds	r1, r2, r1
 8005908:	6339      	str	r1, [r7, #48]	; 0x30
 800590a:	4649      	mov	r1, r9
 800590c:	414b      	adcs	r3, r1
 800590e:	637b      	str	r3, [r7, #52]	; 0x34
 8005910:	f04f 0200 	mov.w	r2, #0
 8005914:	f04f 0300 	mov.w	r3, #0
 8005918:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800591c:	4659      	mov	r1, fp
 800591e:	00cb      	lsls	r3, r1, #3
 8005920:	4651      	mov	r1, sl
 8005922:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005926:	4651      	mov	r1, sl
 8005928:	00ca      	lsls	r2, r1, #3
 800592a:	4610      	mov	r0, r2
 800592c:	4619      	mov	r1, r3
 800592e:	4603      	mov	r3, r0
 8005930:	4642      	mov	r2, r8
 8005932:	189b      	adds	r3, r3, r2
 8005934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005938:	464b      	mov	r3, r9
 800593a:	460a      	mov	r2, r1
 800593c:	eb42 0303 	adc.w	r3, r2, r3
 8005940:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2200      	movs	r2, #0
 800594c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005950:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005954:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005958:	460b      	mov	r3, r1
 800595a:	18db      	adds	r3, r3, r3
 800595c:	62bb      	str	r3, [r7, #40]	; 0x28
 800595e:	4613      	mov	r3, r2
 8005960:	eb42 0303 	adc.w	r3, r2, r3
 8005964:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005966:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800596a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800596e:	f7fb f983 	bl	8000c78 <__aeabi_uldivmod>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <UART_SetConfig+0x2d4>)
 8005978:	fba3 1302 	umull	r1, r3, r3, r2
 800597c:	095b      	lsrs	r3, r3, #5
 800597e:	2164      	movs	r1, #100	; 0x64
 8005980:	fb01 f303 	mul.w	r3, r1, r3
 8005984:	1ad3      	subs	r3, r2, r3
 8005986:	00db      	lsls	r3, r3, #3
 8005988:	3332      	adds	r3, #50	; 0x32
 800598a:	4a08      	ldr	r2, [pc, #32]	; (80059ac <UART_SetConfig+0x2d4>)
 800598c:	fba2 2303 	umull	r2, r3, r2, r3
 8005990:	095b      	lsrs	r3, r3, #5
 8005992:	f003 0207 	and.w	r2, r3, #7
 8005996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4422      	add	r2, r4
 800599e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80059a0:	e106      	b.n	8005bb0 <UART_SetConfig+0x4d8>
 80059a2:	bf00      	nop
 80059a4:	40011000 	.word	0x40011000
 80059a8:	40011400 	.word	0x40011400
 80059ac:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80059b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059b4:	2200      	movs	r2, #0
 80059b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80059ba:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80059be:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80059c2:	4642      	mov	r2, r8
 80059c4:	464b      	mov	r3, r9
 80059c6:	1891      	adds	r1, r2, r2
 80059c8:	6239      	str	r1, [r7, #32]
 80059ca:	415b      	adcs	r3, r3
 80059cc:	627b      	str	r3, [r7, #36]	; 0x24
 80059ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059d2:	4641      	mov	r1, r8
 80059d4:	1854      	adds	r4, r2, r1
 80059d6:	4649      	mov	r1, r9
 80059d8:	eb43 0501 	adc.w	r5, r3, r1
 80059dc:	f04f 0200 	mov.w	r2, #0
 80059e0:	f04f 0300 	mov.w	r3, #0
 80059e4:	00eb      	lsls	r3, r5, #3
 80059e6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059ea:	00e2      	lsls	r2, r4, #3
 80059ec:	4614      	mov	r4, r2
 80059ee:	461d      	mov	r5, r3
 80059f0:	4643      	mov	r3, r8
 80059f2:	18e3      	adds	r3, r4, r3
 80059f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80059f8:	464b      	mov	r3, r9
 80059fa:	eb45 0303 	adc.w	r3, r5, r3
 80059fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005a12:	f04f 0200 	mov.w	r2, #0
 8005a16:	f04f 0300 	mov.w	r3, #0
 8005a1a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005a1e:	4629      	mov	r1, r5
 8005a20:	008b      	lsls	r3, r1, #2
 8005a22:	4621      	mov	r1, r4
 8005a24:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a28:	4621      	mov	r1, r4
 8005a2a:	008a      	lsls	r2, r1, #2
 8005a2c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005a30:	f7fb f922 	bl	8000c78 <__aeabi_uldivmod>
 8005a34:	4602      	mov	r2, r0
 8005a36:	460b      	mov	r3, r1
 8005a38:	4b60      	ldr	r3, [pc, #384]	; (8005bbc <UART_SetConfig+0x4e4>)
 8005a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8005a3e:	095b      	lsrs	r3, r3, #5
 8005a40:	011c      	lsls	r4, r3, #4
 8005a42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a46:	2200      	movs	r2, #0
 8005a48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005a4c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005a50:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005a54:	4642      	mov	r2, r8
 8005a56:	464b      	mov	r3, r9
 8005a58:	1891      	adds	r1, r2, r2
 8005a5a:	61b9      	str	r1, [r7, #24]
 8005a5c:	415b      	adcs	r3, r3
 8005a5e:	61fb      	str	r3, [r7, #28]
 8005a60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a64:	4641      	mov	r1, r8
 8005a66:	1851      	adds	r1, r2, r1
 8005a68:	6139      	str	r1, [r7, #16]
 8005a6a:	4649      	mov	r1, r9
 8005a6c:	414b      	adcs	r3, r1
 8005a6e:	617b      	str	r3, [r7, #20]
 8005a70:	f04f 0200 	mov.w	r2, #0
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a7c:	4659      	mov	r1, fp
 8005a7e:	00cb      	lsls	r3, r1, #3
 8005a80:	4651      	mov	r1, sl
 8005a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a86:	4651      	mov	r1, sl
 8005a88:	00ca      	lsls	r2, r1, #3
 8005a8a:	4610      	mov	r0, r2
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4603      	mov	r3, r0
 8005a90:	4642      	mov	r2, r8
 8005a92:	189b      	adds	r3, r3, r2
 8005a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a98:	464b      	mov	r3, r9
 8005a9a:	460a      	mov	r2, r1
 8005a9c:	eb42 0303 	adc.w	r3, r2, r3
 8005aa0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005aa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	67bb      	str	r3, [r7, #120]	; 0x78
 8005aae:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005ab0:	f04f 0200 	mov.w	r2, #0
 8005ab4:	f04f 0300 	mov.w	r3, #0
 8005ab8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005abc:	4649      	mov	r1, r9
 8005abe:	008b      	lsls	r3, r1, #2
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ac6:	4641      	mov	r1, r8
 8005ac8:	008a      	lsls	r2, r1, #2
 8005aca:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005ace:	f7fb f8d3 	bl	8000c78 <__aeabi_uldivmod>
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	460b      	mov	r3, r1
 8005ad6:	4611      	mov	r1, r2
 8005ad8:	4b38      	ldr	r3, [pc, #224]	; (8005bbc <UART_SetConfig+0x4e4>)
 8005ada:	fba3 2301 	umull	r2, r3, r3, r1
 8005ade:	095b      	lsrs	r3, r3, #5
 8005ae0:	2264      	movs	r2, #100	; 0x64
 8005ae2:	fb02 f303 	mul.w	r3, r2, r3
 8005ae6:	1acb      	subs	r3, r1, r3
 8005ae8:	011b      	lsls	r3, r3, #4
 8005aea:	3332      	adds	r3, #50	; 0x32
 8005aec:	4a33      	ldr	r2, [pc, #204]	; (8005bbc <UART_SetConfig+0x4e4>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005af8:	441c      	add	r4, r3
 8005afa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005afe:	2200      	movs	r2, #0
 8005b00:	673b      	str	r3, [r7, #112]	; 0x70
 8005b02:	677a      	str	r2, [r7, #116]	; 0x74
 8005b04:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005b08:	4642      	mov	r2, r8
 8005b0a:	464b      	mov	r3, r9
 8005b0c:	1891      	adds	r1, r2, r2
 8005b0e:	60b9      	str	r1, [r7, #8]
 8005b10:	415b      	adcs	r3, r3
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b18:	4641      	mov	r1, r8
 8005b1a:	1851      	adds	r1, r2, r1
 8005b1c:	6039      	str	r1, [r7, #0]
 8005b1e:	4649      	mov	r1, r9
 8005b20:	414b      	adcs	r3, r1
 8005b22:	607b      	str	r3, [r7, #4]
 8005b24:	f04f 0200 	mov.w	r2, #0
 8005b28:	f04f 0300 	mov.w	r3, #0
 8005b2c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005b30:	4659      	mov	r1, fp
 8005b32:	00cb      	lsls	r3, r1, #3
 8005b34:	4651      	mov	r1, sl
 8005b36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b3a:	4651      	mov	r1, sl
 8005b3c:	00ca      	lsls	r2, r1, #3
 8005b3e:	4610      	mov	r0, r2
 8005b40:	4619      	mov	r1, r3
 8005b42:	4603      	mov	r3, r0
 8005b44:	4642      	mov	r2, r8
 8005b46:	189b      	adds	r3, r3, r2
 8005b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b4a:	464b      	mov	r3, r9
 8005b4c:	460a      	mov	r2, r1
 8005b4e:	eb42 0303 	adc.w	r3, r2, r3
 8005b52:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b5e:	667a      	str	r2, [r7, #100]	; 0x64
 8005b60:	f04f 0200 	mov.w	r2, #0
 8005b64:	f04f 0300 	mov.w	r3, #0
 8005b68:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005b6c:	4649      	mov	r1, r9
 8005b6e:	008b      	lsls	r3, r1, #2
 8005b70:	4641      	mov	r1, r8
 8005b72:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b76:	4641      	mov	r1, r8
 8005b78:	008a      	lsls	r2, r1, #2
 8005b7a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005b7e:	f7fb f87b 	bl	8000c78 <__aeabi_uldivmod>
 8005b82:	4602      	mov	r2, r0
 8005b84:	460b      	mov	r3, r1
 8005b86:	4b0d      	ldr	r3, [pc, #52]	; (8005bbc <UART_SetConfig+0x4e4>)
 8005b88:	fba3 1302 	umull	r1, r3, r3, r2
 8005b8c:	095b      	lsrs	r3, r3, #5
 8005b8e:	2164      	movs	r1, #100	; 0x64
 8005b90:	fb01 f303 	mul.w	r3, r1, r3
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	011b      	lsls	r3, r3, #4
 8005b98:	3332      	adds	r3, #50	; 0x32
 8005b9a:	4a08      	ldr	r2, [pc, #32]	; (8005bbc <UART_SetConfig+0x4e4>)
 8005b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8005ba0:	095b      	lsrs	r3, r3, #5
 8005ba2:	f003 020f 	and.w	r2, r3, #15
 8005ba6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4422      	add	r2, r4
 8005bae:	609a      	str	r2, [r3, #8]
}
 8005bb0:	bf00      	nop
 8005bb2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005bbc:	51eb851f 	.word	0x51eb851f

08005bc0 <atoi>:
 8005bc0:	220a      	movs	r2, #10
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	f000 b882 	b.w	8005ccc <strtol>

08005bc8 <_strtol_l.constprop.0>:
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bce:	d001      	beq.n	8005bd4 <_strtol_l.constprop.0+0xc>
 8005bd0:	2b24      	cmp	r3, #36	; 0x24
 8005bd2:	d906      	bls.n	8005be2 <_strtol_l.constprop.0+0x1a>
 8005bd4:	f000 ffc0 	bl	8006b58 <__errno>
 8005bd8:	2316      	movs	r3, #22
 8005bda:	6003      	str	r3, [r0, #0]
 8005bdc:	2000      	movs	r0, #0
 8005bde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005be2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8005cc8 <_strtol_l.constprop.0+0x100>
 8005be6:	460d      	mov	r5, r1
 8005be8:	462e      	mov	r6, r5
 8005bea:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bee:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8005bf2:	f017 0708 	ands.w	r7, r7, #8
 8005bf6:	d1f7      	bne.n	8005be8 <_strtol_l.constprop.0+0x20>
 8005bf8:	2c2d      	cmp	r4, #45	; 0x2d
 8005bfa:	d132      	bne.n	8005c62 <_strtol_l.constprop.0+0x9a>
 8005bfc:	782c      	ldrb	r4, [r5, #0]
 8005bfe:	2701      	movs	r7, #1
 8005c00:	1cb5      	adds	r5, r6, #2
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d05b      	beq.n	8005cbe <_strtol_l.constprop.0+0xf6>
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d109      	bne.n	8005c1e <_strtol_l.constprop.0+0x56>
 8005c0a:	2c30      	cmp	r4, #48	; 0x30
 8005c0c:	d107      	bne.n	8005c1e <_strtol_l.constprop.0+0x56>
 8005c0e:	782c      	ldrb	r4, [r5, #0]
 8005c10:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8005c14:	2c58      	cmp	r4, #88	; 0x58
 8005c16:	d14d      	bne.n	8005cb4 <_strtol_l.constprop.0+0xec>
 8005c18:	786c      	ldrb	r4, [r5, #1]
 8005c1a:	2310      	movs	r3, #16
 8005c1c:	3502      	adds	r5, #2
 8005c1e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8005c22:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c26:	f04f 0e00 	mov.w	lr, #0
 8005c2a:	fbb8 f9f3 	udiv	r9, r8, r3
 8005c2e:	4676      	mov	r6, lr
 8005c30:	fb03 8a19 	mls	sl, r3, r9, r8
 8005c34:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005c38:	f1bc 0f09 	cmp.w	ip, #9
 8005c3c:	d816      	bhi.n	8005c6c <_strtol_l.constprop.0+0xa4>
 8005c3e:	4664      	mov	r4, ip
 8005c40:	42a3      	cmp	r3, r4
 8005c42:	dd24      	ble.n	8005c8e <_strtol_l.constprop.0+0xc6>
 8005c44:	f1be 3fff 	cmp.w	lr, #4294967295
 8005c48:	d008      	beq.n	8005c5c <_strtol_l.constprop.0+0x94>
 8005c4a:	45b1      	cmp	r9, r6
 8005c4c:	d31c      	bcc.n	8005c88 <_strtol_l.constprop.0+0xc0>
 8005c4e:	d101      	bne.n	8005c54 <_strtol_l.constprop.0+0x8c>
 8005c50:	45a2      	cmp	sl, r4
 8005c52:	db19      	blt.n	8005c88 <_strtol_l.constprop.0+0xc0>
 8005c54:	fb06 4603 	mla	r6, r6, r3, r4
 8005c58:	f04f 0e01 	mov.w	lr, #1
 8005c5c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c60:	e7e8      	b.n	8005c34 <_strtol_l.constprop.0+0x6c>
 8005c62:	2c2b      	cmp	r4, #43	; 0x2b
 8005c64:	bf04      	itt	eq
 8005c66:	782c      	ldrbeq	r4, [r5, #0]
 8005c68:	1cb5      	addeq	r5, r6, #2
 8005c6a:	e7ca      	b.n	8005c02 <_strtol_l.constprop.0+0x3a>
 8005c6c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005c70:	f1bc 0f19 	cmp.w	ip, #25
 8005c74:	d801      	bhi.n	8005c7a <_strtol_l.constprop.0+0xb2>
 8005c76:	3c37      	subs	r4, #55	; 0x37
 8005c78:	e7e2      	b.n	8005c40 <_strtol_l.constprop.0+0x78>
 8005c7a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005c7e:	f1bc 0f19 	cmp.w	ip, #25
 8005c82:	d804      	bhi.n	8005c8e <_strtol_l.constprop.0+0xc6>
 8005c84:	3c57      	subs	r4, #87	; 0x57
 8005c86:	e7db      	b.n	8005c40 <_strtol_l.constprop.0+0x78>
 8005c88:	f04f 3eff 	mov.w	lr, #4294967295
 8005c8c:	e7e6      	b.n	8005c5c <_strtol_l.constprop.0+0x94>
 8005c8e:	f1be 3fff 	cmp.w	lr, #4294967295
 8005c92:	d105      	bne.n	8005ca0 <_strtol_l.constprop.0+0xd8>
 8005c94:	2322      	movs	r3, #34	; 0x22
 8005c96:	6003      	str	r3, [r0, #0]
 8005c98:	4646      	mov	r6, r8
 8005c9a:	b942      	cbnz	r2, 8005cae <_strtol_l.constprop.0+0xe6>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	e79e      	b.n	8005bde <_strtol_l.constprop.0+0x16>
 8005ca0:	b107      	cbz	r7, 8005ca4 <_strtol_l.constprop.0+0xdc>
 8005ca2:	4276      	negs	r6, r6
 8005ca4:	2a00      	cmp	r2, #0
 8005ca6:	d0f9      	beq.n	8005c9c <_strtol_l.constprop.0+0xd4>
 8005ca8:	f1be 0f00 	cmp.w	lr, #0
 8005cac:	d000      	beq.n	8005cb0 <_strtol_l.constprop.0+0xe8>
 8005cae:	1e69      	subs	r1, r5, #1
 8005cb0:	6011      	str	r1, [r2, #0]
 8005cb2:	e7f3      	b.n	8005c9c <_strtol_l.constprop.0+0xd4>
 8005cb4:	2430      	movs	r4, #48	; 0x30
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1b1      	bne.n	8005c1e <_strtol_l.constprop.0+0x56>
 8005cba:	2308      	movs	r3, #8
 8005cbc:	e7af      	b.n	8005c1e <_strtol_l.constprop.0+0x56>
 8005cbe:	2c30      	cmp	r4, #48	; 0x30
 8005cc0:	d0a5      	beq.n	8005c0e <_strtol_l.constprop.0+0x46>
 8005cc2:	230a      	movs	r3, #10
 8005cc4:	e7ab      	b.n	8005c1e <_strtol_l.constprop.0+0x56>
 8005cc6:	bf00      	nop
 8005cc8:	08008d99 	.word	0x08008d99

08005ccc <strtol>:
 8005ccc:	4613      	mov	r3, r2
 8005cce:	460a      	mov	r2, r1
 8005cd0:	4601      	mov	r1, r0
 8005cd2:	4802      	ldr	r0, [pc, #8]	; (8005cdc <strtol+0x10>)
 8005cd4:	6800      	ldr	r0, [r0, #0]
 8005cd6:	f7ff bf77 	b.w	8005bc8 <_strtol_l.constprop.0>
 8005cda:	bf00      	nop
 8005cdc:	20000068 	.word	0x20000068

08005ce0 <__cvt>:
 8005ce0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ce4:	ec55 4b10 	vmov	r4, r5, d0
 8005ce8:	2d00      	cmp	r5, #0
 8005cea:	460e      	mov	r6, r1
 8005cec:	4619      	mov	r1, r3
 8005cee:	462b      	mov	r3, r5
 8005cf0:	bfbb      	ittet	lt
 8005cf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8005cf6:	461d      	movlt	r5, r3
 8005cf8:	2300      	movge	r3, #0
 8005cfa:	232d      	movlt	r3, #45	; 0x2d
 8005cfc:	700b      	strb	r3, [r1, #0]
 8005cfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005d00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8005d04:	4691      	mov	r9, r2
 8005d06:	f023 0820 	bic.w	r8, r3, #32
 8005d0a:	bfbc      	itt	lt
 8005d0c:	4622      	movlt	r2, r4
 8005d0e:	4614      	movlt	r4, r2
 8005d10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d14:	d005      	beq.n	8005d22 <__cvt+0x42>
 8005d16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005d1a:	d100      	bne.n	8005d1e <__cvt+0x3e>
 8005d1c:	3601      	adds	r6, #1
 8005d1e:	2102      	movs	r1, #2
 8005d20:	e000      	b.n	8005d24 <__cvt+0x44>
 8005d22:	2103      	movs	r1, #3
 8005d24:	ab03      	add	r3, sp, #12
 8005d26:	9301      	str	r3, [sp, #4]
 8005d28:	ab02      	add	r3, sp, #8
 8005d2a:	9300      	str	r3, [sp, #0]
 8005d2c:	ec45 4b10 	vmov	d0, r4, r5
 8005d30:	4653      	mov	r3, sl
 8005d32:	4632      	mov	r2, r6
 8005d34:	f000 ffe4 	bl	8006d00 <_dtoa_r>
 8005d38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005d3c:	4607      	mov	r7, r0
 8005d3e:	d102      	bne.n	8005d46 <__cvt+0x66>
 8005d40:	f019 0f01 	tst.w	r9, #1
 8005d44:	d022      	beq.n	8005d8c <__cvt+0xac>
 8005d46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005d4a:	eb07 0906 	add.w	r9, r7, r6
 8005d4e:	d110      	bne.n	8005d72 <__cvt+0x92>
 8005d50:	783b      	ldrb	r3, [r7, #0]
 8005d52:	2b30      	cmp	r3, #48	; 0x30
 8005d54:	d10a      	bne.n	8005d6c <__cvt+0x8c>
 8005d56:	2200      	movs	r2, #0
 8005d58:	2300      	movs	r3, #0
 8005d5a:	4620      	mov	r0, r4
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa fecb 	bl	8000af8 <__aeabi_dcmpeq>
 8005d62:	b918      	cbnz	r0, 8005d6c <__cvt+0x8c>
 8005d64:	f1c6 0601 	rsb	r6, r6, #1
 8005d68:	f8ca 6000 	str.w	r6, [sl]
 8005d6c:	f8da 3000 	ldr.w	r3, [sl]
 8005d70:	4499      	add	r9, r3
 8005d72:	2200      	movs	r2, #0
 8005d74:	2300      	movs	r3, #0
 8005d76:	4620      	mov	r0, r4
 8005d78:	4629      	mov	r1, r5
 8005d7a:	f7fa febd 	bl	8000af8 <__aeabi_dcmpeq>
 8005d7e:	b108      	cbz	r0, 8005d84 <__cvt+0xa4>
 8005d80:	f8cd 900c 	str.w	r9, [sp, #12]
 8005d84:	2230      	movs	r2, #48	; 0x30
 8005d86:	9b03      	ldr	r3, [sp, #12]
 8005d88:	454b      	cmp	r3, r9
 8005d8a:	d307      	bcc.n	8005d9c <__cvt+0xbc>
 8005d8c:	9b03      	ldr	r3, [sp, #12]
 8005d8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d90:	1bdb      	subs	r3, r3, r7
 8005d92:	4638      	mov	r0, r7
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	b004      	add	sp, #16
 8005d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d9c:	1c59      	adds	r1, r3, #1
 8005d9e:	9103      	str	r1, [sp, #12]
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	e7f0      	b.n	8005d86 <__cvt+0xa6>

08005da4 <__exponent>:
 8005da4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005da6:	4603      	mov	r3, r0
 8005da8:	2900      	cmp	r1, #0
 8005daa:	bfb8      	it	lt
 8005dac:	4249      	neglt	r1, r1
 8005dae:	f803 2b02 	strb.w	r2, [r3], #2
 8005db2:	bfb4      	ite	lt
 8005db4:	222d      	movlt	r2, #45	; 0x2d
 8005db6:	222b      	movge	r2, #43	; 0x2b
 8005db8:	2909      	cmp	r1, #9
 8005dba:	7042      	strb	r2, [r0, #1]
 8005dbc:	dd2a      	ble.n	8005e14 <__exponent+0x70>
 8005dbe:	f10d 0207 	add.w	r2, sp, #7
 8005dc2:	4617      	mov	r7, r2
 8005dc4:	260a      	movs	r6, #10
 8005dc6:	4694      	mov	ip, r2
 8005dc8:	fb91 f5f6 	sdiv	r5, r1, r6
 8005dcc:	fb06 1415 	mls	r4, r6, r5, r1
 8005dd0:	3430      	adds	r4, #48	; 0x30
 8005dd2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005dd6:	460c      	mov	r4, r1
 8005dd8:	2c63      	cmp	r4, #99	; 0x63
 8005dda:	f102 32ff 	add.w	r2, r2, #4294967295
 8005dde:	4629      	mov	r1, r5
 8005de0:	dcf1      	bgt.n	8005dc6 <__exponent+0x22>
 8005de2:	3130      	adds	r1, #48	; 0x30
 8005de4:	f1ac 0402 	sub.w	r4, ip, #2
 8005de8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005dec:	1c41      	adds	r1, r0, #1
 8005dee:	4622      	mov	r2, r4
 8005df0:	42ba      	cmp	r2, r7
 8005df2:	d30a      	bcc.n	8005e0a <__exponent+0x66>
 8005df4:	f10d 0209 	add.w	r2, sp, #9
 8005df8:	eba2 020c 	sub.w	r2, r2, ip
 8005dfc:	42bc      	cmp	r4, r7
 8005dfe:	bf88      	it	hi
 8005e00:	2200      	movhi	r2, #0
 8005e02:	4413      	add	r3, r2
 8005e04:	1a18      	subs	r0, r3, r0
 8005e06:	b003      	add	sp, #12
 8005e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e0a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005e0e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005e12:	e7ed      	b.n	8005df0 <__exponent+0x4c>
 8005e14:	2330      	movs	r3, #48	; 0x30
 8005e16:	3130      	adds	r1, #48	; 0x30
 8005e18:	7083      	strb	r3, [r0, #2]
 8005e1a:	70c1      	strb	r1, [r0, #3]
 8005e1c:	1d03      	adds	r3, r0, #4
 8005e1e:	e7f1      	b.n	8005e04 <__exponent+0x60>

08005e20 <_printf_float>:
 8005e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e24:	ed2d 8b02 	vpush	{d8}
 8005e28:	b08d      	sub	sp, #52	; 0x34
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005e30:	4616      	mov	r6, r2
 8005e32:	461f      	mov	r7, r3
 8005e34:	4605      	mov	r5, r0
 8005e36:	f000 fe45 	bl	8006ac4 <_localeconv_r>
 8005e3a:	f8d0 a000 	ldr.w	sl, [r0]
 8005e3e:	4650      	mov	r0, sl
 8005e40:	f7fa fa2e 	bl	80002a0 <strlen>
 8005e44:	2300      	movs	r3, #0
 8005e46:	930a      	str	r3, [sp, #40]	; 0x28
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	9305      	str	r3, [sp, #20]
 8005e4c:	f8d8 3000 	ldr.w	r3, [r8]
 8005e50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8005e54:	3307      	adds	r3, #7
 8005e56:	f023 0307 	bic.w	r3, r3, #7
 8005e5a:	f103 0208 	add.w	r2, r3, #8
 8005e5e:	f8c8 2000 	str.w	r2, [r8]
 8005e62:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e66:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8005e6a:	9307      	str	r3, [sp, #28]
 8005e6c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005e70:	ee08 0a10 	vmov	s16, r0
 8005e74:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8005e78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e7c:	4b9e      	ldr	r3, [pc, #632]	; (80060f8 <_printf_float+0x2d8>)
 8005e7e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e82:	f7fa fe6b 	bl	8000b5c <__aeabi_dcmpun>
 8005e86:	bb88      	cbnz	r0, 8005eec <_printf_float+0xcc>
 8005e88:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e8c:	4b9a      	ldr	r3, [pc, #616]	; (80060f8 <_printf_float+0x2d8>)
 8005e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8005e92:	f7fa fe45 	bl	8000b20 <__aeabi_dcmple>
 8005e96:	bb48      	cbnz	r0, 8005eec <_printf_float+0xcc>
 8005e98:	2200      	movs	r2, #0
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	4649      	mov	r1, r9
 8005ea0:	f7fa fe34 	bl	8000b0c <__aeabi_dcmplt>
 8005ea4:	b110      	cbz	r0, 8005eac <_printf_float+0x8c>
 8005ea6:	232d      	movs	r3, #45	; 0x2d
 8005ea8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005eac:	4a93      	ldr	r2, [pc, #588]	; (80060fc <_printf_float+0x2dc>)
 8005eae:	4b94      	ldr	r3, [pc, #592]	; (8006100 <_printf_float+0x2e0>)
 8005eb0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005eb4:	bf94      	ite	ls
 8005eb6:	4690      	movls	r8, r2
 8005eb8:	4698      	movhi	r8, r3
 8005eba:	2303      	movs	r3, #3
 8005ebc:	6123      	str	r3, [r4, #16]
 8005ebe:	9b05      	ldr	r3, [sp, #20]
 8005ec0:	f023 0304 	bic.w	r3, r3, #4
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	f04f 0900 	mov.w	r9, #0
 8005eca:	9700      	str	r7, [sp, #0]
 8005ecc:	4633      	mov	r3, r6
 8005ece:	aa0b      	add	r2, sp, #44	; 0x2c
 8005ed0:	4621      	mov	r1, r4
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 f9da 	bl	800628c <_printf_common>
 8005ed8:	3001      	adds	r0, #1
 8005eda:	f040 8090 	bne.w	8005ffe <_printf_float+0x1de>
 8005ede:	f04f 30ff 	mov.w	r0, #4294967295
 8005ee2:	b00d      	add	sp, #52	; 0x34
 8005ee4:	ecbd 8b02 	vpop	{d8}
 8005ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005eec:	4642      	mov	r2, r8
 8005eee:	464b      	mov	r3, r9
 8005ef0:	4640      	mov	r0, r8
 8005ef2:	4649      	mov	r1, r9
 8005ef4:	f7fa fe32 	bl	8000b5c <__aeabi_dcmpun>
 8005ef8:	b140      	cbz	r0, 8005f0c <_printf_float+0xec>
 8005efa:	464b      	mov	r3, r9
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	bfbc      	itt	lt
 8005f00:	232d      	movlt	r3, #45	; 0x2d
 8005f02:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8005f06:	4a7f      	ldr	r2, [pc, #508]	; (8006104 <_printf_float+0x2e4>)
 8005f08:	4b7f      	ldr	r3, [pc, #508]	; (8006108 <_printf_float+0x2e8>)
 8005f0a:	e7d1      	b.n	8005eb0 <_printf_float+0x90>
 8005f0c:	6863      	ldr	r3, [r4, #4]
 8005f0e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005f12:	9206      	str	r2, [sp, #24]
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	d13f      	bne.n	8005f98 <_printf_float+0x178>
 8005f18:	2306      	movs	r3, #6
 8005f1a:	6063      	str	r3, [r4, #4]
 8005f1c:	9b05      	ldr	r3, [sp, #20]
 8005f1e:	6861      	ldr	r1, [r4, #4]
 8005f20:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005f24:	2300      	movs	r3, #0
 8005f26:	9303      	str	r3, [sp, #12]
 8005f28:	ab0a      	add	r3, sp, #40	; 0x28
 8005f2a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8005f2e:	ab09      	add	r3, sp, #36	; 0x24
 8005f30:	ec49 8b10 	vmov	d0, r8, r9
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	6022      	str	r2, [r4, #0]
 8005f38:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005f3c:	4628      	mov	r0, r5
 8005f3e:	f7ff fecf 	bl	8005ce0 <__cvt>
 8005f42:	9b06      	ldr	r3, [sp, #24]
 8005f44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005f46:	2b47      	cmp	r3, #71	; 0x47
 8005f48:	4680      	mov	r8, r0
 8005f4a:	d108      	bne.n	8005f5e <_printf_float+0x13e>
 8005f4c:	1cc8      	adds	r0, r1, #3
 8005f4e:	db02      	blt.n	8005f56 <_printf_float+0x136>
 8005f50:	6863      	ldr	r3, [r4, #4]
 8005f52:	4299      	cmp	r1, r3
 8005f54:	dd41      	ble.n	8005fda <_printf_float+0x1ba>
 8005f56:	f1ab 0302 	sub.w	r3, fp, #2
 8005f5a:	fa5f fb83 	uxtb.w	fp, r3
 8005f5e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005f62:	d820      	bhi.n	8005fa6 <_printf_float+0x186>
 8005f64:	3901      	subs	r1, #1
 8005f66:	465a      	mov	r2, fp
 8005f68:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005f6c:	9109      	str	r1, [sp, #36]	; 0x24
 8005f6e:	f7ff ff19 	bl	8005da4 <__exponent>
 8005f72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005f74:	1813      	adds	r3, r2, r0
 8005f76:	2a01      	cmp	r2, #1
 8005f78:	4681      	mov	r9, r0
 8005f7a:	6123      	str	r3, [r4, #16]
 8005f7c:	dc02      	bgt.n	8005f84 <_printf_float+0x164>
 8005f7e:	6822      	ldr	r2, [r4, #0]
 8005f80:	07d2      	lsls	r2, r2, #31
 8005f82:	d501      	bpl.n	8005f88 <_printf_float+0x168>
 8005f84:	3301      	adds	r3, #1
 8005f86:	6123      	str	r3, [r4, #16]
 8005f88:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d09c      	beq.n	8005eca <_printf_float+0xaa>
 8005f90:	232d      	movs	r3, #45	; 0x2d
 8005f92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f96:	e798      	b.n	8005eca <_printf_float+0xaa>
 8005f98:	9a06      	ldr	r2, [sp, #24]
 8005f9a:	2a47      	cmp	r2, #71	; 0x47
 8005f9c:	d1be      	bne.n	8005f1c <_printf_float+0xfc>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d1bc      	bne.n	8005f1c <_printf_float+0xfc>
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e7b9      	b.n	8005f1a <_printf_float+0xfa>
 8005fa6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005faa:	d118      	bne.n	8005fde <_printf_float+0x1be>
 8005fac:	2900      	cmp	r1, #0
 8005fae:	6863      	ldr	r3, [r4, #4]
 8005fb0:	dd0b      	ble.n	8005fca <_printf_float+0x1aa>
 8005fb2:	6121      	str	r1, [r4, #16]
 8005fb4:	b913      	cbnz	r3, 8005fbc <_printf_float+0x19c>
 8005fb6:	6822      	ldr	r2, [r4, #0]
 8005fb8:	07d0      	lsls	r0, r2, #31
 8005fba:	d502      	bpl.n	8005fc2 <_printf_float+0x1a2>
 8005fbc:	3301      	adds	r3, #1
 8005fbe:	440b      	add	r3, r1
 8005fc0:	6123      	str	r3, [r4, #16]
 8005fc2:	65a1      	str	r1, [r4, #88]	; 0x58
 8005fc4:	f04f 0900 	mov.w	r9, #0
 8005fc8:	e7de      	b.n	8005f88 <_printf_float+0x168>
 8005fca:	b913      	cbnz	r3, 8005fd2 <_printf_float+0x1b2>
 8005fcc:	6822      	ldr	r2, [r4, #0]
 8005fce:	07d2      	lsls	r2, r2, #31
 8005fd0:	d501      	bpl.n	8005fd6 <_printf_float+0x1b6>
 8005fd2:	3302      	adds	r3, #2
 8005fd4:	e7f4      	b.n	8005fc0 <_printf_float+0x1a0>
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	e7f2      	b.n	8005fc0 <_printf_float+0x1a0>
 8005fda:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005fde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe0:	4299      	cmp	r1, r3
 8005fe2:	db05      	blt.n	8005ff0 <_printf_float+0x1d0>
 8005fe4:	6823      	ldr	r3, [r4, #0]
 8005fe6:	6121      	str	r1, [r4, #16]
 8005fe8:	07d8      	lsls	r0, r3, #31
 8005fea:	d5ea      	bpl.n	8005fc2 <_printf_float+0x1a2>
 8005fec:	1c4b      	adds	r3, r1, #1
 8005fee:	e7e7      	b.n	8005fc0 <_printf_float+0x1a0>
 8005ff0:	2900      	cmp	r1, #0
 8005ff2:	bfd4      	ite	le
 8005ff4:	f1c1 0202 	rsble	r2, r1, #2
 8005ff8:	2201      	movgt	r2, #1
 8005ffa:	4413      	add	r3, r2
 8005ffc:	e7e0      	b.n	8005fc0 <_printf_float+0x1a0>
 8005ffe:	6823      	ldr	r3, [r4, #0]
 8006000:	055a      	lsls	r2, r3, #21
 8006002:	d407      	bmi.n	8006014 <_printf_float+0x1f4>
 8006004:	6923      	ldr	r3, [r4, #16]
 8006006:	4642      	mov	r2, r8
 8006008:	4631      	mov	r1, r6
 800600a:	4628      	mov	r0, r5
 800600c:	47b8      	blx	r7
 800600e:	3001      	adds	r0, #1
 8006010:	d12c      	bne.n	800606c <_printf_float+0x24c>
 8006012:	e764      	b.n	8005ede <_printf_float+0xbe>
 8006014:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006018:	f240 80e0 	bls.w	80061dc <_printf_float+0x3bc>
 800601c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006020:	2200      	movs	r2, #0
 8006022:	2300      	movs	r3, #0
 8006024:	f7fa fd68 	bl	8000af8 <__aeabi_dcmpeq>
 8006028:	2800      	cmp	r0, #0
 800602a:	d034      	beq.n	8006096 <_printf_float+0x276>
 800602c:	4a37      	ldr	r2, [pc, #220]	; (800610c <_printf_float+0x2ec>)
 800602e:	2301      	movs	r3, #1
 8006030:	4631      	mov	r1, r6
 8006032:	4628      	mov	r0, r5
 8006034:	47b8      	blx	r7
 8006036:	3001      	adds	r0, #1
 8006038:	f43f af51 	beq.w	8005ede <_printf_float+0xbe>
 800603c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006040:	429a      	cmp	r2, r3
 8006042:	db02      	blt.n	800604a <_printf_float+0x22a>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	07d8      	lsls	r0, r3, #31
 8006048:	d510      	bpl.n	800606c <_printf_float+0x24c>
 800604a:	ee18 3a10 	vmov	r3, s16
 800604e:	4652      	mov	r2, sl
 8006050:	4631      	mov	r1, r6
 8006052:	4628      	mov	r0, r5
 8006054:	47b8      	blx	r7
 8006056:	3001      	adds	r0, #1
 8006058:	f43f af41 	beq.w	8005ede <_printf_float+0xbe>
 800605c:	f04f 0800 	mov.w	r8, #0
 8006060:	f104 091a 	add.w	r9, r4, #26
 8006064:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006066:	3b01      	subs	r3, #1
 8006068:	4543      	cmp	r3, r8
 800606a:	dc09      	bgt.n	8006080 <_printf_float+0x260>
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	079b      	lsls	r3, r3, #30
 8006070:	f100 8107 	bmi.w	8006282 <_printf_float+0x462>
 8006074:	68e0      	ldr	r0, [r4, #12]
 8006076:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006078:	4298      	cmp	r0, r3
 800607a:	bfb8      	it	lt
 800607c:	4618      	movlt	r0, r3
 800607e:	e730      	b.n	8005ee2 <_printf_float+0xc2>
 8006080:	2301      	movs	r3, #1
 8006082:	464a      	mov	r2, r9
 8006084:	4631      	mov	r1, r6
 8006086:	4628      	mov	r0, r5
 8006088:	47b8      	blx	r7
 800608a:	3001      	adds	r0, #1
 800608c:	f43f af27 	beq.w	8005ede <_printf_float+0xbe>
 8006090:	f108 0801 	add.w	r8, r8, #1
 8006094:	e7e6      	b.n	8006064 <_printf_float+0x244>
 8006096:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006098:	2b00      	cmp	r3, #0
 800609a:	dc39      	bgt.n	8006110 <_printf_float+0x2f0>
 800609c:	4a1b      	ldr	r2, [pc, #108]	; (800610c <_printf_float+0x2ec>)
 800609e:	2301      	movs	r3, #1
 80060a0:	4631      	mov	r1, r6
 80060a2:	4628      	mov	r0, r5
 80060a4:	47b8      	blx	r7
 80060a6:	3001      	adds	r0, #1
 80060a8:	f43f af19 	beq.w	8005ede <_printf_float+0xbe>
 80060ac:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80060b0:	4313      	orrs	r3, r2
 80060b2:	d102      	bne.n	80060ba <_printf_float+0x29a>
 80060b4:	6823      	ldr	r3, [r4, #0]
 80060b6:	07d9      	lsls	r1, r3, #31
 80060b8:	d5d8      	bpl.n	800606c <_printf_float+0x24c>
 80060ba:	ee18 3a10 	vmov	r3, s16
 80060be:	4652      	mov	r2, sl
 80060c0:	4631      	mov	r1, r6
 80060c2:	4628      	mov	r0, r5
 80060c4:	47b8      	blx	r7
 80060c6:	3001      	adds	r0, #1
 80060c8:	f43f af09 	beq.w	8005ede <_printf_float+0xbe>
 80060cc:	f04f 0900 	mov.w	r9, #0
 80060d0:	f104 0a1a 	add.w	sl, r4, #26
 80060d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060d6:	425b      	negs	r3, r3
 80060d8:	454b      	cmp	r3, r9
 80060da:	dc01      	bgt.n	80060e0 <_printf_float+0x2c0>
 80060dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80060de:	e792      	b.n	8006006 <_printf_float+0x1e6>
 80060e0:	2301      	movs	r3, #1
 80060e2:	4652      	mov	r2, sl
 80060e4:	4631      	mov	r1, r6
 80060e6:	4628      	mov	r0, r5
 80060e8:	47b8      	blx	r7
 80060ea:	3001      	adds	r0, #1
 80060ec:	f43f aef7 	beq.w	8005ede <_printf_float+0xbe>
 80060f0:	f109 0901 	add.w	r9, r9, #1
 80060f4:	e7ee      	b.n	80060d4 <_printf_float+0x2b4>
 80060f6:	bf00      	nop
 80060f8:	7fefffff 	.word	0x7fefffff
 80060fc:	08008e99 	.word	0x08008e99
 8006100:	08008e9d 	.word	0x08008e9d
 8006104:	08008ea1 	.word	0x08008ea1
 8006108:	08008ea5 	.word	0x08008ea5
 800610c:	08008ea9 	.word	0x08008ea9
 8006110:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006112:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006114:	429a      	cmp	r2, r3
 8006116:	bfa8      	it	ge
 8006118:	461a      	movge	r2, r3
 800611a:	2a00      	cmp	r2, #0
 800611c:	4691      	mov	r9, r2
 800611e:	dc37      	bgt.n	8006190 <_printf_float+0x370>
 8006120:	f04f 0b00 	mov.w	fp, #0
 8006124:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006128:	f104 021a 	add.w	r2, r4, #26
 800612c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800612e:	9305      	str	r3, [sp, #20]
 8006130:	eba3 0309 	sub.w	r3, r3, r9
 8006134:	455b      	cmp	r3, fp
 8006136:	dc33      	bgt.n	80061a0 <_printf_float+0x380>
 8006138:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800613c:	429a      	cmp	r2, r3
 800613e:	db3b      	blt.n	80061b8 <_printf_float+0x398>
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	07da      	lsls	r2, r3, #31
 8006144:	d438      	bmi.n	80061b8 <_printf_float+0x398>
 8006146:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800614a:	eba2 0903 	sub.w	r9, r2, r3
 800614e:	9b05      	ldr	r3, [sp, #20]
 8006150:	1ad2      	subs	r2, r2, r3
 8006152:	4591      	cmp	r9, r2
 8006154:	bfa8      	it	ge
 8006156:	4691      	movge	r9, r2
 8006158:	f1b9 0f00 	cmp.w	r9, #0
 800615c:	dc35      	bgt.n	80061ca <_printf_float+0x3aa>
 800615e:	f04f 0800 	mov.w	r8, #0
 8006162:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006166:	f104 0a1a 	add.w	sl, r4, #26
 800616a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	eba3 0309 	sub.w	r3, r3, r9
 8006174:	4543      	cmp	r3, r8
 8006176:	f77f af79 	ble.w	800606c <_printf_float+0x24c>
 800617a:	2301      	movs	r3, #1
 800617c:	4652      	mov	r2, sl
 800617e:	4631      	mov	r1, r6
 8006180:	4628      	mov	r0, r5
 8006182:	47b8      	blx	r7
 8006184:	3001      	adds	r0, #1
 8006186:	f43f aeaa 	beq.w	8005ede <_printf_float+0xbe>
 800618a:	f108 0801 	add.w	r8, r8, #1
 800618e:	e7ec      	b.n	800616a <_printf_float+0x34a>
 8006190:	4613      	mov	r3, r2
 8006192:	4631      	mov	r1, r6
 8006194:	4642      	mov	r2, r8
 8006196:	4628      	mov	r0, r5
 8006198:	47b8      	blx	r7
 800619a:	3001      	adds	r0, #1
 800619c:	d1c0      	bne.n	8006120 <_printf_float+0x300>
 800619e:	e69e      	b.n	8005ede <_printf_float+0xbe>
 80061a0:	2301      	movs	r3, #1
 80061a2:	4631      	mov	r1, r6
 80061a4:	4628      	mov	r0, r5
 80061a6:	9205      	str	r2, [sp, #20]
 80061a8:	47b8      	blx	r7
 80061aa:	3001      	adds	r0, #1
 80061ac:	f43f ae97 	beq.w	8005ede <_printf_float+0xbe>
 80061b0:	9a05      	ldr	r2, [sp, #20]
 80061b2:	f10b 0b01 	add.w	fp, fp, #1
 80061b6:	e7b9      	b.n	800612c <_printf_float+0x30c>
 80061b8:	ee18 3a10 	vmov	r3, s16
 80061bc:	4652      	mov	r2, sl
 80061be:	4631      	mov	r1, r6
 80061c0:	4628      	mov	r0, r5
 80061c2:	47b8      	blx	r7
 80061c4:	3001      	adds	r0, #1
 80061c6:	d1be      	bne.n	8006146 <_printf_float+0x326>
 80061c8:	e689      	b.n	8005ede <_printf_float+0xbe>
 80061ca:	9a05      	ldr	r2, [sp, #20]
 80061cc:	464b      	mov	r3, r9
 80061ce:	4442      	add	r2, r8
 80061d0:	4631      	mov	r1, r6
 80061d2:	4628      	mov	r0, r5
 80061d4:	47b8      	blx	r7
 80061d6:	3001      	adds	r0, #1
 80061d8:	d1c1      	bne.n	800615e <_printf_float+0x33e>
 80061da:	e680      	b.n	8005ede <_printf_float+0xbe>
 80061dc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80061de:	2a01      	cmp	r2, #1
 80061e0:	dc01      	bgt.n	80061e6 <_printf_float+0x3c6>
 80061e2:	07db      	lsls	r3, r3, #31
 80061e4:	d53a      	bpl.n	800625c <_printf_float+0x43c>
 80061e6:	2301      	movs	r3, #1
 80061e8:	4642      	mov	r2, r8
 80061ea:	4631      	mov	r1, r6
 80061ec:	4628      	mov	r0, r5
 80061ee:	47b8      	blx	r7
 80061f0:	3001      	adds	r0, #1
 80061f2:	f43f ae74 	beq.w	8005ede <_printf_float+0xbe>
 80061f6:	ee18 3a10 	vmov	r3, s16
 80061fa:	4652      	mov	r2, sl
 80061fc:	4631      	mov	r1, r6
 80061fe:	4628      	mov	r0, r5
 8006200:	47b8      	blx	r7
 8006202:	3001      	adds	r0, #1
 8006204:	f43f ae6b 	beq.w	8005ede <_printf_float+0xbe>
 8006208:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800620c:	2200      	movs	r2, #0
 800620e:	2300      	movs	r3, #0
 8006210:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8006214:	f7fa fc70 	bl	8000af8 <__aeabi_dcmpeq>
 8006218:	b9d8      	cbnz	r0, 8006252 <_printf_float+0x432>
 800621a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800621e:	f108 0201 	add.w	r2, r8, #1
 8006222:	4631      	mov	r1, r6
 8006224:	4628      	mov	r0, r5
 8006226:	47b8      	blx	r7
 8006228:	3001      	adds	r0, #1
 800622a:	d10e      	bne.n	800624a <_printf_float+0x42a>
 800622c:	e657      	b.n	8005ede <_printf_float+0xbe>
 800622e:	2301      	movs	r3, #1
 8006230:	4652      	mov	r2, sl
 8006232:	4631      	mov	r1, r6
 8006234:	4628      	mov	r0, r5
 8006236:	47b8      	blx	r7
 8006238:	3001      	adds	r0, #1
 800623a:	f43f ae50 	beq.w	8005ede <_printf_float+0xbe>
 800623e:	f108 0801 	add.w	r8, r8, #1
 8006242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006244:	3b01      	subs	r3, #1
 8006246:	4543      	cmp	r3, r8
 8006248:	dcf1      	bgt.n	800622e <_printf_float+0x40e>
 800624a:	464b      	mov	r3, r9
 800624c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006250:	e6da      	b.n	8006008 <_printf_float+0x1e8>
 8006252:	f04f 0800 	mov.w	r8, #0
 8006256:	f104 0a1a 	add.w	sl, r4, #26
 800625a:	e7f2      	b.n	8006242 <_printf_float+0x422>
 800625c:	2301      	movs	r3, #1
 800625e:	4642      	mov	r2, r8
 8006260:	e7df      	b.n	8006222 <_printf_float+0x402>
 8006262:	2301      	movs	r3, #1
 8006264:	464a      	mov	r2, r9
 8006266:	4631      	mov	r1, r6
 8006268:	4628      	mov	r0, r5
 800626a:	47b8      	blx	r7
 800626c:	3001      	adds	r0, #1
 800626e:	f43f ae36 	beq.w	8005ede <_printf_float+0xbe>
 8006272:	f108 0801 	add.w	r8, r8, #1
 8006276:	68e3      	ldr	r3, [r4, #12]
 8006278:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800627a:	1a5b      	subs	r3, r3, r1
 800627c:	4543      	cmp	r3, r8
 800627e:	dcf0      	bgt.n	8006262 <_printf_float+0x442>
 8006280:	e6f8      	b.n	8006074 <_printf_float+0x254>
 8006282:	f04f 0800 	mov.w	r8, #0
 8006286:	f104 0919 	add.w	r9, r4, #25
 800628a:	e7f4      	b.n	8006276 <_printf_float+0x456>

0800628c <_printf_common>:
 800628c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006290:	4616      	mov	r6, r2
 8006292:	4699      	mov	r9, r3
 8006294:	688a      	ldr	r2, [r1, #8]
 8006296:	690b      	ldr	r3, [r1, #16]
 8006298:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800629c:	4293      	cmp	r3, r2
 800629e:	bfb8      	it	lt
 80062a0:	4613      	movlt	r3, r2
 80062a2:	6033      	str	r3, [r6, #0]
 80062a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80062a8:	4607      	mov	r7, r0
 80062aa:	460c      	mov	r4, r1
 80062ac:	b10a      	cbz	r2, 80062b2 <_printf_common+0x26>
 80062ae:	3301      	adds	r3, #1
 80062b0:	6033      	str	r3, [r6, #0]
 80062b2:	6823      	ldr	r3, [r4, #0]
 80062b4:	0699      	lsls	r1, r3, #26
 80062b6:	bf42      	ittt	mi
 80062b8:	6833      	ldrmi	r3, [r6, #0]
 80062ba:	3302      	addmi	r3, #2
 80062bc:	6033      	strmi	r3, [r6, #0]
 80062be:	6825      	ldr	r5, [r4, #0]
 80062c0:	f015 0506 	ands.w	r5, r5, #6
 80062c4:	d106      	bne.n	80062d4 <_printf_common+0x48>
 80062c6:	f104 0a19 	add.w	sl, r4, #25
 80062ca:	68e3      	ldr	r3, [r4, #12]
 80062cc:	6832      	ldr	r2, [r6, #0]
 80062ce:	1a9b      	subs	r3, r3, r2
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc26      	bgt.n	8006322 <_printf_common+0x96>
 80062d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80062d8:	1e13      	subs	r3, r2, #0
 80062da:	6822      	ldr	r2, [r4, #0]
 80062dc:	bf18      	it	ne
 80062de:	2301      	movne	r3, #1
 80062e0:	0692      	lsls	r2, r2, #26
 80062e2:	d42b      	bmi.n	800633c <_printf_common+0xb0>
 80062e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80062e8:	4649      	mov	r1, r9
 80062ea:	4638      	mov	r0, r7
 80062ec:	47c0      	blx	r8
 80062ee:	3001      	adds	r0, #1
 80062f0:	d01e      	beq.n	8006330 <_printf_common+0xa4>
 80062f2:	6823      	ldr	r3, [r4, #0]
 80062f4:	6922      	ldr	r2, [r4, #16]
 80062f6:	f003 0306 	and.w	r3, r3, #6
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	bf02      	ittt	eq
 80062fe:	68e5      	ldreq	r5, [r4, #12]
 8006300:	6833      	ldreq	r3, [r6, #0]
 8006302:	1aed      	subeq	r5, r5, r3
 8006304:	68a3      	ldr	r3, [r4, #8]
 8006306:	bf0c      	ite	eq
 8006308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800630c:	2500      	movne	r5, #0
 800630e:	4293      	cmp	r3, r2
 8006310:	bfc4      	itt	gt
 8006312:	1a9b      	subgt	r3, r3, r2
 8006314:	18ed      	addgt	r5, r5, r3
 8006316:	2600      	movs	r6, #0
 8006318:	341a      	adds	r4, #26
 800631a:	42b5      	cmp	r5, r6
 800631c:	d11a      	bne.n	8006354 <_printf_common+0xc8>
 800631e:	2000      	movs	r0, #0
 8006320:	e008      	b.n	8006334 <_printf_common+0xa8>
 8006322:	2301      	movs	r3, #1
 8006324:	4652      	mov	r2, sl
 8006326:	4649      	mov	r1, r9
 8006328:	4638      	mov	r0, r7
 800632a:	47c0      	blx	r8
 800632c:	3001      	adds	r0, #1
 800632e:	d103      	bne.n	8006338 <_printf_common+0xac>
 8006330:	f04f 30ff 	mov.w	r0, #4294967295
 8006334:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006338:	3501      	adds	r5, #1
 800633a:	e7c6      	b.n	80062ca <_printf_common+0x3e>
 800633c:	18e1      	adds	r1, r4, r3
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	2030      	movs	r0, #48	; 0x30
 8006342:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006346:	4422      	add	r2, r4
 8006348:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800634c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006350:	3302      	adds	r3, #2
 8006352:	e7c7      	b.n	80062e4 <_printf_common+0x58>
 8006354:	2301      	movs	r3, #1
 8006356:	4622      	mov	r2, r4
 8006358:	4649      	mov	r1, r9
 800635a:	4638      	mov	r0, r7
 800635c:	47c0      	blx	r8
 800635e:	3001      	adds	r0, #1
 8006360:	d0e6      	beq.n	8006330 <_printf_common+0xa4>
 8006362:	3601      	adds	r6, #1
 8006364:	e7d9      	b.n	800631a <_printf_common+0x8e>
	...

08006368 <_printf_i>:
 8006368:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800636c:	7e0f      	ldrb	r7, [r1, #24]
 800636e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006370:	2f78      	cmp	r7, #120	; 0x78
 8006372:	4691      	mov	r9, r2
 8006374:	4680      	mov	r8, r0
 8006376:	460c      	mov	r4, r1
 8006378:	469a      	mov	sl, r3
 800637a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800637e:	d807      	bhi.n	8006390 <_printf_i+0x28>
 8006380:	2f62      	cmp	r7, #98	; 0x62
 8006382:	d80a      	bhi.n	800639a <_printf_i+0x32>
 8006384:	2f00      	cmp	r7, #0
 8006386:	f000 80d4 	beq.w	8006532 <_printf_i+0x1ca>
 800638a:	2f58      	cmp	r7, #88	; 0x58
 800638c:	f000 80c0 	beq.w	8006510 <_printf_i+0x1a8>
 8006390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006394:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006398:	e03a      	b.n	8006410 <_printf_i+0xa8>
 800639a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800639e:	2b15      	cmp	r3, #21
 80063a0:	d8f6      	bhi.n	8006390 <_printf_i+0x28>
 80063a2:	a101      	add	r1, pc, #4	; (adr r1, 80063a8 <_printf_i+0x40>)
 80063a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80063a8:	08006401 	.word	0x08006401
 80063ac:	08006415 	.word	0x08006415
 80063b0:	08006391 	.word	0x08006391
 80063b4:	08006391 	.word	0x08006391
 80063b8:	08006391 	.word	0x08006391
 80063bc:	08006391 	.word	0x08006391
 80063c0:	08006415 	.word	0x08006415
 80063c4:	08006391 	.word	0x08006391
 80063c8:	08006391 	.word	0x08006391
 80063cc:	08006391 	.word	0x08006391
 80063d0:	08006391 	.word	0x08006391
 80063d4:	08006519 	.word	0x08006519
 80063d8:	08006441 	.word	0x08006441
 80063dc:	080064d3 	.word	0x080064d3
 80063e0:	08006391 	.word	0x08006391
 80063e4:	08006391 	.word	0x08006391
 80063e8:	0800653b 	.word	0x0800653b
 80063ec:	08006391 	.word	0x08006391
 80063f0:	08006441 	.word	0x08006441
 80063f4:	08006391 	.word	0x08006391
 80063f8:	08006391 	.word	0x08006391
 80063fc:	080064db 	.word	0x080064db
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	1d1a      	adds	r2, r3, #4
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	602a      	str	r2, [r5, #0]
 8006408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800640c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006410:	2301      	movs	r3, #1
 8006412:	e09f      	b.n	8006554 <_printf_i+0x1ec>
 8006414:	6820      	ldr	r0, [r4, #0]
 8006416:	682b      	ldr	r3, [r5, #0]
 8006418:	0607      	lsls	r7, r0, #24
 800641a:	f103 0104 	add.w	r1, r3, #4
 800641e:	6029      	str	r1, [r5, #0]
 8006420:	d501      	bpl.n	8006426 <_printf_i+0xbe>
 8006422:	681e      	ldr	r6, [r3, #0]
 8006424:	e003      	b.n	800642e <_printf_i+0xc6>
 8006426:	0646      	lsls	r6, r0, #25
 8006428:	d5fb      	bpl.n	8006422 <_printf_i+0xba>
 800642a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800642e:	2e00      	cmp	r6, #0
 8006430:	da03      	bge.n	800643a <_printf_i+0xd2>
 8006432:	232d      	movs	r3, #45	; 0x2d
 8006434:	4276      	negs	r6, r6
 8006436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643a:	485a      	ldr	r0, [pc, #360]	; (80065a4 <_printf_i+0x23c>)
 800643c:	230a      	movs	r3, #10
 800643e:	e012      	b.n	8006466 <_printf_i+0xfe>
 8006440:	682b      	ldr	r3, [r5, #0]
 8006442:	6820      	ldr	r0, [r4, #0]
 8006444:	1d19      	adds	r1, r3, #4
 8006446:	6029      	str	r1, [r5, #0]
 8006448:	0605      	lsls	r5, r0, #24
 800644a:	d501      	bpl.n	8006450 <_printf_i+0xe8>
 800644c:	681e      	ldr	r6, [r3, #0]
 800644e:	e002      	b.n	8006456 <_printf_i+0xee>
 8006450:	0641      	lsls	r1, r0, #25
 8006452:	d5fb      	bpl.n	800644c <_printf_i+0xe4>
 8006454:	881e      	ldrh	r6, [r3, #0]
 8006456:	4853      	ldr	r0, [pc, #332]	; (80065a4 <_printf_i+0x23c>)
 8006458:	2f6f      	cmp	r7, #111	; 0x6f
 800645a:	bf0c      	ite	eq
 800645c:	2308      	moveq	r3, #8
 800645e:	230a      	movne	r3, #10
 8006460:	2100      	movs	r1, #0
 8006462:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006466:	6865      	ldr	r5, [r4, #4]
 8006468:	60a5      	str	r5, [r4, #8]
 800646a:	2d00      	cmp	r5, #0
 800646c:	bfa2      	ittt	ge
 800646e:	6821      	ldrge	r1, [r4, #0]
 8006470:	f021 0104 	bicge.w	r1, r1, #4
 8006474:	6021      	strge	r1, [r4, #0]
 8006476:	b90e      	cbnz	r6, 800647c <_printf_i+0x114>
 8006478:	2d00      	cmp	r5, #0
 800647a:	d04b      	beq.n	8006514 <_printf_i+0x1ac>
 800647c:	4615      	mov	r5, r2
 800647e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006482:	fb03 6711 	mls	r7, r3, r1, r6
 8006486:	5dc7      	ldrb	r7, [r0, r7]
 8006488:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800648c:	4637      	mov	r7, r6
 800648e:	42bb      	cmp	r3, r7
 8006490:	460e      	mov	r6, r1
 8006492:	d9f4      	bls.n	800647e <_printf_i+0x116>
 8006494:	2b08      	cmp	r3, #8
 8006496:	d10b      	bne.n	80064b0 <_printf_i+0x148>
 8006498:	6823      	ldr	r3, [r4, #0]
 800649a:	07de      	lsls	r6, r3, #31
 800649c:	d508      	bpl.n	80064b0 <_printf_i+0x148>
 800649e:	6923      	ldr	r3, [r4, #16]
 80064a0:	6861      	ldr	r1, [r4, #4]
 80064a2:	4299      	cmp	r1, r3
 80064a4:	bfde      	ittt	le
 80064a6:	2330      	movle	r3, #48	; 0x30
 80064a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80064ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80064b0:	1b52      	subs	r2, r2, r5
 80064b2:	6122      	str	r2, [r4, #16]
 80064b4:	f8cd a000 	str.w	sl, [sp]
 80064b8:	464b      	mov	r3, r9
 80064ba:	aa03      	add	r2, sp, #12
 80064bc:	4621      	mov	r1, r4
 80064be:	4640      	mov	r0, r8
 80064c0:	f7ff fee4 	bl	800628c <_printf_common>
 80064c4:	3001      	adds	r0, #1
 80064c6:	d14a      	bne.n	800655e <_printf_i+0x1f6>
 80064c8:	f04f 30ff 	mov.w	r0, #4294967295
 80064cc:	b004      	add	sp, #16
 80064ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d2:	6823      	ldr	r3, [r4, #0]
 80064d4:	f043 0320 	orr.w	r3, r3, #32
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	4833      	ldr	r0, [pc, #204]	; (80065a8 <_printf_i+0x240>)
 80064dc:	2778      	movs	r7, #120	; 0x78
 80064de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80064e2:	6823      	ldr	r3, [r4, #0]
 80064e4:	6829      	ldr	r1, [r5, #0]
 80064e6:	061f      	lsls	r7, r3, #24
 80064e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80064ec:	d402      	bmi.n	80064f4 <_printf_i+0x18c>
 80064ee:	065f      	lsls	r7, r3, #25
 80064f0:	bf48      	it	mi
 80064f2:	b2b6      	uxthmi	r6, r6
 80064f4:	07df      	lsls	r7, r3, #31
 80064f6:	bf48      	it	mi
 80064f8:	f043 0320 	orrmi.w	r3, r3, #32
 80064fc:	6029      	str	r1, [r5, #0]
 80064fe:	bf48      	it	mi
 8006500:	6023      	strmi	r3, [r4, #0]
 8006502:	b91e      	cbnz	r6, 800650c <_printf_i+0x1a4>
 8006504:	6823      	ldr	r3, [r4, #0]
 8006506:	f023 0320 	bic.w	r3, r3, #32
 800650a:	6023      	str	r3, [r4, #0]
 800650c:	2310      	movs	r3, #16
 800650e:	e7a7      	b.n	8006460 <_printf_i+0xf8>
 8006510:	4824      	ldr	r0, [pc, #144]	; (80065a4 <_printf_i+0x23c>)
 8006512:	e7e4      	b.n	80064de <_printf_i+0x176>
 8006514:	4615      	mov	r5, r2
 8006516:	e7bd      	b.n	8006494 <_printf_i+0x12c>
 8006518:	682b      	ldr	r3, [r5, #0]
 800651a:	6826      	ldr	r6, [r4, #0]
 800651c:	6961      	ldr	r1, [r4, #20]
 800651e:	1d18      	adds	r0, r3, #4
 8006520:	6028      	str	r0, [r5, #0]
 8006522:	0635      	lsls	r5, r6, #24
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	d501      	bpl.n	800652c <_printf_i+0x1c4>
 8006528:	6019      	str	r1, [r3, #0]
 800652a:	e002      	b.n	8006532 <_printf_i+0x1ca>
 800652c:	0670      	lsls	r0, r6, #25
 800652e:	d5fb      	bpl.n	8006528 <_printf_i+0x1c0>
 8006530:	8019      	strh	r1, [r3, #0]
 8006532:	2300      	movs	r3, #0
 8006534:	6123      	str	r3, [r4, #16]
 8006536:	4615      	mov	r5, r2
 8006538:	e7bc      	b.n	80064b4 <_printf_i+0x14c>
 800653a:	682b      	ldr	r3, [r5, #0]
 800653c:	1d1a      	adds	r2, r3, #4
 800653e:	602a      	str	r2, [r5, #0]
 8006540:	681d      	ldr	r5, [r3, #0]
 8006542:	6862      	ldr	r2, [r4, #4]
 8006544:	2100      	movs	r1, #0
 8006546:	4628      	mov	r0, r5
 8006548:	f7f9 fe5a 	bl	8000200 <memchr>
 800654c:	b108      	cbz	r0, 8006552 <_printf_i+0x1ea>
 800654e:	1b40      	subs	r0, r0, r5
 8006550:	6060      	str	r0, [r4, #4]
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	6123      	str	r3, [r4, #16]
 8006556:	2300      	movs	r3, #0
 8006558:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800655c:	e7aa      	b.n	80064b4 <_printf_i+0x14c>
 800655e:	6923      	ldr	r3, [r4, #16]
 8006560:	462a      	mov	r2, r5
 8006562:	4649      	mov	r1, r9
 8006564:	4640      	mov	r0, r8
 8006566:	47d0      	blx	sl
 8006568:	3001      	adds	r0, #1
 800656a:	d0ad      	beq.n	80064c8 <_printf_i+0x160>
 800656c:	6823      	ldr	r3, [r4, #0]
 800656e:	079b      	lsls	r3, r3, #30
 8006570:	d413      	bmi.n	800659a <_printf_i+0x232>
 8006572:	68e0      	ldr	r0, [r4, #12]
 8006574:	9b03      	ldr	r3, [sp, #12]
 8006576:	4298      	cmp	r0, r3
 8006578:	bfb8      	it	lt
 800657a:	4618      	movlt	r0, r3
 800657c:	e7a6      	b.n	80064cc <_printf_i+0x164>
 800657e:	2301      	movs	r3, #1
 8006580:	4632      	mov	r2, r6
 8006582:	4649      	mov	r1, r9
 8006584:	4640      	mov	r0, r8
 8006586:	47d0      	blx	sl
 8006588:	3001      	adds	r0, #1
 800658a:	d09d      	beq.n	80064c8 <_printf_i+0x160>
 800658c:	3501      	adds	r5, #1
 800658e:	68e3      	ldr	r3, [r4, #12]
 8006590:	9903      	ldr	r1, [sp, #12]
 8006592:	1a5b      	subs	r3, r3, r1
 8006594:	42ab      	cmp	r3, r5
 8006596:	dcf2      	bgt.n	800657e <_printf_i+0x216>
 8006598:	e7eb      	b.n	8006572 <_printf_i+0x20a>
 800659a:	2500      	movs	r5, #0
 800659c:	f104 0619 	add.w	r6, r4, #25
 80065a0:	e7f5      	b.n	800658e <_printf_i+0x226>
 80065a2:	bf00      	nop
 80065a4:	08008eab 	.word	0x08008eab
 80065a8:	08008ebc 	.word	0x08008ebc

080065ac <std>:
 80065ac:	2300      	movs	r3, #0
 80065ae:	b510      	push	{r4, lr}
 80065b0:	4604      	mov	r4, r0
 80065b2:	e9c0 3300 	strd	r3, r3, [r0]
 80065b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065ba:	6083      	str	r3, [r0, #8]
 80065bc:	8181      	strh	r1, [r0, #12]
 80065be:	6643      	str	r3, [r0, #100]	; 0x64
 80065c0:	81c2      	strh	r2, [r0, #14]
 80065c2:	6183      	str	r3, [r0, #24]
 80065c4:	4619      	mov	r1, r3
 80065c6:	2208      	movs	r2, #8
 80065c8:	305c      	adds	r0, #92	; 0x5c
 80065ca:	f000 fa17 	bl	80069fc <memset>
 80065ce:	4b0d      	ldr	r3, [pc, #52]	; (8006604 <std+0x58>)
 80065d0:	6263      	str	r3, [r4, #36]	; 0x24
 80065d2:	4b0d      	ldr	r3, [pc, #52]	; (8006608 <std+0x5c>)
 80065d4:	62a3      	str	r3, [r4, #40]	; 0x28
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <std+0x60>)
 80065d8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065da:	4b0d      	ldr	r3, [pc, #52]	; (8006610 <std+0x64>)
 80065dc:	6323      	str	r3, [r4, #48]	; 0x30
 80065de:	4b0d      	ldr	r3, [pc, #52]	; (8006614 <std+0x68>)
 80065e0:	6224      	str	r4, [r4, #32]
 80065e2:	429c      	cmp	r4, r3
 80065e4:	d006      	beq.n	80065f4 <std+0x48>
 80065e6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80065ea:	4294      	cmp	r4, r2
 80065ec:	d002      	beq.n	80065f4 <std+0x48>
 80065ee:	33d0      	adds	r3, #208	; 0xd0
 80065f0:	429c      	cmp	r4, r3
 80065f2:	d105      	bne.n	8006600 <std+0x54>
 80065f4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80065f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065fc:	f000 bad6 	b.w	8006bac <__retarget_lock_init_recursive>
 8006600:	bd10      	pop	{r4, pc}
 8006602:	bf00      	nop
 8006604:	0800684d 	.word	0x0800684d
 8006608:	0800686f 	.word	0x0800686f
 800660c:	080068a7 	.word	0x080068a7
 8006610:	080068cb 	.word	0x080068cb
 8006614:	200003ec 	.word	0x200003ec

08006618 <stdio_exit_handler>:
 8006618:	4a02      	ldr	r2, [pc, #8]	; (8006624 <stdio_exit_handler+0xc>)
 800661a:	4903      	ldr	r1, [pc, #12]	; (8006628 <stdio_exit_handler+0x10>)
 800661c:	4803      	ldr	r0, [pc, #12]	; (800662c <stdio_exit_handler+0x14>)
 800661e:	f000 b869 	b.w	80066f4 <_fwalk_sglue>
 8006622:	bf00      	nop
 8006624:	20000010 	.word	0x20000010
 8006628:	08008821 	.word	0x08008821
 800662c:	2000001c 	.word	0x2000001c

08006630 <cleanup_stdio>:
 8006630:	6841      	ldr	r1, [r0, #4]
 8006632:	4b0c      	ldr	r3, [pc, #48]	; (8006664 <cleanup_stdio+0x34>)
 8006634:	4299      	cmp	r1, r3
 8006636:	b510      	push	{r4, lr}
 8006638:	4604      	mov	r4, r0
 800663a:	d001      	beq.n	8006640 <cleanup_stdio+0x10>
 800663c:	f002 f8f0 	bl	8008820 <_fflush_r>
 8006640:	68a1      	ldr	r1, [r4, #8]
 8006642:	4b09      	ldr	r3, [pc, #36]	; (8006668 <cleanup_stdio+0x38>)
 8006644:	4299      	cmp	r1, r3
 8006646:	d002      	beq.n	800664e <cleanup_stdio+0x1e>
 8006648:	4620      	mov	r0, r4
 800664a:	f002 f8e9 	bl	8008820 <_fflush_r>
 800664e:	68e1      	ldr	r1, [r4, #12]
 8006650:	4b06      	ldr	r3, [pc, #24]	; (800666c <cleanup_stdio+0x3c>)
 8006652:	4299      	cmp	r1, r3
 8006654:	d004      	beq.n	8006660 <cleanup_stdio+0x30>
 8006656:	4620      	mov	r0, r4
 8006658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800665c:	f002 b8e0 	b.w	8008820 <_fflush_r>
 8006660:	bd10      	pop	{r4, pc}
 8006662:	bf00      	nop
 8006664:	200003ec 	.word	0x200003ec
 8006668:	20000454 	.word	0x20000454
 800666c:	200004bc 	.word	0x200004bc

08006670 <global_stdio_init.part.0>:
 8006670:	b510      	push	{r4, lr}
 8006672:	4b0b      	ldr	r3, [pc, #44]	; (80066a0 <global_stdio_init.part.0+0x30>)
 8006674:	4c0b      	ldr	r4, [pc, #44]	; (80066a4 <global_stdio_init.part.0+0x34>)
 8006676:	4a0c      	ldr	r2, [pc, #48]	; (80066a8 <global_stdio_init.part.0+0x38>)
 8006678:	601a      	str	r2, [r3, #0]
 800667a:	4620      	mov	r0, r4
 800667c:	2200      	movs	r2, #0
 800667e:	2104      	movs	r1, #4
 8006680:	f7ff ff94 	bl	80065ac <std>
 8006684:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006688:	2201      	movs	r2, #1
 800668a:	2109      	movs	r1, #9
 800668c:	f7ff ff8e 	bl	80065ac <std>
 8006690:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006694:	2202      	movs	r2, #2
 8006696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800669a:	2112      	movs	r1, #18
 800669c:	f7ff bf86 	b.w	80065ac <std>
 80066a0:	20000524 	.word	0x20000524
 80066a4:	200003ec 	.word	0x200003ec
 80066a8:	08006619 	.word	0x08006619

080066ac <__sfp_lock_acquire>:
 80066ac:	4801      	ldr	r0, [pc, #4]	; (80066b4 <__sfp_lock_acquire+0x8>)
 80066ae:	f000 ba7e 	b.w	8006bae <__retarget_lock_acquire_recursive>
 80066b2:	bf00      	nop
 80066b4:	2000052d 	.word	0x2000052d

080066b8 <__sfp_lock_release>:
 80066b8:	4801      	ldr	r0, [pc, #4]	; (80066c0 <__sfp_lock_release+0x8>)
 80066ba:	f000 ba79 	b.w	8006bb0 <__retarget_lock_release_recursive>
 80066be:	bf00      	nop
 80066c0:	2000052d 	.word	0x2000052d

080066c4 <__sinit>:
 80066c4:	b510      	push	{r4, lr}
 80066c6:	4604      	mov	r4, r0
 80066c8:	f7ff fff0 	bl	80066ac <__sfp_lock_acquire>
 80066cc:	6a23      	ldr	r3, [r4, #32]
 80066ce:	b11b      	cbz	r3, 80066d8 <__sinit+0x14>
 80066d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066d4:	f7ff bff0 	b.w	80066b8 <__sfp_lock_release>
 80066d8:	4b04      	ldr	r3, [pc, #16]	; (80066ec <__sinit+0x28>)
 80066da:	6223      	str	r3, [r4, #32]
 80066dc:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <__sinit+0x2c>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1f5      	bne.n	80066d0 <__sinit+0xc>
 80066e4:	f7ff ffc4 	bl	8006670 <global_stdio_init.part.0>
 80066e8:	e7f2      	b.n	80066d0 <__sinit+0xc>
 80066ea:	bf00      	nop
 80066ec:	08006631 	.word	0x08006631
 80066f0:	20000524 	.word	0x20000524

080066f4 <_fwalk_sglue>:
 80066f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066f8:	4607      	mov	r7, r0
 80066fa:	4688      	mov	r8, r1
 80066fc:	4614      	mov	r4, r2
 80066fe:	2600      	movs	r6, #0
 8006700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006704:	f1b9 0901 	subs.w	r9, r9, #1
 8006708:	d505      	bpl.n	8006716 <_fwalk_sglue+0x22>
 800670a:	6824      	ldr	r4, [r4, #0]
 800670c:	2c00      	cmp	r4, #0
 800670e:	d1f7      	bne.n	8006700 <_fwalk_sglue+0xc>
 8006710:	4630      	mov	r0, r6
 8006712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006716:	89ab      	ldrh	r3, [r5, #12]
 8006718:	2b01      	cmp	r3, #1
 800671a:	d907      	bls.n	800672c <_fwalk_sglue+0x38>
 800671c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006720:	3301      	adds	r3, #1
 8006722:	d003      	beq.n	800672c <_fwalk_sglue+0x38>
 8006724:	4629      	mov	r1, r5
 8006726:	4638      	mov	r0, r7
 8006728:	47c0      	blx	r8
 800672a:	4306      	orrs	r6, r0
 800672c:	3568      	adds	r5, #104	; 0x68
 800672e:	e7e9      	b.n	8006704 <_fwalk_sglue+0x10>

08006730 <iprintf>:
 8006730:	b40f      	push	{r0, r1, r2, r3}
 8006732:	b507      	push	{r0, r1, r2, lr}
 8006734:	4906      	ldr	r1, [pc, #24]	; (8006750 <iprintf+0x20>)
 8006736:	ab04      	add	r3, sp, #16
 8006738:	6808      	ldr	r0, [r1, #0]
 800673a:	f853 2b04 	ldr.w	r2, [r3], #4
 800673e:	6881      	ldr	r1, [r0, #8]
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	f001 fecd 	bl	80084e0 <_vfiprintf_r>
 8006746:	b003      	add	sp, #12
 8006748:	f85d eb04 	ldr.w	lr, [sp], #4
 800674c:	b004      	add	sp, #16
 800674e:	4770      	bx	lr
 8006750:	20000068 	.word	0x20000068

08006754 <_puts_r>:
 8006754:	6a03      	ldr	r3, [r0, #32]
 8006756:	b570      	push	{r4, r5, r6, lr}
 8006758:	6884      	ldr	r4, [r0, #8]
 800675a:	4605      	mov	r5, r0
 800675c:	460e      	mov	r6, r1
 800675e:	b90b      	cbnz	r3, 8006764 <_puts_r+0x10>
 8006760:	f7ff ffb0 	bl	80066c4 <__sinit>
 8006764:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006766:	07db      	lsls	r3, r3, #31
 8006768:	d405      	bmi.n	8006776 <_puts_r+0x22>
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	0598      	lsls	r0, r3, #22
 800676e:	d402      	bmi.n	8006776 <_puts_r+0x22>
 8006770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006772:	f000 fa1c 	bl	8006bae <__retarget_lock_acquire_recursive>
 8006776:	89a3      	ldrh	r3, [r4, #12]
 8006778:	0719      	lsls	r1, r3, #28
 800677a:	d513      	bpl.n	80067a4 <_puts_r+0x50>
 800677c:	6923      	ldr	r3, [r4, #16]
 800677e:	b18b      	cbz	r3, 80067a4 <_puts_r+0x50>
 8006780:	3e01      	subs	r6, #1
 8006782:	68a3      	ldr	r3, [r4, #8]
 8006784:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006788:	3b01      	subs	r3, #1
 800678a:	60a3      	str	r3, [r4, #8]
 800678c:	b9e9      	cbnz	r1, 80067ca <_puts_r+0x76>
 800678e:	2b00      	cmp	r3, #0
 8006790:	da2e      	bge.n	80067f0 <_puts_r+0x9c>
 8006792:	4622      	mov	r2, r4
 8006794:	210a      	movs	r1, #10
 8006796:	4628      	mov	r0, r5
 8006798:	f000 f89b 	bl	80068d2 <__swbuf_r>
 800679c:	3001      	adds	r0, #1
 800679e:	d007      	beq.n	80067b0 <_puts_r+0x5c>
 80067a0:	250a      	movs	r5, #10
 80067a2:	e007      	b.n	80067b4 <_puts_r+0x60>
 80067a4:	4621      	mov	r1, r4
 80067a6:	4628      	mov	r0, r5
 80067a8:	f000 f8d0 	bl	800694c <__swsetup_r>
 80067ac:	2800      	cmp	r0, #0
 80067ae:	d0e7      	beq.n	8006780 <_puts_r+0x2c>
 80067b0:	f04f 35ff 	mov.w	r5, #4294967295
 80067b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067b6:	07da      	lsls	r2, r3, #31
 80067b8:	d405      	bmi.n	80067c6 <_puts_r+0x72>
 80067ba:	89a3      	ldrh	r3, [r4, #12]
 80067bc:	059b      	lsls	r3, r3, #22
 80067be:	d402      	bmi.n	80067c6 <_puts_r+0x72>
 80067c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067c2:	f000 f9f5 	bl	8006bb0 <__retarget_lock_release_recursive>
 80067c6:	4628      	mov	r0, r5
 80067c8:	bd70      	pop	{r4, r5, r6, pc}
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	da04      	bge.n	80067d8 <_puts_r+0x84>
 80067ce:	69a2      	ldr	r2, [r4, #24]
 80067d0:	429a      	cmp	r2, r3
 80067d2:	dc06      	bgt.n	80067e2 <_puts_r+0x8e>
 80067d4:	290a      	cmp	r1, #10
 80067d6:	d004      	beq.n	80067e2 <_puts_r+0x8e>
 80067d8:	6823      	ldr	r3, [r4, #0]
 80067da:	1c5a      	adds	r2, r3, #1
 80067dc:	6022      	str	r2, [r4, #0]
 80067de:	7019      	strb	r1, [r3, #0]
 80067e0:	e7cf      	b.n	8006782 <_puts_r+0x2e>
 80067e2:	4622      	mov	r2, r4
 80067e4:	4628      	mov	r0, r5
 80067e6:	f000 f874 	bl	80068d2 <__swbuf_r>
 80067ea:	3001      	adds	r0, #1
 80067ec:	d1c9      	bne.n	8006782 <_puts_r+0x2e>
 80067ee:	e7df      	b.n	80067b0 <_puts_r+0x5c>
 80067f0:	6823      	ldr	r3, [r4, #0]
 80067f2:	250a      	movs	r5, #10
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	6022      	str	r2, [r4, #0]
 80067f8:	701d      	strb	r5, [r3, #0]
 80067fa:	e7db      	b.n	80067b4 <_puts_r+0x60>

080067fc <puts>:
 80067fc:	4b02      	ldr	r3, [pc, #8]	; (8006808 <puts+0xc>)
 80067fe:	4601      	mov	r1, r0
 8006800:	6818      	ldr	r0, [r3, #0]
 8006802:	f7ff bfa7 	b.w	8006754 <_puts_r>
 8006806:	bf00      	nop
 8006808:	20000068 	.word	0x20000068

0800680c <siprintf>:
 800680c:	b40e      	push	{r1, r2, r3}
 800680e:	b500      	push	{lr}
 8006810:	b09c      	sub	sp, #112	; 0x70
 8006812:	ab1d      	add	r3, sp, #116	; 0x74
 8006814:	9002      	str	r0, [sp, #8]
 8006816:	9006      	str	r0, [sp, #24]
 8006818:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800681c:	4809      	ldr	r0, [pc, #36]	; (8006844 <siprintf+0x38>)
 800681e:	9107      	str	r1, [sp, #28]
 8006820:	9104      	str	r1, [sp, #16]
 8006822:	4909      	ldr	r1, [pc, #36]	; (8006848 <siprintf+0x3c>)
 8006824:	f853 2b04 	ldr.w	r2, [r3], #4
 8006828:	9105      	str	r1, [sp, #20]
 800682a:	6800      	ldr	r0, [r0, #0]
 800682c:	9301      	str	r3, [sp, #4]
 800682e:	a902      	add	r1, sp, #8
 8006830:	f001 fd2e 	bl	8008290 <_svfiprintf_r>
 8006834:	9b02      	ldr	r3, [sp, #8]
 8006836:	2200      	movs	r2, #0
 8006838:	701a      	strb	r2, [r3, #0]
 800683a:	b01c      	add	sp, #112	; 0x70
 800683c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006840:	b003      	add	sp, #12
 8006842:	4770      	bx	lr
 8006844:	20000068 	.word	0x20000068
 8006848:	ffff0208 	.word	0xffff0208

0800684c <__sread>:
 800684c:	b510      	push	{r4, lr}
 800684e:	460c      	mov	r4, r1
 8006850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006854:	f000 f95c 	bl	8006b10 <_read_r>
 8006858:	2800      	cmp	r0, #0
 800685a:	bfab      	itete	ge
 800685c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800685e:	89a3      	ldrhlt	r3, [r4, #12]
 8006860:	181b      	addge	r3, r3, r0
 8006862:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006866:	bfac      	ite	ge
 8006868:	6563      	strge	r3, [r4, #84]	; 0x54
 800686a:	81a3      	strhlt	r3, [r4, #12]
 800686c:	bd10      	pop	{r4, pc}

0800686e <__swrite>:
 800686e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006872:	461f      	mov	r7, r3
 8006874:	898b      	ldrh	r3, [r1, #12]
 8006876:	05db      	lsls	r3, r3, #23
 8006878:	4605      	mov	r5, r0
 800687a:	460c      	mov	r4, r1
 800687c:	4616      	mov	r6, r2
 800687e:	d505      	bpl.n	800688c <__swrite+0x1e>
 8006880:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006884:	2302      	movs	r3, #2
 8006886:	2200      	movs	r2, #0
 8006888:	f000 f930 	bl	8006aec <_lseek_r>
 800688c:	89a3      	ldrh	r3, [r4, #12]
 800688e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006892:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006896:	81a3      	strh	r3, [r4, #12]
 8006898:	4632      	mov	r2, r6
 800689a:	463b      	mov	r3, r7
 800689c:	4628      	mov	r0, r5
 800689e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068a2:	f000 b947 	b.w	8006b34 <_write_r>

080068a6 <__sseek>:
 80068a6:	b510      	push	{r4, lr}
 80068a8:	460c      	mov	r4, r1
 80068aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ae:	f000 f91d 	bl	8006aec <_lseek_r>
 80068b2:	1c43      	adds	r3, r0, #1
 80068b4:	89a3      	ldrh	r3, [r4, #12]
 80068b6:	bf15      	itete	ne
 80068b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80068ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068c2:	81a3      	strheq	r3, [r4, #12]
 80068c4:	bf18      	it	ne
 80068c6:	81a3      	strhne	r3, [r4, #12]
 80068c8:	bd10      	pop	{r4, pc}

080068ca <__sclose>:
 80068ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ce:	f000 b8fd 	b.w	8006acc <_close_r>

080068d2 <__swbuf_r>:
 80068d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d4:	460e      	mov	r6, r1
 80068d6:	4614      	mov	r4, r2
 80068d8:	4605      	mov	r5, r0
 80068da:	b118      	cbz	r0, 80068e4 <__swbuf_r+0x12>
 80068dc:	6a03      	ldr	r3, [r0, #32]
 80068de:	b90b      	cbnz	r3, 80068e4 <__swbuf_r+0x12>
 80068e0:	f7ff fef0 	bl	80066c4 <__sinit>
 80068e4:	69a3      	ldr	r3, [r4, #24]
 80068e6:	60a3      	str	r3, [r4, #8]
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	071a      	lsls	r2, r3, #28
 80068ec:	d525      	bpl.n	800693a <__swbuf_r+0x68>
 80068ee:	6923      	ldr	r3, [r4, #16]
 80068f0:	b31b      	cbz	r3, 800693a <__swbuf_r+0x68>
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	6922      	ldr	r2, [r4, #16]
 80068f6:	1a98      	subs	r0, r3, r2
 80068f8:	6963      	ldr	r3, [r4, #20]
 80068fa:	b2f6      	uxtb	r6, r6
 80068fc:	4283      	cmp	r3, r0
 80068fe:	4637      	mov	r7, r6
 8006900:	dc04      	bgt.n	800690c <__swbuf_r+0x3a>
 8006902:	4621      	mov	r1, r4
 8006904:	4628      	mov	r0, r5
 8006906:	f001 ff8b 	bl	8008820 <_fflush_r>
 800690a:	b9e0      	cbnz	r0, 8006946 <__swbuf_r+0x74>
 800690c:	68a3      	ldr	r3, [r4, #8]
 800690e:	3b01      	subs	r3, #1
 8006910:	60a3      	str	r3, [r4, #8]
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	1c5a      	adds	r2, r3, #1
 8006916:	6022      	str	r2, [r4, #0]
 8006918:	701e      	strb	r6, [r3, #0]
 800691a:	6962      	ldr	r2, [r4, #20]
 800691c:	1c43      	adds	r3, r0, #1
 800691e:	429a      	cmp	r2, r3
 8006920:	d004      	beq.n	800692c <__swbuf_r+0x5a>
 8006922:	89a3      	ldrh	r3, [r4, #12]
 8006924:	07db      	lsls	r3, r3, #31
 8006926:	d506      	bpl.n	8006936 <__swbuf_r+0x64>
 8006928:	2e0a      	cmp	r6, #10
 800692a:	d104      	bne.n	8006936 <__swbuf_r+0x64>
 800692c:	4621      	mov	r1, r4
 800692e:	4628      	mov	r0, r5
 8006930:	f001 ff76 	bl	8008820 <_fflush_r>
 8006934:	b938      	cbnz	r0, 8006946 <__swbuf_r+0x74>
 8006936:	4638      	mov	r0, r7
 8006938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800693a:	4621      	mov	r1, r4
 800693c:	4628      	mov	r0, r5
 800693e:	f000 f805 	bl	800694c <__swsetup_r>
 8006942:	2800      	cmp	r0, #0
 8006944:	d0d5      	beq.n	80068f2 <__swbuf_r+0x20>
 8006946:	f04f 37ff 	mov.w	r7, #4294967295
 800694a:	e7f4      	b.n	8006936 <__swbuf_r+0x64>

0800694c <__swsetup_r>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	4b2a      	ldr	r3, [pc, #168]	; (80069f8 <__swsetup_r+0xac>)
 8006950:	4605      	mov	r5, r0
 8006952:	6818      	ldr	r0, [r3, #0]
 8006954:	460c      	mov	r4, r1
 8006956:	b118      	cbz	r0, 8006960 <__swsetup_r+0x14>
 8006958:	6a03      	ldr	r3, [r0, #32]
 800695a:	b90b      	cbnz	r3, 8006960 <__swsetup_r+0x14>
 800695c:	f7ff feb2 	bl	80066c4 <__sinit>
 8006960:	89a3      	ldrh	r3, [r4, #12]
 8006962:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006966:	0718      	lsls	r0, r3, #28
 8006968:	d422      	bmi.n	80069b0 <__swsetup_r+0x64>
 800696a:	06d9      	lsls	r1, r3, #27
 800696c:	d407      	bmi.n	800697e <__swsetup_r+0x32>
 800696e:	2309      	movs	r3, #9
 8006970:	602b      	str	r3, [r5, #0]
 8006972:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006976:	81a3      	strh	r3, [r4, #12]
 8006978:	f04f 30ff 	mov.w	r0, #4294967295
 800697c:	e034      	b.n	80069e8 <__swsetup_r+0x9c>
 800697e:	0758      	lsls	r0, r3, #29
 8006980:	d512      	bpl.n	80069a8 <__swsetup_r+0x5c>
 8006982:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006984:	b141      	cbz	r1, 8006998 <__swsetup_r+0x4c>
 8006986:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800698a:	4299      	cmp	r1, r3
 800698c:	d002      	beq.n	8006994 <__swsetup_r+0x48>
 800698e:	4628      	mov	r0, r5
 8006990:	f000 ffa8 	bl	80078e4 <_free_r>
 8006994:	2300      	movs	r3, #0
 8006996:	6363      	str	r3, [r4, #52]	; 0x34
 8006998:	89a3      	ldrh	r3, [r4, #12]
 800699a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800699e:	81a3      	strh	r3, [r4, #12]
 80069a0:	2300      	movs	r3, #0
 80069a2:	6063      	str	r3, [r4, #4]
 80069a4:	6923      	ldr	r3, [r4, #16]
 80069a6:	6023      	str	r3, [r4, #0]
 80069a8:	89a3      	ldrh	r3, [r4, #12]
 80069aa:	f043 0308 	orr.w	r3, r3, #8
 80069ae:	81a3      	strh	r3, [r4, #12]
 80069b0:	6923      	ldr	r3, [r4, #16]
 80069b2:	b94b      	cbnz	r3, 80069c8 <__swsetup_r+0x7c>
 80069b4:	89a3      	ldrh	r3, [r4, #12]
 80069b6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80069ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80069be:	d003      	beq.n	80069c8 <__swsetup_r+0x7c>
 80069c0:	4621      	mov	r1, r4
 80069c2:	4628      	mov	r0, r5
 80069c4:	f001 ff8c 	bl	80088e0 <__smakebuf_r>
 80069c8:	89a0      	ldrh	r0, [r4, #12]
 80069ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069ce:	f010 0301 	ands.w	r3, r0, #1
 80069d2:	d00a      	beq.n	80069ea <__swsetup_r+0x9e>
 80069d4:	2300      	movs	r3, #0
 80069d6:	60a3      	str	r3, [r4, #8]
 80069d8:	6963      	ldr	r3, [r4, #20]
 80069da:	425b      	negs	r3, r3
 80069dc:	61a3      	str	r3, [r4, #24]
 80069de:	6923      	ldr	r3, [r4, #16]
 80069e0:	b943      	cbnz	r3, 80069f4 <__swsetup_r+0xa8>
 80069e2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069e6:	d1c4      	bne.n	8006972 <__swsetup_r+0x26>
 80069e8:	bd38      	pop	{r3, r4, r5, pc}
 80069ea:	0781      	lsls	r1, r0, #30
 80069ec:	bf58      	it	pl
 80069ee:	6963      	ldrpl	r3, [r4, #20]
 80069f0:	60a3      	str	r3, [r4, #8]
 80069f2:	e7f4      	b.n	80069de <__swsetup_r+0x92>
 80069f4:	2000      	movs	r0, #0
 80069f6:	e7f7      	b.n	80069e8 <__swsetup_r+0x9c>
 80069f8:	20000068 	.word	0x20000068

080069fc <memset>:
 80069fc:	4402      	add	r2, r0
 80069fe:	4603      	mov	r3, r0
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d100      	bne.n	8006a06 <memset+0xa>
 8006a04:	4770      	bx	lr
 8006a06:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0a:	e7f9      	b.n	8006a00 <memset+0x4>

08006a0c <strtok>:
 8006a0c:	4b16      	ldr	r3, [pc, #88]	; (8006a68 <strtok+0x5c>)
 8006a0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a10:	681e      	ldr	r6, [r3, #0]
 8006a12:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006a14:	4605      	mov	r5, r0
 8006a16:	b9fc      	cbnz	r4, 8006a58 <strtok+0x4c>
 8006a18:	2050      	movs	r0, #80	; 0x50
 8006a1a:	9101      	str	r1, [sp, #4]
 8006a1c:	f000 ffae 	bl	800797c <malloc>
 8006a20:	9901      	ldr	r1, [sp, #4]
 8006a22:	6470      	str	r0, [r6, #68]	; 0x44
 8006a24:	4602      	mov	r2, r0
 8006a26:	b920      	cbnz	r0, 8006a32 <strtok+0x26>
 8006a28:	4b10      	ldr	r3, [pc, #64]	; (8006a6c <strtok+0x60>)
 8006a2a:	4811      	ldr	r0, [pc, #68]	; (8006a70 <strtok+0x64>)
 8006a2c:	215b      	movs	r1, #91	; 0x5b
 8006a2e:	f000 f8c1 	bl	8006bb4 <__assert_func>
 8006a32:	e9c0 4400 	strd	r4, r4, [r0]
 8006a36:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006a3a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006a3e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006a42:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006a46:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006a4a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006a4e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006a52:	6184      	str	r4, [r0, #24]
 8006a54:	7704      	strb	r4, [r0, #28]
 8006a56:	6244      	str	r4, [r0, #36]	; 0x24
 8006a58:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	b002      	add	sp, #8
 8006a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006a64:	f000 b806 	b.w	8006a74 <__strtok_r>
 8006a68:	20000068 	.word	0x20000068
 8006a6c:	08008ecd 	.word	0x08008ecd
 8006a70:	08008ee4 	.word	0x08008ee4

08006a74 <__strtok_r>:
 8006a74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a76:	b908      	cbnz	r0, 8006a7c <__strtok_r+0x8>
 8006a78:	6810      	ldr	r0, [r2, #0]
 8006a7a:	b188      	cbz	r0, 8006aa0 <__strtok_r+0x2c>
 8006a7c:	4604      	mov	r4, r0
 8006a7e:	4620      	mov	r0, r4
 8006a80:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006a84:	460f      	mov	r7, r1
 8006a86:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006a8a:	b91e      	cbnz	r6, 8006a94 <__strtok_r+0x20>
 8006a8c:	b965      	cbnz	r5, 8006aa8 <__strtok_r+0x34>
 8006a8e:	6015      	str	r5, [r2, #0]
 8006a90:	4628      	mov	r0, r5
 8006a92:	e005      	b.n	8006aa0 <__strtok_r+0x2c>
 8006a94:	42b5      	cmp	r5, r6
 8006a96:	d1f6      	bne.n	8006a86 <__strtok_r+0x12>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d1f0      	bne.n	8006a7e <__strtok_r+0xa>
 8006a9c:	6014      	str	r4, [r2, #0]
 8006a9e:	7003      	strb	r3, [r0, #0]
 8006aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006aa2:	461c      	mov	r4, r3
 8006aa4:	e00c      	b.n	8006ac0 <__strtok_r+0x4c>
 8006aa6:	b915      	cbnz	r5, 8006aae <__strtok_r+0x3a>
 8006aa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006aac:	460e      	mov	r6, r1
 8006aae:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006ab2:	42ab      	cmp	r3, r5
 8006ab4:	d1f7      	bne.n	8006aa6 <__strtok_r+0x32>
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d0f3      	beq.n	8006aa2 <__strtok_r+0x2e>
 8006aba:	2300      	movs	r3, #0
 8006abc:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006ac0:	6014      	str	r4, [r2, #0]
 8006ac2:	e7ed      	b.n	8006aa0 <__strtok_r+0x2c>

08006ac4 <_localeconv_r>:
 8006ac4:	4800      	ldr	r0, [pc, #0]	; (8006ac8 <_localeconv_r+0x4>)
 8006ac6:	4770      	bx	lr
 8006ac8:	2000015c 	.word	0x2000015c

08006acc <_close_r>:
 8006acc:	b538      	push	{r3, r4, r5, lr}
 8006ace:	4d06      	ldr	r5, [pc, #24]	; (8006ae8 <_close_r+0x1c>)
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	4604      	mov	r4, r0
 8006ad4:	4608      	mov	r0, r1
 8006ad6:	602b      	str	r3, [r5, #0]
 8006ad8:	f7fb fdfb 	bl	80026d2 <_close>
 8006adc:	1c43      	adds	r3, r0, #1
 8006ade:	d102      	bne.n	8006ae6 <_close_r+0x1a>
 8006ae0:	682b      	ldr	r3, [r5, #0]
 8006ae2:	b103      	cbz	r3, 8006ae6 <_close_r+0x1a>
 8006ae4:	6023      	str	r3, [r4, #0]
 8006ae6:	bd38      	pop	{r3, r4, r5, pc}
 8006ae8:	20000528 	.word	0x20000528

08006aec <_lseek_r>:
 8006aec:	b538      	push	{r3, r4, r5, lr}
 8006aee:	4d07      	ldr	r5, [pc, #28]	; (8006b0c <_lseek_r+0x20>)
 8006af0:	4604      	mov	r4, r0
 8006af2:	4608      	mov	r0, r1
 8006af4:	4611      	mov	r1, r2
 8006af6:	2200      	movs	r2, #0
 8006af8:	602a      	str	r2, [r5, #0]
 8006afa:	461a      	mov	r2, r3
 8006afc:	f7fb fe10 	bl	8002720 <_lseek>
 8006b00:	1c43      	adds	r3, r0, #1
 8006b02:	d102      	bne.n	8006b0a <_lseek_r+0x1e>
 8006b04:	682b      	ldr	r3, [r5, #0]
 8006b06:	b103      	cbz	r3, 8006b0a <_lseek_r+0x1e>
 8006b08:	6023      	str	r3, [r4, #0]
 8006b0a:	bd38      	pop	{r3, r4, r5, pc}
 8006b0c:	20000528 	.word	0x20000528

08006b10 <_read_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	4d07      	ldr	r5, [pc, #28]	; (8006b30 <_read_r+0x20>)
 8006b14:	4604      	mov	r4, r0
 8006b16:	4608      	mov	r0, r1
 8006b18:	4611      	mov	r1, r2
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	602a      	str	r2, [r5, #0]
 8006b1e:	461a      	mov	r2, r3
 8006b20:	f7fb fd9e 	bl	8002660 <_read>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	d102      	bne.n	8006b2e <_read_r+0x1e>
 8006b28:	682b      	ldr	r3, [r5, #0]
 8006b2a:	b103      	cbz	r3, 8006b2e <_read_r+0x1e>
 8006b2c:	6023      	str	r3, [r4, #0]
 8006b2e:	bd38      	pop	{r3, r4, r5, pc}
 8006b30:	20000528 	.word	0x20000528

08006b34 <_write_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	4d07      	ldr	r5, [pc, #28]	; (8006b54 <_write_r+0x20>)
 8006b38:	4604      	mov	r4, r0
 8006b3a:	4608      	mov	r0, r1
 8006b3c:	4611      	mov	r1, r2
 8006b3e:	2200      	movs	r2, #0
 8006b40:	602a      	str	r2, [r5, #0]
 8006b42:	461a      	mov	r2, r3
 8006b44:	f7fb fda9 	bl	800269a <_write>
 8006b48:	1c43      	adds	r3, r0, #1
 8006b4a:	d102      	bne.n	8006b52 <_write_r+0x1e>
 8006b4c:	682b      	ldr	r3, [r5, #0]
 8006b4e:	b103      	cbz	r3, 8006b52 <_write_r+0x1e>
 8006b50:	6023      	str	r3, [r4, #0]
 8006b52:	bd38      	pop	{r3, r4, r5, pc}
 8006b54:	20000528 	.word	0x20000528

08006b58 <__errno>:
 8006b58:	4b01      	ldr	r3, [pc, #4]	; (8006b60 <__errno+0x8>)
 8006b5a:	6818      	ldr	r0, [r3, #0]
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20000068 	.word	0x20000068

08006b64 <__libc_init_array>:
 8006b64:	b570      	push	{r4, r5, r6, lr}
 8006b66:	4d0d      	ldr	r5, [pc, #52]	; (8006b9c <__libc_init_array+0x38>)
 8006b68:	4c0d      	ldr	r4, [pc, #52]	; (8006ba0 <__libc_init_array+0x3c>)
 8006b6a:	1b64      	subs	r4, r4, r5
 8006b6c:	10a4      	asrs	r4, r4, #2
 8006b6e:	2600      	movs	r6, #0
 8006b70:	42a6      	cmp	r6, r4
 8006b72:	d109      	bne.n	8006b88 <__libc_init_array+0x24>
 8006b74:	4d0b      	ldr	r5, [pc, #44]	; (8006ba4 <__libc_init_array+0x40>)
 8006b76:	4c0c      	ldr	r4, [pc, #48]	; (8006ba8 <__libc_init_array+0x44>)
 8006b78:	f002 f800 	bl	8008b7c <_init>
 8006b7c:	1b64      	subs	r4, r4, r5
 8006b7e:	10a4      	asrs	r4, r4, #2
 8006b80:	2600      	movs	r6, #0
 8006b82:	42a6      	cmp	r6, r4
 8006b84:	d105      	bne.n	8006b92 <__libc_init_array+0x2e>
 8006b86:	bd70      	pop	{r4, r5, r6, pc}
 8006b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8c:	4798      	blx	r3
 8006b8e:	3601      	adds	r6, #1
 8006b90:	e7ee      	b.n	8006b70 <__libc_init_array+0xc>
 8006b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b96:	4798      	blx	r3
 8006b98:	3601      	adds	r6, #1
 8006b9a:	e7f2      	b.n	8006b82 <__libc_init_array+0x1e>
 8006b9c:	08009170 	.word	0x08009170
 8006ba0:	08009170 	.word	0x08009170
 8006ba4:	08009170 	.word	0x08009170
 8006ba8:	08009174 	.word	0x08009174

08006bac <__retarget_lock_init_recursive>:
 8006bac:	4770      	bx	lr

08006bae <__retarget_lock_acquire_recursive>:
 8006bae:	4770      	bx	lr

08006bb0 <__retarget_lock_release_recursive>:
 8006bb0:	4770      	bx	lr
	...

08006bb4 <__assert_func>:
 8006bb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006bb6:	4614      	mov	r4, r2
 8006bb8:	461a      	mov	r2, r3
 8006bba:	4b09      	ldr	r3, [pc, #36]	; (8006be0 <__assert_func+0x2c>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4605      	mov	r5, r0
 8006bc0:	68d8      	ldr	r0, [r3, #12]
 8006bc2:	b14c      	cbz	r4, 8006bd8 <__assert_func+0x24>
 8006bc4:	4b07      	ldr	r3, [pc, #28]	; (8006be4 <__assert_func+0x30>)
 8006bc6:	9100      	str	r1, [sp, #0]
 8006bc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bcc:	4906      	ldr	r1, [pc, #24]	; (8006be8 <__assert_func+0x34>)
 8006bce:	462b      	mov	r3, r5
 8006bd0:	f001 fe4e 	bl	8008870 <fiprintf>
 8006bd4:	f001 ff1a 	bl	8008a0c <abort>
 8006bd8:	4b04      	ldr	r3, [pc, #16]	; (8006bec <__assert_func+0x38>)
 8006bda:	461c      	mov	r4, r3
 8006bdc:	e7f3      	b.n	8006bc6 <__assert_func+0x12>
 8006bde:	bf00      	nop
 8006be0:	20000068 	.word	0x20000068
 8006be4:	08008f3e 	.word	0x08008f3e
 8006be8:	08008f4b 	.word	0x08008f4b
 8006bec:	08008f79 	.word	0x08008f79

08006bf0 <quorem>:
 8006bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bf4:	6903      	ldr	r3, [r0, #16]
 8006bf6:	690c      	ldr	r4, [r1, #16]
 8006bf8:	42a3      	cmp	r3, r4
 8006bfa:	4607      	mov	r7, r0
 8006bfc:	db7e      	blt.n	8006cfc <quorem+0x10c>
 8006bfe:	3c01      	subs	r4, #1
 8006c00:	f101 0814 	add.w	r8, r1, #20
 8006c04:	f100 0514 	add.w	r5, r0, #20
 8006c08:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006c0c:	9301      	str	r3, [sp, #4]
 8006c0e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006c12:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006c16:	3301      	adds	r3, #1
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006c1e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006c22:	fbb2 f6f3 	udiv	r6, r2, r3
 8006c26:	d331      	bcc.n	8006c8c <quorem+0x9c>
 8006c28:	f04f 0e00 	mov.w	lr, #0
 8006c2c:	4640      	mov	r0, r8
 8006c2e:	46ac      	mov	ip, r5
 8006c30:	46f2      	mov	sl, lr
 8006c32:	f850 2b04 	ldr.w	r2, [r0], #4
 8006c36:	b293      	uxth	r3, r2
 8006c38:	fb06 e303 	mla	r3, r6, r3, lr
 8006c3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c40:	0c1a      	lsrs	r2, r3, #16
 8006c42:	b29b      	uxth	r3, r3
 8006c44:	ebaa 0303 	sub.w	r3, sl, r3
 8006c48:	f8dc a000 	ldr.w	sl, [ip]
 8006c4c:	fa13 f38a 	uxtah	r3, r3, sl
 8006c50:	fb06 220e 	mla	r2, r6, lr, r2
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	9b00      	ldr	r3, [sp, #0]
 8006c58:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006c5c:	b292      	uxth	r2, r2
 8006c5e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006c62:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006c66:	f8bd 3000 	ldrh.w	r3, [sp]
 8006c6a:	4581      	cmp	r9, r0
 8006c6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006c70:	f84c 3b04 	str.w	r3, [ip], #4
 8006c74:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006c78:	d2db      	bcs.n	8006c32 <quorem+0x42>
 8006c7a:	f855 300b 	ldr.w	r3, [r5, fp]
 8006c7e:	b92b      	cbnz	r3, 8006c8c <quorem+0x9c>
 8006c80:	9b01      	ldr	r3, [sp, #4]
 8006c82:	3b04      	subs	r3, #4
 8006c84:	429d      	cmp	r5, r3
 8006c86:	461a      	mov	r2, r3
 8006c88:	d32c      	bcc.n	8006ce4 <quorem+0xf4>
 8006c8a:	613c      	str	r4, [r7, #16]
 8006c8c:	4638      	mov	r0, r7
 8006c8e:	f001 f9a5 	bl	8007fdc <__mcmp>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	db22      	blt.n	8006cdc <quorem+0xec>
 8006c96:	3601      	adds	r6, #1
 8006c98:	4629      	mov	r1, r5
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ca0:	f8d1 c000 	ldr.w	ip, [r1]
 8006ca4:	b293      	uxth	r3, r2
 8006ca6:	1ac3      	subs	r3, r0, r3
 8006ca8:	0c12      	lsrs	r2, r2, #16
 8006caa:	fa13 f38c 	uxtah	r3, r3, ip
 8006cae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006cb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006cb6:	b29b      	uxth	r3, r3
 8006cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006cbc:	45c1      	cmp	r9, r8
 8006cbe:	f841 3b04 	str.w	r3, [r1], #4
 8006cc2:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006cc6:	d2e9      	bcs.n	8006c9c <quorem+0xac>
 8006cc8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ccc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006cd0:	b922      	cbnz	r2, 8006cdc <quorem+0xec>
 8006cd2:	3b04      	subs	r3, #4
 8006cd4:	429d      	cmp	r5, r3
 8006cd6:	461a      	mov	r2, r3
 8006cd8:	d30a      	bcc.n	8006cf0 <quorem+0x100>
 8006cda:	613c      	str	r4, [r7, #16]
 8006cdc:	4630      	mov	r0, r6
 8006cde:	b003      	add	sp, #12
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ce4:	6812      	ldr	r2, [r2, #0]
 8006ce6:	3b04      	subs	r3, #4
 8006ce8:	2a00      	cmp	r2, #0
 8006cea:	d1ce      	bne.n	8006c8a <quorem+0x9a>
 8006cec:	3c01      	subs	r4, #1
 8006cee:	e7c9      	b.n	8006c84 <quorem+0x94>
 8006cf0:	6812      	ldr	r2, [r2, #0]
 8006cf2:	3b04      	subs	r3, #4
 8006cf4:	2a00      	cmp	r2, #0
 8006cf6:	d1f0      	bne.n	8006cda <quorem+0xea>
 8006cf8:	3c01      	subs	r4, #1
 8006cfa:	e7eb      	b.n	8006cd4 <quorem+0xe4>
 8006cfc:	2000      	movs	r0, #0
 8006cfe:	e7ee      	b.n	8006cde <quorem+0xee>

08006d00 <_dtoa_r>:
 8006d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d04:	ed2d 8b04 	vpush	{d8-d9}
 8006d08:	69c5      	ldr	r5, [r0, #28]
 8006d0a:	b093      	sub	sp, #76	; 0x4c
 8006d0c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006d10:	ec57 6b10 	vmov	r6, r7, d0
 8006d14:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006d18:	9107      	str	r1, [sp, #28]
 8006d1a:	4604      	mov	r4, r0
 8006d1c:	920a      	str	r2, [sp, #40]	; 0x28
 8006d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8006d20:	b975      	cbnz	r5, 8006d40 <_dtoa_r+0x40>
 8006d22:	2010      	movs	r0, #16
 8006d24:	f000 fe2a 	bl	800797c <malloc>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	61e0      	str	r0, [r4, #28]
 8006d2c:	b920      	cbnz	r0, 8006d38 <_dtoa_r+0x38>
 8006d2e:	4bae      	ldr	r3, [pc, #696]	; (8006fe8 <_dtoa_r+0x2e8>)
 8006d30:	21ef      	movs	r1, #239	; 0xef
 8006d32:	48ae      	ldr	r0, [pc, #696]	; (8006fec <_dtoa_r+0x2ec>)
 8006d34:	f7ff ff3e 	bl	8006bb4 <__assert_func>
 8006d38:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006d3c:	6005      	str	r5, [r0, #0]
 8006d3e:	60c5      	str	r5, [r0, #12]
 8006d40:	69e3      	ldr	r3, [r4, #28]
 8006d42:	6819      	ldr	r1, [r3, #0]
 8006d44:	b151      	cbz	r1, 8006d5c <_dtoa_r+0x5c>
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	604a      	str	r2, [r1, #4]
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4093      	lsls	r3, r2
 8006d4e:	608b      	str	r3, [r1, #8]
 8006d50:	4620      	mov	r0, r4
 8006d52:	f000 ff07 	bl	8007b64 <_Bfree>
 8006d56:	69e3      	ldr	r3, [r4, #28]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	601a      	str	r2, [r3, #0]
 8006d5c:	1e3b      	subs	r3, r7, #0
 8006d5e:	bfbb      	ittet	lt
 8006d60:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006d64:	9303      	strlt	r3, [sp, #12]
 8006d66:	2300      	movge	r3, #0
 8006d68:	2201      	movlt	r2, #1
 8006d6a:	bfac      	ite	ge
 8006d6c:	f8c8 3000 	strge.w	r3, [r8]
 8006d70:	f8c8 2000 	strlt.w	r2, [r8]
 8006d74:	4b9e      	ldr	r3, [pc, #632]	; (8006ff0 <_dtoa_r+0x2f0>)
 8006d76:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006d7a:	ea33 0308 	bics.w	r3, r3, r8
 8006d7e:	d11b      	bne.n	8006db8 <_dtoa_r+0xb8>
 8006d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006d82:	f242 730f 	movw	r3, #9999	; 0x270f
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006d8c:	4333      	orrs	r3, r6
 8006d8e:	f000 8593 	beq.w	80078b8 <_dtoa_r+0xbb8>
 8006d92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006d94:	b963      	cbnz	r3, 8006db0 <_dtoa_r+0xb0>
 8006d96:	4b97      	ldr	r3, [pc, #604]	; (8006ff4 <_dtoa_r+0x2f4>)
 8006d98:	e027      	b.n	8006dea <_dtoa_r+0xea>
 8006d9a:	4b97      	ldr	r3, [pc, #604]	; (8006ff8 <_dtoa_r+0x2f8>)
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	3308      	adds	r3, #8
 8006da0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006da2:	6013      	str	r3, [r2, #0]
 8006da4:	9800      	ldr	r0, [sp, #0]
 8006da6:	b013      	add	sp, #76	; 0x4c
 8006da8:	ecbd 8b04 	vpop	{d8-d9}
 8006dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006db0:	4b90      	ldr	r3, [pc, #576]	; (8006ff4 <_dtoa_r+0x2f4>)
 8006db2:	9300      	str	r3, [sp, #0]
 8006db4:	3303      	adds	r3, #3
 8006db6:	e7f3      	b.n	8006da0 <_dtoa_r+0xa0>
 8006db8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	ec51 0b17 	vmov	r0, r1, d7
 8006dc2:	eeb0 8a47 	vmov.f32	s16, s14
 8006dc6:	eef0 8a67 	vmov.f32	s17, s15
 8006dca:	2300      	movs	r3, #0
 8006dcc:	f7f9 fe94 	bl	8000af8 <__aeabi_dcmpeq>
 8006dd0:	4681      	mov	r9, r0
 8006dd2:	b160      	cbz	r0, 8006dee <_dtoa_r+0xee>
 8006dd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	6013      	str	r3, [r2, #0]
 8006dda:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	f000 8568 	beq.w	80078b2 <_dtoa_r+0xbb2>
 8006de2:	4b86      	ldr	r3, [pc, #536]	; (8006ffc <_dtoa_r+0x2fc>)
 8006de4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006de6:	6013      	str	r3, [r2, #0]
 8006de8:	3b01      	subs	r3, #1
 8006dea:	9300      	str	r3, [sp, #0]
 8006dec:	e7da      	b.n	8006da4 <_dtoa_r+0xa4>
 8006dee:	aa10      	add	r2, sp, #64	; 0x40
 8006df0:	a911      	add	r1, sp, #68	; 0x44
 8006df2:	4620      	mov	r0, r4
 8006df4:	eeb0 0a48 	vmov.f32	s0, s16
 8006df8:	eef0 0a68 	vmov.f32	s1, s17
 8006dfc:	f001 f994 	bl	8008128 <__d2b>
 8006e00:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006e04:	4682      	mov	sl, r0
 8006e06:	2d00      	cmp	r5, #0
 8006e08:	d07f      	beq.n	8006f0a <_dtoa_r+0x20a>
 8006e0a:	ee18 3a90 	vmov	r3, s17
 8006e0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e12:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006e16:	ec51 0b18 	vmov	r0, r1, d8
 8006e1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006e1e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8006e22:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8006e26:	4619      	mov	r1, r3
 8006e28:	2200      	movs	r2, #0
 8006e2a:	4b75      	ldr	r3, [pc, #468]	; (8007000 <_dtoa_r+0x300>)
 8006e2c:	f7f9 fa44 	bl	80002b8 <__aeabi_dsub>
 8006e30:	a367      	add	r3, pc, #412	; (adr r3, 8006fd0 <_dtoa_r+0x2d0>)
 8006e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e36:	f7f9 fbf7 	bl	8000628 <__aeabi_dmul>
 8006e3a:	a367      	add	r3, pc, #412	; (adr r3, 8006fd8 <_dtoa_r+0x2d8>)
 8006e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e40:	f7f9 fa3c 	bl	80002bc <__adddf3>
 8006e44:	4606      	mov	r6, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	460f      	mov	r7, r1
 8006e4a:	f7f9 fb83 	bl	8000554 <__aeabi_i2d>
 8006e4e:	a364      	add	r3, pc, #400	; (adr r3, 8006fe0 <_dtoa_r+0x2e0>)
 8006e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e54:	f7f9 fbe8 	bl	8000628 <__aeabi_dmul>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4630      	mov	r0, r6
 8006e5e:	4639      	mov	r1, r7
 8006e60:	f7f9 fa2c 	bl	80002bc <__adddf3>
 8006e64:	4606      	mov	r6, r0
 8006e66:	460f      	mov	r7, r1
 8006e68:	f7f9 fe8e 	bl	8000b88 <__aeabi_d2iz>
 8006e6c:	2200      	movs	r2, #0
 8006e6e:	4683      	mov	fp, r0
 8006e70:	2300      	movs	r3, #0
 8006e72:	4630      	mov	r0, r6
 8006e74:	4639      	mov	r1, r7
 8006e76:	f7f9 fe49 	bl	8000b0c <__aeabi_dcmplt>
 8006e7a:	b148      	cbz	r0, 8006e90 <_dtoa_r+0x190>
 8006e7c:	4658      	mov	r0, fp
 8006e7e:	f7f9 fb69 	bl	8000554 <__aeabi_i2d>
 8006e82:	4632      	mov	r2, r6
 8006e84:	463b      	mov	r3, r7
 8006e86:	f7f9 fe37 	bl	8000af8 <__aeabi_dcmpeq>
 8006e8a:	b908      	cbnz	r0, 8006e90 <_dtoa_r+0x190>
 8006e8c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006e90:	f1bb 0f16 	cmp.w	fp, #22
 8006e94:	d857      	bhi.n	8006f46 <_dtoa_r+0x246>
 8006e96:	4b5b      	ldr	r3, [pc, #364]	; (8007004 <_dtoa_r+0x304>)
 8006e98:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ea0:	ec51 0b18 	vmov	r0, r1, d8
 8006ea4:	f7f9 fe32 	bl	8000b0c <__aeabi_dcmplt>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	d04e      	beq.n	8006f4a <_dtoa_r+0x24a>
 8006eac:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	930c      	str	r3, [sp, #48]	; 0x30
 8006eb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006eb6:	1b5b      	subs	r3, r3, r5
 8006eb8:	1e5a      	subs	r2, r3, #1
 8006eba:	bf45      	ittet	mi
 8006ebc:	f1c3 0301 	rsbmi	r3, r3, #1
 8006ec0:	9305      	strmi	r3, [sp, #20]
 8006ec2:	2300      	movpl	r3, #0
 8006ec4:	2300      	movmi	r3, #0
 8006ec6:	9206      	str	r2, [sp, #24]
 8006ec8:	bf54      	ite	pl
 8006eca:	9305      	strpl	r3, [sp, #20]
 8006ecc:	9306      	strmi	r3, [sp, #24]
 8006ece:	f1bb 0f00 	cmp.w	fp, #0
 8006ed2:	db3c      	blt.n	8006f4e <_dtoa_r+0x24e>
 8006ed4:	9b06      	ldr	r3, [sp, #24]
 8006ed6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8006eda:	445b      	add	r3, fp
 8006edc:	9306      	str	r3, [sp, #24]
 8006ede:	2300      	movs	r3, #0
 8006ee0:	9308      	str	r3, [sp, #32]
 8006ee2:	9b07      	ldr	r3, [sp, #28]
 8006ee4:	2b09      	cmp	r3, #9
 8006ee6:	d868      	bhi.n	8006fba <_dtoa_r+0x2ba>
 8006ee8:	2b05      	cmp	r3, #5
 8006eea:	bfc4      	itt	gt
 8006eec:	3b04      	subgt	r3, #4
 8006eee:	9307      	strgt	r3, [sp, #28]
 8006ef0:	9b07      	ldr	r3, [sp, #28]
 8006ef2:	f1a3 0302 	sub.w	r3, r3, #2
 8006ef6:	bfcc      	ite	gt
 8006ef8:	2500      	movgt	r5, #0
 8006efa:	2501      	movle	r5, #1
 8006efc:	2b03      	cmp	r3, #3
 8006efe:	f200 8085 	bhi.w	800700c <_dtoa_r+0x30c>
 8006f02:	e8df f003 	tbb	[pc, r3]
 8006f06:	3b2e      	.short	0x3b2e
 8006f08:	5839      	.short	0x5839
 8006f0a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006f0e:	441d      	add	r5, r3
 8006f10:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8006f14:	2b20      	cmp	r3, #32
 8006f16:	bfc1      	itttt	gt
 8006f18:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006f1c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006f20:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8006f24:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006f28:	bfd6      	itet	le
 8006f2a:	f1c3 0320 	rsble	r3, r3, #32
 8006f2e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006f32:	fa06 f003 	lslle.w	r0, r6, r3
 8006f36:	f7f9 fafd 	bl	8000534 <__aeabi_ui2d>
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006f40:	3d01      	subs	r5, #1
 8006f42:	920e      	str	r2, [sp, #56]	; 0x38
 8006f44:	e76f      	b.n	8006e26 <_dtoa_r+0x126>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e7b3      	b.n	8006eb2 <_dtoa_r+0x1b2>
 8006f4a:	900c      	str	r0, [sp, #48]	; 0x30
 8006f4c:	e7b2      	b.n	8006eb4 <_dtoa_r+0x1b4>
 8006f4e:	9b05      	ldr	r3, [sp, #20]
 8006f50:	eba3 030b 	sub.w	r3, r3, fp
 8006f54:	9305      	str	r3, [sp, #20]
 8006f56:	f1cb 0300 	rsb	r3, fp, #0
 8006f5a:	9308      	str	r3, [sp, #32]
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f60:	e7bf      	b.n	8006ee2 <_dtoa_r+0x1e2>
 8006f62:	2300      	movs	r3, #0
 8006f64:	9309      	str	r3, [sp, #36]	; 0x24
 8006f66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	dc52      	bgt.n	8007012 <_dtoa_r+0x312>
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	9301      	str	r3, [sp, #4]
 8006f70:	9304      	str	r3, [sp, #16]
 8006f72:	461a      	mov	r2, r3
 8006f74:	920a      	str	r2, [sp, #40]	; 0x28
 8006f76:	e00b      	b.n	8006f90 <_dtoa_r+0x290>
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e7f3      	b.n	8006f64 <_dtoa_r+0x264>
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	9309      	str	r3, [sp, #36]	; 0x24
 8006f80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f82:	445b      	add	r3, fp
 8006f84:	9301      	str	r3, [sp, #4]
 8006f86:	3301      	adds	r3, #1
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	9304      	str	r3, [sp, #16]
 8006f8c:	bfb8      	it	lt
 8006f8e:	2301      	movlt	r3, #1
 8006f90:	69e0      	ldr	r0, [r4, #28]
 8006f92:	2100      	movs	r1, #0
 8006f94:	2204      	movs	r2, #4
 8006f96:	f102 0614 	add.w	r6, r2, #20
 8006f9a:	429e      	cmp	r6, r3
 8006f9c:	d93d      	bls.n	800701a <_dtoa_r+0x31a>
 8006f9e:	6041      	str	r1, [r0, #4]
 8006fa0:	4620      	mov	r0, r4
 8006fa2:	f000 fd9f 	bl	8007ae4 <_Balloc>
 8006fa6:	9000      	str	r0, [sp, #0]
 8006fa8:	2800      	cmp	r0, #0
 8006faa:	d139      	bne.n	8007020 <_dtoa_r+0x320>
 8006fac:	4b16      	ldr	r3, [pc, #88]	; (8007008 <_dtoa_r+0x308>)
 8006fae:	4602      	mov	r2, r0
 8006fb0:	f240 11af 	movw	r1, #431	; 0x1af
 8006fb4:	e6bd      	b.n	8006d32 <_dtoa_r+0x32>
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e7e1      	b.n	8006f7e <_dtoa_r+0x27e>
 8006fba:	2501      	movs	r5, #1
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	9307      	str	r3, [sp, #28]
 8006fc0:	9509      	str	r5, [sp, #36]	; 0x24
 8006fc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006fc6:	9301      	str	r3, [sp, #4]
 8006fc8:	9304      	str	r3, [sp, #16]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2312      	movs	r3, #18
 8006fce:	e7d1      	b.n	8006f74 <_dtoa_r+0x274>
 8006fd0:	636f4361 	.word	0x636f4361
 8006fd4:	3fd287a7 	.word	0x3fd287a7
 8006fd8:	8b60c8b3 	.word	0x8b60c8b3
 8006fdc:	3fc68a28 	.word	0x3fc68a28
 8006fe0:	509f79fb 	.word	0x509f79fb
 8006fe4:	3fd34413 	.word	0x3fd34413
 8006fe8:	08008ecd 	.word	0x08008ecd
 8006fec:	08008f87 	.word	0x08008f87
 8006ff0:	7ff00000 	.word	0x7ff00000
 8006ff4:	08008f83 	.word	0x08008f83
 8006ff8:	08008f7a 	.word	0x08008f7a
 8006ffc:	08008eaa 	.word	0x08008eaa
 8007000:	3ff80000 	.word	0x3ff80000
 8007004:	08009078 	.word	0x08009078
 8007008:	08008fdf 	.word	0x08008fdf
 800700c:	2301      	movs	r3, #1
 800700e:	9309      	str	r3, [sp, #36]	; 0x24
 8007010:	e7d7      	b.n	8006fc2 <_dtoa_r+0x2c2>
 8007012:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007014:	9301      	str	r3, [sp, #4]
 8007016:	9304      	str	r3, [sp, #16]
 8007018:	e7ba      	b.n	8006f90 <_dtoa_r+0x290>
 800701a:	3101      	adds	r1, #1
 800701c:	0052      	lsls	r2, r2, #1
 800701e:	e7ba      	b.n	8006f96 <_dtoa_r+0x296>
 8007020:	69e3      	ldr	r3, [r4, #28]
 8007022:	9a00      	ldr	r2, [sp, #0]
 8007024:	601a      	str	r2, [r3, #0]
 8007026:	9b04      	ldr	r3, [sp, #16]
 8007028:	2b0e      	cmp	r3, #14
 800702a:	f200 80a8 	bhi.w	800717e <_dtoa_r+0x47e>
 800702e:	2d00      	cmp	r5, #0
 8007030:	f000 80a5 	beq.w	800717e <_dtoa_r+0x47e>
 8007034:	f1bb 0f00 	cmp.w	fp, #0
 8007038:	dd38      	ble.n	80070ac <_dtoa_r+0x3ac>
 800703a:	4bc0      	ldr	r3, [pc, #768]	; (800733c <_dtoa_r+0x63c>)
 800703c:	f00b 020f 	and.w	r2, fp, #15
 8007040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007044:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007048:	e9d3 6700 	ldrd	r6, r7, [r3]
 800704c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8007050:	d019      	beq.n	8007086 <_dtoa_r+0x386>
 8007052:	4bbb      	ldr	r3, [pc, #748]	; (8007340 <_dtoa_r+0x640>)
 8007054:	ec51 0b18 	vmov	r0, r1, d8
 8007058:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800705c:	f7f9 fc0e 	bl	800087c <__aeabi_ddiv>
 8007060:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007064:	f008 080f 	and.w	r8, r8, #15
 8007068:	2503      	movs	r5, #3
 800706a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8007340 <_dtoa_r+0x640>
 800706e:	f1b8 0f00 	cmp.w	r8, #0
 8007072:	d10a      	bne.n	800708a <_dtoa_r+0x38a>
 8007074:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007078:	4632      	mov	r2, r6
 800707a:	463b      	mov	r3, r7
 800707c:	f7f9 fbfe 	bl	800087c <__aeabi_ddiv>
 8007080:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007084:	e02b      	b.n	80070de <_dtoa_r+0x3de>
 8007086:	2502      	movs	r5, #2
 8007088:	e7ef      	b.n	800706a <_dtoa_r+0x36a>
 800708a:	f018 0f01 	tst.w	r8, #1
 800708e:	d008      	beq.n	80070a2 <_dtoa_r+0x3a2>
 8007090:	4630      	mov	r0, r6
 8007092:	4639      	mov	r1, r7
 8007094:	e9d9 2300 	ldrd	r2, r3, [r9]
 8007098:	f7f9 fac6 	bl	8000628 <__aeabi_dmul>
 800709c:	3501      	adds	r5, #1
 800709e:	4606      	mov	r6, r0
 80070a0:	460f      	mov	r7, r1
 80070a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80070a6:	f109 0908 	add.w	r9, r9, #8
 80070aa:	e7e0      	b.n	800706e <_dtoa_r+0x36e>
 80070ac:	f000 809f 	beq.w	80071ee <_dtoa_r+0x4ee>
 80070b0:	f1cb 0600 	rsb	r6, fp, #0
 80070b4:	4ba1      	ldr	r3, [pc, #644]	; (800733c <_dtoa_r+0x63c>)
 80070b6:	4fa2      	ldr	r7, [pc, #648]	; (8007340 <_dtoa_r+0x640>)
 80070b8:	f006 020f 	and.w	r2, r6, #15
 80070bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c4:	ec51 0b18 	vmov	r0, r1, d8
 80070c8:	f7f9 faae 	bl	8000628 <__aeabi_dmul>
 80070cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80070d0:	1136      	asrs	r6, r6, #4
 80070d2:	2300      	movs	r3, #0
 80070d4:	2502      	movs	r5, #2
 80070d6:	2e00      	cmp	r6, #0
 80070d8:	d17e      	bne.n	80071d8 <_dtoa_r+0x4d8>
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d1d0      	bne.n	8007080 <_dtoa_r+0x380>
 80070de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80070e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	f000 8084 	beq.w	80071f2 <_dtoa_r+0x4f2>
 80070ea:	4b96      	ldr	r3, [pc, #600]	; (8007344 <_dtoa_r+0x644>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	4640      	mov	r0, r8
 80070f0:	4649      	mov	r1, r9
 80070f2:	f7f9 fd0b 	bl	8000b0c <__aeabi_dcmplt>
 80070f6:	2800      	cmp	r0, #0
 80070f8:	d07b      	beq.n	80071f2 <_dtoa_r+0x4f2>
 80070fa:	9b04      	ldr	r3, [sp, #16]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d078      	beq.n	80071f2 <_dtoa_r+0x4f2>
 8007100:	9b01      	ldr	r3, [sp, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	dd39      	ble.n	800717a <_dtoa_r+0x47a>
 8007106:	4b90      	ldr	r3, [pc, #576]	; (8007348 <_dtoa_r+0x648>)
 8007108:	2200      	movs	r2, #0
 800710a:	4640      	mov	r0, r8
 800710c:	4649      	mov	r1, r9
 800710e:	f7f9 fa8b 	bl	8000628 <__aeabi_dmul>
 8007112:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007116:	9e01      	ldr	r6, [sp, #4]
 8007118:	f10b 37ff 	add.w	r7, fp, #4294967295
 800711c:	3501      	adds	r5, #1
 800711e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8007122:	4628      	mov	r0, r5
 8007124:	f7f9 fa16 	bl	8000554 <__aeabi_i2d>
 8007128:	4642      	mov	r2, r8
 800712a:	464b      	mov	r3, r9
 800712c:	f7f9 fa7c 	bl	8000628 <__aeabi_dmul>
 8007130:	4b86      	ldr	r3, [pc, #536]	; (800734c <_dtoa_r+0x64c>)
 8007132:	2200      	movs	r2, #0
 8007134:	f7f9 f8c2 	bl	80002bc <__adddf3>
 8007138:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800713c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007140:	9303      	str	r3, [sp, #12]
 8007142:	2e00      	cmp	r6, #0
 8007144:	d158      	bne.n	80071f8 <_dtoa_r+0x4f8>
 8007146:	4b82      	ldr	r3, [pc, #520]	; (8007350 <_dtoa_r+0x650>)
 8007148:	2200      	movs	r2, #0
 800714a:	4640      	mov	r0, r8
 800714c:	4649      	mov	r1, r9
 800714e:	f7f9 f8b3 	bl	80002b8 <__aeabi_dsub>
 8007152:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007156:	4680      	mov	r8, r0
 8007158:	4689      	mov	r9, r1
 800715a:	f7f9 fcf5 	bl	8000b48 <__aeabi_dcmpgt>
 800715e:	2800      	cmp	r0, #0
 8007160:	f040 8296 	bne.w	8007690 <_dtoa_r+0x990>
 8007164:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007168:	4640      	mov	r0, r8
 800716a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800716e:	4649      	mov	r1, r9
 8007170:	f7f9 fccc 	bl	8000b0c <__aeabi_dcmplt>
 8007174:	2800      	cmp	r0, #0
 8007176:	f040 8289 	bne.w	800768c <_dtoa_r+0x98c>
 800717a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800717e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007180:	2b00      	cmp	r3, #0
 8007182:	f2c0 814e 	blt.w	8007422 <_dtoa_r+0x722>
 8007186:	f1bb 0f0e 	cmp.w	fp, #14
 800718a:	f300 814a 	bgt.w	8007422 <_dtoa_r+0x722>
 800718e:	4b6b      	ldr	r3, [pc, #428]	; (800733c <_dtoa_r+0x63c>)
 8007190:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007194:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007198:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800719a:	2b00      	cmp	r3, #0
 800719c:	f280 80dc 	bge.w	8007358 <_dtoa_r+0x658>
 80071a0:	9b04      	ldr	r3, [sp, #16]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	f300 80d8 	bgt.w	8007358 <_dtoa_r+0x658>
 80071a8:	f040 826f 	bne.w	800768a <_dtoa_r+0x98a>
 80071ac:	4b68      	ldr	r3, [pc, #416]	; (8007350 <_dtoa_r+0x650>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	4640      	mov	r0, r8
 80071b2:	4649      	mov	r1, r9
 80071b4:	f7f9 fa38 	bl	8000628 <__aeabi_dmul>
 80071b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80071bc:	f7f9 fcba 	bl	8000b34 <__aeabi_dcmpge>
 80071c0:	9e04      	ldr	r6, [sp, #16]
 80071c2:	4637      	mov	r7, r6
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f040 8245 	bne.w	8007654 <_dtoa_r+0x954>
 80071ca:	9d00      	ldr	r5, [sp, #0]
 80071cc:	2331      	movs	r3, #49	; 0x31
 80071ce:	f805 3b01 	strb.w	r3, [r5], #1
 80071d2:	f10b 0b01 	add.w	fp, fp, #1
 80071d6:	e241      	b.n	800765c <_dtoa_r+0x95c>
 80071d8:	07f2      	lsls	r2, r6, #31
 80071da:	d505      	bpl.n	80071e8 <_dtoa_r+0x4e8>
 80071dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80071e0:	f7f9 fa22 	bl	8000628 <__aeabi_dmul>
 80071e4:	3501      	adds	r5, #1
 80071e6:	2301      	movs	r3, #1
 80071e8:	1076      	asrs	r6, r6, #1
 80071ea:	3708      	adds	r7, #8
 80071ec:	e773      	b.n	80070d6 <_dtoa_r+0x3d6>
 80071ee:	2502      	movs	r5, #2
 80071f0:	e775      	b.n	80070de <_dtoa_r+0x3de>
 80071f2:	9e04      	ldr	r6, [sp, #16]
 80071f4:	465f      	mov	r7, fp
 80071f6:	e792      	b.n	800711e <_dtoa_r+0x41e>
 80071f8:	9900      	ldr	r1, [sp, #0]
 80071fa:	4b50      	ldr	r3, [pc, #320]	; (800733c <_dtoa_r+0x63c>)
 80071fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007200:	4431      	add	r1, r6
 8007202:	9102      	str	r1, [sp, #8]
 8007204:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007206:	eeb0 9a47 	vmov.f32	s18, s14
 800720a:	eef0 9a67 	vmov.f32	s19, s15
 800720e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007216:	2900      	cmp	r1, #0
 8007218:	d044      	beq.n	80072a4 <_dtoa_r+0x5a4>
 800721a:	494e      	ldr	r1, [pc, #312]	; (8007354 <_dtoa_r+0x654>)
 800721c:	2000      	movs	r0, #0
 800721e:	f7f9 fb2d 	bl	800087c <__aeabi_ddiv>
 8007222:	ec53 2b19 	vmov	r2, r3, d9
 8007226:	f7f9 f847 	bl	80002b8 <__aeabi_dsub>
 800722a:	9d00      	ldr	r5, [sp, #0]
 800722c:	ec41 0b19 	vmov	d9, r0, r1
 8007230:	4649      	mov	r1, r9
 8007232:	4640      	mov	r0, r8
 8007234:	f7f9 fca8 	bl	8000b88 <__aeabi_d2iz>
 8007238:	4606      	mov	r6, r0
 800723a:	f7f9 f98b 	bl	8000554 <__aeabi_i2d>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	4640      	mov	r0, r8
 8007244:	4649      	mov	r1, r9
 8007246:	f7f9 f837 	bl	80002b8 <__aeabi_dsub>
 800724a:	3630      	adds	r6, #48	; 0x30
 800724c:	f805 6b01 	strb.w	r6, [r5], #1
 8007250:	ec53 2b19 	vmov	r2, r3, d9
 8007254:	4680      	mov	r8, r0
 8007256:	4689      	mov	r9, r1
 8007258:	f7f9 fc58 	bl	8000b0c <__aeabi_dcmplt>
 800725c:	2800      	cmp	r0, #0
 800725e:	d164      	bne.n	800732a <_dtoa_r+0x62a>
 8007260:	4642      	mov	r2, r8
 8007262:	464b      	mov	r3, r9
 8007264:	4937      	ldr	r1, [pc, #220]	; (8007344 <_dtoa_r+0x644>)
 8007266:	2000      	movs	r0, #0
 8007268:	f7f9 f826 	bl	80002b8 <__aeabi_dsub>
 800726c:	ec53 2b19 	vmov	r2, r3, d9
 8007270:	f7f9 fc4c 	bl	8000b0c <__aeabi_dcmplt>
 8007274:	2800      	cmp	r0, #0
 8007276:	f040 80b6 	bne.w	80073e6 <_dtoa_r+0x6e6>
 800727a:	9b02      	ldr	r3, [sp, #8]
 800727c:	429d      	cmp	r5, r3
 800727e:	f43f af7c 	beq.w	800717a <_dtoa_r+0x47a>
 8007282:	4b31      	ldr	r3, [pc, #196]	; (8007348 <_dtoa_r+0x648>)
 8007284:	ec51 0b19 	vmov	r0, r1, d9
 8007288:	2200      	movs	r2, #0
 800728a:	f7f9 f9cd 	bl	8000628 <__aeabi_dmul>
 800728e:	4b2e      	ldr	r3, [pc, #184]	; (8007348 <_dtoa_r+0x648>)
 8007290:	ec41 0b19 	vmov	d9, r0, r1
 8007294:	2200      	movs	r2, #0
 8007296:	4640      	mov	r0, r8
 8007298:	4649      	mov	r1, r9
 800729a:	f7f9 f9c5 	bl	8000628 <__aeabi_dmul>
 800729e:	4680      	mov	r8, r0
 80072a0:	4689      	mov	r9, r1
 80072a2:	e7c5      	b.n	8007230 <_dtoa_r+0x530>
 80072a4:	ec51 0b17 	vmov	r0, r1, d7
 80072a8:	f7f9 f9be 	bl	8000628 <__aeabi_dmul>
 80072ac:	9b02      	ldr	r3, [sp, #8]
 80072ae:	9d00      	ldr	r5, [sp, #0]
 80072b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80072b2:	ec41 0b19 	vmov	d9, r0, r1
 80072b6:	4649      	mov	r1, r9
 80072b8:	4640      	mov	r0, r8
 80072ba:	f7f9 fc65 	bl	8000b88 <__aeabi_d2iz>
 80072be:	4606      	mov	r6, r0
 80072c0:	f7f9 f948 	bl	8000554 <__aeabi_i2d>
 80072c4:	3630      	adds	r6, #48	; 0x30
 80072c6:	4602      	mov	r2, r0
 80072c8:	460b      	mov	r3, r1
 80072ca:	4640      	mov	r0, r8
 80072cc:	4649      	mov	r1, r9
 80072ce:	f7f8 fff3 	bl	80002b8 <__aeabi_dsub>
 80072d2:	f805 6b01 	strb.w	r6, [r5], #1
 80072d6:	9b02      	ldr	r3, [sp, #8]
 80072d8:	429d      	cmp	r5, r3
 80072da:	4680      	mov	r8, r0
 80072dc:	4689      	mov	r9, r1
 80072de:	f04f 0200 	mov.w	r2, #0
 80072e2:	d124      	bne.n	800732e <_dtoa_r+0x62e>
 80072e4:	4b1b      	ldr	r3, [pc, #108]	; (8007354 <_dtoa_r+0x654>)
 80072e6:	ec51 0b19 	vmov	r0, r1, d9
 80072ea:	f7f8 ffe7 	bl	80002bc <__adddf3>
 80072ee:	4602      	mov	r2, r0
 80072f0:	460b      	mov	r3, r1
 80072f2:	4640      	mov	r0, r8
 80072f4:	4649      	mov	r1, r9
 80072f6:	f7f9 fc27 	bl	8000b48 <__aeabi_dcmpgt>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d173      	bne.n	80073e6 <_dtoa_r+0x6e6>
 80072fe:	ec53 2b19 	vmov	r2, r3, d9
 8007302:	4914      	ldr	r1, [pc, #80]	; (8007354 <_dtoa_r+0x654>)
 8007304:	2000      	movs	r0, #0
 8007306:	f7f8 ffd7 	bl	80002b8 <__aeabi_dsub>
 800730a:	4602      	mov	r2, r0
 800730c:	460b      	mov	r3, r1
 800730e:	4640      	mov	r0, r8
 8007310:	4649      	mov	r1, r9
 8007312:	f7f9 fbfb 	bl	8000b0c <__aeabi_dcmplt>
 8007316:	2800      	cmp	r0, #0
 8007318:	f43f af2f 	beq.w	800717a <_dtoa_r+0x47a>
 800731c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800731e:	1e6b      	subs	r3, r5, #1
 8007320:	930f      	str	r3, [sp, #60]	; 0x3c
 8007322:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007326:	2b30      	cmp	r3, #48	; 0x30
 8007328:	d0f8      	beq.n	800731c <_dtoa_r+0x61c>
 800732a:	46bb      	mov	fp, r7
 800732c:	e04a      	b.n	80073c4 <_dtoa_r+0x6c4>
 800732e:	4b06      	ldr	r3, [pc, #24]	; (8007348 <_dtoa_r+0x648>)
 8007330:	f7f9 f97a 	bl	8000628 <__aeabi_dmul>
 8007334:	4680      	mov	r8, r0
 8007336:	4689      	mov	r9, r1
 8007338:	e7bd      	b.n	80072b6 <_dtoa_r+0x5b6>
 800733a:	bf00      	nop
 800733c:	08009078 	.word	0x08009078
 8007340:	08009050 	.word	0x08009050
 8007344:	3ff00000 	.word	0x3ff00000
 8007348:	40240000 	.word	0x40240000
 800734c:	401c0000 	.word	0x401c0000
 8007350:	40140000 	.word	0x40140000
 8007354:	3fe00000 	.word	0x3fe00000
 8007358:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800735c:	9d00      	ldr	r5, [sp, #0]
 800735e:	4642      	mov	r2, r8
 8007360:	464b      	mov	r3, r9
 8007362:	4630      	mov	r0, r6
 8007364:	4639      	mov	r1, r7
 8007366:	f7f9 fa89 	bl	800087c <__aeabi_ddiv>
 800736a:	f7f9 fc0d 	bl	8000b88 <__aeabi_d2iz>
 800736e:	9001      	str	r0, [sp, #4]
 8007370:	f7f9 f8f0 	bl	8000554 <__aeabi_i2d>
 8007374:	4642      	mov	r2, r8
 8007376:	464b      	mov	r3, r9
 8007378:	f7f9 f956 	bl	8000628 <__aeabi_dmul>
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	4630      	mov	r0, r6
 8007382:	4639      	mov	r1, r7
 8007384:	f7f8 ff98 	bl	80002b8 <__aeabi_dsub>
 8007388:	9e01      	ldr	r6, [sp, #4]
 800738a:	9f04      	ldr	r7, [sp, #16]
 800738c:	3630      	adds	r6, #48	; 0x30
 800738e:	f805 6b01 	strb.w	r6, [r5], #1
 8007392:	9e00      	ldr	r6, [sp, #0]
 8007394:	1bae      	subs	r6, r5, r6
 8007396:	42b7      	cmp	r7, r6
 8007398:	4602      	mov	r2, r0
 800739a:	460b      	mov	r3, r1
 800739c:	d134      	bne.n	8007408 <_dtoa_r+0x708>
 800739e:	f7f8 ff8d 	bl	80002bc <__adddf3>
 80073a2:	4642      	mov	r2, r8
 80073a4:	464b      	mov	r3, r9
 80073a6:	4606      	mov	r6, r0
 80073a8:	460f      	mov	r7, r1
 80073aa:	f7f9 fbcd 	bl	8000b48 <__aeabi_dcmpgt>
 80073ae:	b9c8      	cbnz	r0, 80073e4 <_dtoa_r+0x6e4>
 80073b0:	4642      	mov	r2, r8
 80073b2:	464b      	mov	r3, r9
 80073b4:	4630      	mov	r0, r6
 80073b6:	4639      	mov	r1, r7
 80073b8:	f7f9 fb9e 	bl	8000af8 <__aeabi_dcmpeq>
 80073bc:	b110      	cbz	r0, 80073c4 <_dtoa_r+0x6c4>
 80073be:	9b01      	ldr	r3, [sp, #4]
 80073c0:	07db      	lsls	r3, r3, #31
 80073c2:	d40f      	bmi.n	80073e4 <_dtoa_r+0x6e4>
 80073c4:	4651      	mov	r1, sl
 80073c6:	4620      	mov	r0, r4
 80073c8:	f000 fbcc 	bl	8007b64 <_Bfree>
 80073cc:	2300      	movs	r3, #0
 80073ce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80073d0:	702b      	strb	r3, [r5, #0]
 80073d2:	f10b 0301 	add.w	r3, fp, #1
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80073da:	2b00      	cmp	r3, #0
 80073dc:	f43f ace2 	beq.w	8006da4 <_dtoa_r+0xa4>
 80073e0:	601d      	str	r5, [r3, #0]
 80073e2:	e4df      	b.n	8006da4 <_dtoa_r+0xa4>
 80073e4:	465f      	mov	r7, fp
 80073e6:	462b      	mov	r3, r5
 80073e8:	461d      	mov	r5, r3
 80073ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073ee:	2a39      	cmp	r2, #57	; 0x39
 80073f0:	d106      	bne.n	8007400 <_dtoa_r+0x700>
 80073f2:	9a00      	ldr	r2, [sp, #0]
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d1f7      	bne.n	80073e8 <_dtoa_r+0x6e8>
 80073f8:	9900      	ldr	r1, [sp, #0]
 80073fa:	2230      	movs	r2, #48	; 0x30
 80073fc:	3701      	adds	r7, #1
 80073fe:	700a      	strb	r2, [r1, #0]
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	3201      	adds	r2, #1
 8007404:	701a      	strb	r2, [r3, #0]
 8007406:	e790      	b.n	800732a <_dtoa_r+0x62a>
 8007408:	4ba3      	ldr	r3, [pc, #652]	; (8007698 <_dtoa_r+0x998>)
 800740a:	2200      	movs	r2, #0
 800740c:	f7f9 f90c 	bl	8000628 <__aeabi_dmul>
 8007410:	2200      	movs	r2, #0
 8007412:	2300      	movs	r3, #0
 8007414:	4606      	mov	r6, r0
 8007416:	460f      	mov	r7, r1
 8007418:	f7f9 fb6e 	bl	8000af8 <__aeabi_dcmpeq>
 800741c:	2800      	cmp	r0, #0
 800741e:	d09e      	beq.n	800735e <_dtoa_r+0x65e>
 8007420:	e7d0      	b.n	80073c4 <_dtoa_r+0x6c4>
 8007422:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007424:	2a00      	cmp	r2, #0
 8007426:	f000 80ca 	beq.w	80075be <_dtoa_r+0x8be>
 800742a:	9a07      	ldr	r2, [sp, #28]
 800742c:	2a01      	cmp	r2, #1
 800742e:	f300 80ad 	bgt.w	800758c <_dtoa_r+0x88c>
 8007432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007434:	2a00      	cmp	r2, #0
 8007436:	f000 80a5 	beq.w	8007584 <_dtoa_r+0x884>
 800743a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800743e:	9e08      	ldr	r6, [sp, #32]
 8007440:	9d05      	ldr	r5, [sp, #20]
 8007442:	9a05      	ldr	r2, [sp, #20]
 8007444:	441a      	add	r2, r3
 8007446:	9205      	str	r2, [sp, #20]
 8007448:	9a06      	ldr	r2, [sp, #24]
 800744a:	2101      	movs	r1, #1
 800744c:	441a      	add	r2, r3
 800744e:	4620      	mov	r0, r4
 8007450:	9206      	str	r2, [sp, #24]
 8007452:	f000 fc3d 	bl	8007cd0 <__i2b>
 8007456:	4607      	mov	r7, r0
 8007458:	b165      	cbz	r5, 8007474 <_dtoa_r+0x774>
 800745a:	9b06      	ldr	r3, [sp, #24]
 800745c:	2b00      	cmp	r3, #0
 800745e:	dd09      	ble.n	8007474 <_dtoa_r+0x774>
 8007460:	42ab      	cmp	r3, r5
 8007462:	9a05      	ldr	r2, [sp, #20]
 8007464:	bfa8      	it	ge
 8007466:	462b      	movge	r3, r5
 8007468:	1ad2      	subs	r2, r2, r3
 800746a:	9205      	str	r2, [sp, #20]
 800746c:	9a06      	ldr	r2, [sp, #24]
 800746e:	1aed      	subs	r5, r5, r3
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	9306      	str	r3, [sp, #24]
 8007474:	9b08      	ldr	r3, [sp, #32]
 8007476:	b1f3      	cbz	r3, 80074b6 <_dtoa_r+0x7b6>
 8007478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 80a3 	beq.w	80075c6 <_dtoa_r+0x8c6>
 8007480:	2e00      	cmp	r6, #0
 8007482:	dd10      	ble.n	80074a6 <_dtoa_r+0x7a6>
 8007484:	4639      	mov	r1, r7
 8007486:	4632      	mov	r2, r6
 8007488:	4620      	mov	r0, r4
 800748a:	f000 fce1 	bl	8007e50 <__pow5mult>
 800748e:	4652      	mov	r2, sl
 8007490:	4601      	mov	r1, r0
 8007492:	4607      	mov	r7, r0
 8007494:	4620      	mov	r0, r4
 8007496:	f000 fc31 	bl	8007cfc <__multiply>
 800749a:	4651      	mov	r1, sl
 800749c:	4680      	mov	r8, r0
 800749e:	4620      	mov	r0, r4
 80074a0:	f000 fb60 	bl	8007b64 <_Bfree>
 80074a4:	46c2      	mov	sl, r8
 80074a6:	9b08      	ldr	r3, [sp, #32]
 80074a8:	1b9a      	subs	r2, r3, r6
 80074aa:	d004      	beq.n	80074b6 <_dtoa_r+0x7b6>
 80074ac:	4651      	mov	r1, sl
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 fcce 	bl	8007e50 <__pow5mult>
 80074b4:	4682      	mov	sl, r0
 80074b6:	2101      	movs	r1, #1
 80074b8:	4620      	mov	r0, r4
 80074ba:	f000 fc09 	bl	8007cd0 <__i2b>
 80074be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	4606      	mov	r6, r0
 80074c4:	f340 8081 	ble.w	80075ca <_dtoa_r+0x8ca>
 80074c8:	461a      	mov	r2, r3
 80074ca:	4601      	mov	r1, r0
 80074cc:	4620      	mov	r0, r4
 80074ce:	f000 fcbf 	bl	8007e50 <__pow5mult>
 80074d2:	9b07      	ldr	r3, [sp, #28]
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	4606      	mov	r6, r0
 80074d8:	dd7a      	ble.n	80075d0 <_dtoa_r+0x8d0>
 80074da:	f04f 0800 	mov.w	r8, #0
 80074de:	6933      	ldr	r3, [r6, #16]
 80074e0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80074e4:	6918      	ldr	r0, [r3, #16]
 80074e6:	f000 fba5 	bl	8007c34 <__hi0bits>
 80074ea:	f1c0 0020 	rsb	r0, r0, #32
 80074ee:	9b06      	ldr	r3, [sp, #24]
 80074f0:	4418      	add	r0, r3
 80074f2:	f010 001f 	ands.w	r0, r0, #31
 80074f6:	f000 8094 	beq.w	8007622 <_dtoa_r+0x922>
 80074fa:	f1c0 0320 	rsb	r3, r0, #32
 80074fe:	2b04      	cmp	r3, #4
 8007500:	f340 8085 	ble.w	800760e <_dtoa_r+0x90e>
 8007504:	9b05      	ldr	r3, [sp, #20]
 8007506:	f1c0 001c 	rsb	r0, r0, #28
 800750a:	4403      	add	r3, r0
 800750c:	9305      	str	r3, [sp, #20]
 800750e:	9b06      	ldr	r3, [sp, #24]
 8007510:	4403      	add	r3, r0
 8007512:	4405      	add	r5, r0
 8007514:	9306      	str	r3, [sp, #24]
 8007516:	9b05      	ldr	r3, [sp, #20]
 8007518:	2b00      	cmp	r3, #0
 800751a:	dd05      	ble.n	8007528 <_dtoa_r+0x828>
 800751c:	4651      	mov	r1, sl
 800751e:	461a      	mov	r2, r3
 8007520:	4620      	mov	r0, r4
 8007522:	f000 fcef 	bl	8007f04 <__lshift>
 8007526:	4682      	mov	sl, r0
 8007528:	9b06      	ldr	r3, [sp, #24]
 800752a:	2b00      	cmp	r3, #0
 800752c:	dd05      	ble.n	800753a <_dtoa_r+0x83a>
 800752e:	4631      	mov	r1, r6
 8007530:	461a      	mov	r2, r3
 8007532:	4620      	mov	r0, r4
 8007534:	f000 fce6 	bl	8007f04 <__lshift>
 8007538:	4606      	mov	r6, r0
 800753a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800753c:	2b00      	cmp	r3, #0
 800753e:	d072      	beq.n	8007626 <_dtoa_r+0x926>
 8007540:	4631      	mov	r1, r6
 8007542:	4650      	mov	r0, sl
 8007544:	f000 fd4a 	bl	8007fdc <__mcmp>
 8007548:	2800      	cmp	r0, #0
 800754a:	da6c      	bge.n	8007626 <_dtoa_r+0x926>
 800754c:	2300      	movs	r3, #0
 800754e:	4651      	mov	r1, sl
 8007550:	220a      	movs	r2, #10
 8007552:	4620      	mov	r0, r4
 8007554:	f000 fb28 	bl	8007ba8 <__multadd>
 8007558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800755a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800755e:	4682      	mov	sl, r0
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 81b0 	beq.w	80078c6 <_dtoa_r+0xbc6>
 8007566:	2300      	movs	r3, #0
 8007568:	4639      	mov	r1, r7
 800756a:	220a      	movs	r2, #10
 800756c:	4620      	mov	r0, r4
 800756e:	f000 fb1b 	bl	8007ba8 <__multadd>
 8007572:	9b01      	ldr	r3, [sp, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	4607      	mov	r7, r0
 8007578:	f300 8096 	bgt.w	80076a8 <_dtoa_r+0x9a8>
 800757c:	9b07      	ldr	r3, [sp, #28]
 800757e:	2b02      	cmp	r3, #2
 8007580:	dc59      	bgt.n	8007636 <_dtoa_r+0x936>
 8007582:	e091      	b.n	80076a8 <_dtoa_r+0x9a8>
 8007584:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007586:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800758a:	e758      	b.n	800743e <_dtoa_r+0x73e>
 800758c:	9b04      	ldr	r3, [sp, #16]
 800758e:	1e5e      	subs	r6, r3, #1
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	42b3      	cmp	r3, r6
 8007594:	bfbf      	itttt	lt
 8007596:	9b08      	ldrlt	r3, [sp, #32]
 8007598:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800759a:	9608      	strlt	r6, [sp, #32]
 800759c:	1af3      	sublt	r3, r6, r3
 800759e:	bfb4      	ite	lt
 80075a0:	18d2      	addlt	r2, r2, r3
 80075a2:	1b9e      	subge	r6, r3, r6
 80075a4:	9b04      	ldr	r3, [sp, #16]
 80075a6:	bfbc      	itt	lt
 80075a8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80075aa:	2600      	movlt	r6, #0
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bfb7      	itett	lt
 80075b0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80075b4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80075b8:	1a9d      	sublt	r5, r3, r2
 80075ba:	2300      	movlt	r3, #0
 80075bc:	e741      	b.n	8007442 <_dtoa_r+0x742>
 80075be:	9e08      	ldr	r6, [sp, #32]
 80075c0:	9d05      	ldr	r5, [sp, #20]
 80075c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80075c4:	e748      	b.n	8007458 <_dtoa_r+0x758>
 80075c6:	9a08      	ldr	r2, [sp, #32]
 80075c8:	e770      	b.n	80074ac <_dtoa_r+0x7ac>
 80075ca:	9b07      	ldr	r3, [sp, #28]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	dc19      	bgt.n	8007604 <_dtoa_r+0x904>
 80075d0:	9b02      	ldr	r3, [sp, #8]
 80075d2:	b9bb      	cbnz	r3, 8007604 <_dtoa_r+0x904>
 80075d4:	9b03      	ldr	r3, [sp, #12]
 80075d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80075da:	b99b      	cbnz	r3, 8007604 <_dtoa_r+0x904>
 80075dc:	9b03      	ldr	r3, [sp, #12]
 80075de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80075e2:	0d1b      	lsrs	r3, r3, #20
 80075e4:	051b      	lsls	r3, r3, #20
 80075e6:	b183      	cbz	r3, 800760a <_dtoa_r+0x90a>
 80075e8:	9b05      	ldr	r3, [sp, #20]
 80075ea:	3301      	adds	r3, #1
 80075ec:	9305      	str	r3, [sp, #20]
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	3301      	adds	r3, #1
 80075f2:	9306      	str	r3, [sp, #24]
 80075f4:	f04f 0801 	mov.w	r8, #1
 80075f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	f47f af6f 	bne.w	80074de <_dtoa_r+0x7de>
 8007600:	2001      	movs	r0, #1
 8007602:	e774      	b.n	80074ee <_dtoa_r+0x7ee>
 8007604:	f04f 0800 	mov.w	r8, #0
 8007608:	e7f6      	b.n	80075f8 <_dtoa_r+0x8f8>
 800760a:	4698      	mov	r8, r3
 800760c:	e7f4      	b.n	80075f8 <_dtoa_r+0x8f8>
 800760e:	d082      	beq.n	8007516 <_dtoa_r+0x816>
 8007610:	9a05      	ldr	r2, [sp, #20]
 8007612:	331c      	adds	r3, #28
 8007614:	441a      	add	r2, r3
 8007616:	9205      	str	r2, [sp, #20]
 8007618:	9a06      	ldr	r2, [sp, #24]
 800761a:	441a      	add	r2, r3
 800761c:	441d      	add	r5, r3
 800761e:	9206      	str	r2, [sp, #24]
 8007620:	e779      	b.n	8007516 <_dtoa_r+0x816>
 8007622:	4603      	mov	r3, r0
 8007624:	e7f4      	b.n	8007610 <_dtoa_r+0x910>
 8007626:	9b04      	ldr	r3, [sp, #16]
 8007628:	2b00      	cmp	r3, #0
 800762a:	dc37      	bgt.n	800769c <_dtoa_r+0x99c>
 800762c:	9b07      	ldr	r3, [sp, #28]
 800762e:	2b02      	cmp	r3, #2
 8007630:	dd34      	ble.n	800769c <_dtoa_r+0x99c>
 8007632:	9b04      	ldr	r3, [sp, #16]
 8007634:	9301      	str	r3, [sp, #4]
 8007636:	9b01      	ldr	r3, [sp, #4]
 8007638:	b963      	cbnz	r3, 8007654 <_dtoa_r+0x954>
 800763a:	4631      	mov	r1, r6
 800763c:	2205      	movs	r2, #5
 800763e:	4620      	mov	r0, r4
 8007640:	f000 fab2 	bl	8007ba8 <__multadd>
 8007644:	4601      	mov	r1, r0
 8007646:	4606      	mov	r6, r0
 8007648:	4650      	mov	r0, sl
 800764a:	f000 fcc7 	bl	8007fdc <__mcmp>
 800764e:	2800      	cmp	r0, #0
 8007650:	f73f adbb 	bgt.w	80071ca <_dtoa_r+0x4ca>
 8007654:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007656:	9d00      	ldr	r5, [sp, #0]
 8007658:	ea6f 0b03 	mvn.w	fp, r3
 800765c:	f04f 0800 	mov.w	r8, #0
 8007660:	4631      	mov	r1, r6
 8007662:	4620      	mov	r0, r4
 8007664:	f000 fa7e 	bl	8007b64 <_Bfree>
 8007668:	2f00      	cmp	r7, #0
 800766a:	f43f aeab 	beq.w	80073c4 <_dtoa_r+0x6c4>
 800766e:	f1b8 0f00 	cmp.w	r8, #0
 8007672:	d005      	beq.n	8007680 <_dtoa_r+0x980>
 8007674:	45b8      	cmp	r8, r7
 8007676:	d003      	beq.n	8007680 <_dtoa_r+0x980>
 8007678:	4641      	mov	r1, r8
 800767a:	4620      	mov	r0, r4
 800767c:	f000 fa72 	bl	8007b64 <_Bfree>
 8007680:	4639      	mov	r1, r7
 8007682:	4620      	mov	r0, r4
 8007684:	f000 fa6e 	bl	8007b64 <_Bfree>
 8007688:	e69c      	b.n	80073c4 <_dtoa_r+0x6c4>
 800768a:	2600      	movs	r6, #0
 800768c:	4637      	mov	r7, r6
 800768e:	e7e1      	b.n	8007654 <_dtoa_r+0x954>
 8007690:	46bb      	mov	fp, r7
 8007692:	4637      	mov	r7, r6
 8007694:	e599      	b.n	80071ca <_dtoa_r+0x4ca>
 8007696:	bf00      	nop
 8007698:	40240000 	.word	0x40240000
 800769c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800769e:	2b00      	cmp	r3, #0
 80076a0:	f000 80c8 	beq.w	8007834 <_dtoa_r+0xb34>
 80076a4:	9b04      	ldr	r3, [sp, #16]
 80076a6:	9301      	str	r3, [sp, #4]
 80076a8:	2d00      	cmp	r5, #0
 80076aa:	dd05      	ble.n	80076b8 <_dtoa_r+0x9b8>
 80076ac:	4639      	mov	r1, r7
 80076ae:	462a      	mov	r2, r5
 80076b0:	4620      	mov	r0, r4
 80076b2:	f000 fc27 	bl	8007f04 <__lshift>
 80076b6:	4607      	mov	r7, r0
 80076b8:	f1b8 0f00 	cmp.w	r8, #0
 80076bc:	d05b      	beq.n	8007776 <_dtoa_r+0xa76>
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	4620      	mov	r0, r4
 80076c2:	f000 fa0f 	bl	8007ae4 <_Balloc>
 80076c6:	4605      	mov	r5, r0
 80076c8:	b928      	cbnz	r0, 80076d6 <_dtoa_r+0x9d6>
 80076ca:	4b83      	ldr	r3, [pc, #524]	; (80078d8 <_dtoa_r+0xbd8>)
 80076cc:	4602      	mov	r2, r0
 80076ce:	f240 21ef 	movw	r1, #751	; 0x2ef
 80076d2:	f7ff bb2e 	b.w	8006d32 <_dtoa_r+0x32>
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	3202      	adds	r2, #2
 80076da:	0092      	lsls	r2, r2, #2
 80076dc:	f107 010c 	add.w	r1, r7, #12
 80076e0:	300c      	adds	r0, #12
 80076e2:	f001 f985 	bl	80089f0 <memcpy>
 80076e6:	2201      	movs	r2, #1
 80076e8:	4629      	mov	r1, r5
 80076ea:	4620      	mov	r0, r4
 80076ec:	f000 fc0a 	bl	8007f04 <__lshift>
 80076f0:	9b00      	ldr	r3, [sp, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	9304      	str	r3, [sp, #16]
 80076f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076fa:	4413      	add	r3, r2
 80076fc:	9308      	str	r3, [sp, #32]
 80076fe:	9b02      	ldr	r3, [sp, #8]
 8007700:	f003 0301 	and.w	r3, r3, #1
 8007704:	46b8      	mov	r8, r7
 8007706:	9306      	str	r3, [sp, #24]
 8007708:	4607      	mov	r7, r0
 800770a:	9b04      	ldr	r3, [sp, #16]
 800770c:	4631      	mov	r1, r6
 800770e:	3b01      	subs	r3, #1
 8007710:	4650      	mov	r0, sl
 8007712:	9301      	str	r3, [sp, #4]
 8007714:	f7ff fa6c 	bl	8006bf0 <quorem>
 8007718:	4641      	mov	r1, r8
 800771a:	9002      	str	r0, [sp, #8]
 800771c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007720:	4650      	mov	r0, sl
 8007722:	f000 fc5b 	bl	8007fdc <__mcmp>
 8007726:	463a      	mov	r2, r7
 8007728:	9005      	str	r0, [sp, #20]
 800772a:	4631      	mov	r1, r6
 800772c:	4620      	mov	r0, r4
 800772e:	f000 fc71 	bl	8008014 <__mdiff>
 8007732:	68c2      	ldr	r2, [r0, #12]
 8007734:	4605      	mov	r5, r0
 8007736:	bb02      	cbnz	r2, 800777a <_dtoa_r+0xa7a>
 8007738:	4601      	mov	r1, r0
 800773a:	4650      	mov	r0, sl
 800773c:	f000 fc4e 	bl	8007fdc <__mcmp>
 8007740:	4602      	mov	r2, r0
 8007742:	4629      	mov	r1, r5
 8007744:	4620      	mov	r0, r4
 8007746:	9209      	str	r2, [sp, #36]	; 0x24
 8007748:	f000 fa0c 	bl	8007b64 <_Bfree>
 800774c:	9b07      	ldr	r3, [sp, #28]
 800774e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007750:	9d04      	ldr	r5, [sp, #16]
 8007752:	ea43 0102 	orr.w	r1, r3, r2
 8007756:	9b06      	ldr	r3, [sp, #24]
 8007758:	4319      	orrs	r1, r3
 800775a:	d110      	bne.n	800777e <_dtoa_r+0xa7e>
 800775c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8007760:	d029      	beq.n	80077b6 <_dtoa_r+0xab6>
 8007762:	9b05      	ldr	r3, [sp, #20]
 8007764:	2b00      	cmp	r3, #0
 8007766:	dd02      	ble.n	800776e <_dtoa_r+0xa6e>
 8007768:	9b02      	ldr	r3, [sp, #8]
 800776a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800776e:	9b01      	ldr	r3, [sp, #4]
 8007770:	f883 9000 	strb.w	r9, [r3]
 8007774:	e774      	b.n	8007660 <_dtoa_r+0x960>
 8007776:	4638      	mov	r0, r7
 8007778:	e7ba      	b.n	80076f0 <_dtoa_r+0x9f0>
 800777a:	2201      	movs	r2, #1
 800777c:	e7e1      	b.n	8007742 <_dtoa_r+0xa42>
 800777e:	9b05      	ldr	r3, [sp, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	db04      	blt.n	800778e <_dtoa_r+0xa8e>
 8007784:	9907      	ldr	r1, [sp, #28]
 8007786:	430b      	orrs	r3, r1
 8007788:	9906      	ldr	r1, [sp, #24]
 800778a:	430b      	orrs	r3, r1
 800778c:	d120      	bne.n	80077d0 <_dtoa_r+0xad0>
 800778e:	2a00      	cmp	r2, #0
 8007790:	dded      	ble.n	800776e <_dtoa_r+0xa6e>
 8007792:	4651      	mov	r1, sl
 8007794:	2201      	movs	r2, #1
 8007796:	4620      	mov	r0, r4
 8007798:	f000 fbb4 	bl	8007f04 <__lshift>
 800779c:	4631      	mov	r1, r6
 800779e:	4682      	mov	sl, r0
 80077a0:	f000 fc1c 	bl	8007fdc <__mcmp>
 80077a4:	2800      	cmp	r0, #0
 80077a6:	dc03      	bgt.n	80077b0 <_dtoa_r+0xab0>
 80077a8:	d1e1      	bne.n	800776e <_dtoa_r+0xa6e>
 80077aa:	f019 0f01 	tst.w	r9, #1
 80077ae:	d0de      	beq.n	800776e <_dtoa_r+0xa6e>
 80077b0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077b4:	d1d8      	bne.n	8007768 <_dtoa_r+0xa68>
 80077b6:	9a01      	ldr	r2, [sp, #4]
 80077b8:	2339      	movs	r3, #57	; 0x39
 80077ba:	7013      	strb	r3, [r2, #0]
 80077bc:	462b      	mov	r3, r5
 80077be:	461d      	mov	r5, r3
 80077c0:	3b01      	subs	r3, #1
 80077c2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80077c6:	2a39      	cmp	r2, #57	; 0x39
 80077c8:	d06c      	beq.n	80078a4 <_dtoa_r+0xba4>
 80077ca:	3201      	adds	r2, #1
 80077cc:	701a      	strb	r2, [r3, #0]
 80077ce:	e747      	b.n	8007660 <_dtoa_r+0x960>
 80077d0:	2a00      	cmp	r2, #0
 80077d2:	dd07      	ble.n	80077e4 <_dtoa_r+0xae4>
 80077d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80077d8:	d0ed      	beq.n	80077b6 <_dtoa_r+0xab6>
 80077da:	9a01      	ldr	r2, [sp, #4]
 80077dc:	f109 0301 	add.w	r3, r9, #1
 80077e0:	7013      	strb	r3, [r2, #0]
 80077e2:	e73d      	b.n	8007660 <_dtoa_r+0x960>
 80077e4:	9b04      	ldr	r3, [sp, #16]
 80077e6:	9a08      	ldr	r2, [sp, #32]
 80077e8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d043      	beq.n	8007878 <_dtoa_r+0xb78>
 80077f0:	4651      	mov	r1, sl
 80077f2:	2300      	movs	r3, #0
 80077f4:	220a      	movs	r2, #10
 80077f6:	4620      	mov	r0, r4
 80077f8:	f000 f9d6 	bl	8007ba8 <__multadd>
 80077fc:	45b8      	cmp	r8, r7
 80077fe:	4682      	mov	sl, r0
 8007800:	f04f 0300 	mov.w	r3, #0
 8007804:	f04f 020a 	mov.w	r2, #10
 8007808:	4641      	mov	r1, r8
 800780a:	4620      	mov	r0, r4
 800780c:	d107      	bne.n	800781e <_dtoa_r+0xb1e>
 800780e:	f000 f9cb 	bl	8007ba8 <__multadd>
 8007812:	4680      	mov	r8, r0
 8007814:	4607      	mov	r7, r0
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	3301      	adds	r3, #1
 800781a:	9304      	str	r3, [sp, #16]
 800781c:	e775      	b.n	800770a <_dtoa_r+0xa0a>
 800781e:	f000 f9c3 	bl	8007ba8 <__multadd>
 8007822:	4639      	mov	r1, r7
 8007824:	4680      	mov	r8, r0
 8007826:	2300      	movs	r3, #0
 8007828:	220a      	movs	r2, #10
 800782a:	4620      	mov	r0, r4
 800782c:	f000 f9bc 	bl	8007ba8 <__multadd>
 8007830:	4607      	mov	r7, r0
 8007832:	e7f0      	b.n	8007816 <_dtoa_r+0xb16>
 8007834:	9b04      	ldr	r3, [sp, #16]
 8007836:	9301      	str	r3, [sp, #4]
 8007838:	9d00      	ldr	r5, [sp, #0]
 800783a:	4631      	mov	r1, r6
 800783c:	4650      	mov	r0, sl
 800783e:	f7ff f9d7 	bl	8006bf0 <quorem>
 8007842:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8007846:	9b00      	ldr	r3, [sp, #0]
 8007848:	f805 9b01 	strb.w	r9, [r5], #1
 800784c:	1aea      	subs	r2, r5, r3
 800784e:	9b01      	ldr	r3, [sp, #4]
 8007850:	4293      	cmp	r3, r2
 8007852:	dd07      	ble.n	8007864 <_dtoa_r+0xb64>
 8007854:	4651      	mov	r1, sl
 8007856:	2300      	movs	r3, #0
 8007858:	220a      	movs	r2, #10
 800785a:	4620      	mov	r0, r4
 800785c:	f000 f9a4 	bl	8007ba8 <__multadd>
 8007860:	4682      	mov	sl, r0
 8007862:	e7ea      	b.n	800783a <_dtoa_r+0xb3a>
 8007864:	9b01      	ldr	r3, [sp, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	bfc8      	it	gt
 800786a:	461d      	movgt	r5, r3
 800786c:	9b00      	ldr	r3, [sp, #0]
 800786e:	bfd8      	it	le
 8007870:	2501      	movle	r5, #1
 8007872:	441d      	add	r5, r3
 8007874:	f04f 0800 	mov.w	r8, #0
 8007878:	4651      	mov	r1, sl
 800787a:	2201      	movs	r2, #1
 800787c:	4620      	mov	r0, r4
 800787e:	f000 fb41 	bl	8007f04 <__lshift>
 8007882:	4631      	mov	r1, r6
 8007884:	4682      	mov	sl, r0
 8007886:	f000 fba9 	bl	8007fdc <__mcmp>
 800788a:	2800      	cmp	r0, #0
 800788c:	dc96      	bgt.n	80077bc <_dtoa_r+0xabc>
 800788e:	d102      	bne.n	8007896 <_dtoa_r+0xb96>
 8007890:	f019 0f01 	tst.w	r9, #1
 8007894:	d192      	bne.n	80077bc <_dtoa_r+0xabc>
 8007896:	462b      	mov	r3, r5
 8007898:	461d      	mov	r5, r3
 800789a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800789e:	2a30      	cmp	r2, #48	; 0x30
 80078a0:	d0fa      	beq.n	8007898 <_dtoa_r+0xb98>
 80078a2:	e6dd      	b.n	8007660 <_dtoa_r+0x960>
 80078a4:	9a00      	ldr	r2, [sp, #0]
 80078a6:	429a      	cmp	r2, r3
 80078a8:	d189      	bne.n	80077be <_dtoa_r+0xabe>
 80078aa:	f10b 0b01 	add.w	fp, fp, #1
 80078ae:	2331      	movs	r3, #49	; 0x31
 80078b0:	e796      	b.n	80077e0 <_dtoa_r+0xae0>
 80078b2:	4b0a      	ldr	r3, [pc, #40]	; (80078dc <_dtoa_r+0xbdc>)
 80078b4:	f7ff ba99 	b.w	8006dea <_dtoa_r+0xea>
 80078b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	f47f aa6d 	bne.w	8006d9a <_dtoa_r+0x9a>
 80078c0:	4b07      	ldr	r3, [pc, #28]	; (80078e0 <_dtoa_r+0xbe0>)
 80078c2:	f7ff ba92 	b.w	8006dea <_dtoa_r+0xea>
 80078c6:	9b01      	ldr	r3, [sp, #4]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	dcb5      	bgt.n	8007838 <_dtoa_r+0xb38>
 80078cc:	9b07      	ldr	r3, [sp, #28]
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	f73f aeb1 	bgt.w	8007636 <_dtoa_r+0x936>
 80078d4:	e7b0      	b.n	8007838 <_dtoa_r+0xb38>
 80078d6:	bf00      	nop
 80078d8:	08008fdf 	.word	0x08008fdf
 80078dc:	08008ea9 	.word	0x08008ea9
 80078e0:	08008f7a 	.word	0x08008f7a

080078e4 <_free_r>:
 80078e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80078e6:	2900      	cmp	r1, #0
 80078e8:	d044      	beq.n	8007974 <_free_r+0x90>
 80078ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078ee:	9001      	str	r0, [sp, #4]
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	f1a1 0404 	sub.w	r4, r1, #4
 80078f6:	bfb8      	it	lt
 80078f8:	18e4      	addlt	r4, r4, r3
 80078fa:	f000 f8e7 	bl	8007acc <__malloc_lock>
 80078fe:	4a1e      	ldr	r2, [pc, #120]	; (8007978 <_free_r+0x94>)
 8007900:	9801      	ldr	r0, [sp, #4]
 8007902:	6813      	ldr	r3, [r2, #0]
 8007904:	b933      	cbnz	r3, 8007914 <_free_r+0x30>
 8007906:	6063      	str	r3, [r4, #4]
 8007908:	6014      	str	r4, [r2, #0]
 800790a:	b003      	add	sp, #12
 800790c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007910:	f000 b8e2 	b.w	8007ad8 <__malloc_unlock>
 8007914:	42a3      	cmp	r3, r4
 8007916:	d908      	bls.n	800792a <_free_r+0x46>
 8007918:	6825      	ldr	r5, [r4, #0]
 800791a:	1961      	adds	r1, r4, r5
 800791c:	428b      	cmp	r3, r1
 800791e:	bf01      	itttt	eq
 8007920:	6819      	ldreq	r1, [r3, #0]
 8007922:	685b      	ldreq	r3, [r3, #4]
 8007924:	1949      	addeq	r1, r1, r5
 8007926:	6021      	streq	r1, [r4, #0]
 8007928:	e7ed      	b.n	8007906 <_free_r+0x22>
 800792a:	461a      	mov	r2, r3
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	b10b      	cbz	r3, 8007934 <_free_r+0x50>
 8007930:	42a3      	cmp	r3, r4
 8007932:	d9fa      	bls.n	800792a <_free_r+0x46>
 8007934:	6811      	ldr	r1, [r2, #0]
 8007936:	1855      	adds	r5, r2, r1
 8007938:	42a5      	cmp	r5, r4
 800793a:	d10b      	bne.n	8007954 <_free_r+0x70>
 800793c:	6824      	ldr	r4, [r4, #0]
 800793e:	4421      	add	r1, r4
 8007940:	1854      	adds	r4, r2, r1
 8007942:	42a3      	cmp	r3, r4
 8007944:	6011      	str	r1, [r2, #0]
 8007946:	d1e0      	bne.n	800790a <_free_r+0x26>
 8007948:	681c      	ldr	r4, [r3, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	6053      	str	r3, [r2, #4]
 800794e:	440c      	add	r4, r1
 8007950:	6014      	str	r4, [r2, #0]
 8007952:	e7da      	b.n	800790a <_free_r+0x26>
 8007954:	d902      	bls.n	800795c <_free_r+0x78>
 8007956:	230c      	movs	r3, #12
 8007958:	6003      	str	r3, [r0, #0]
 800795a:	e7d6      	b.n	800790a <_free_r+0x26>
 800795c:	6825      	ldr	r5, [r4, #0]
 800795e:	1961      	adds	r1, r4, r5
 8007960:	428b      	cmp	r3, r1
 8007962:	bf04      	itt	eq
 8007964:	6819      	ldreq	r1, [r3, #0]
 8007966:	685b      	ldreq	r3, [r3, #4]
 8007968:	6063      	str	r3, [r4, #4]
 800796a:	bf04      	itt	eq
 800796c:	1949      	addeq	r1, r1, r5
 800796e:	6021      	streq	r1, [r4, #0]
 8007970:	6054      	str	r4, [r2, #4]
 8007972:	e7ca      	b.n	800790a <_free_r+0x26>
 8007974:	b003      	add	sp, #12
 8007976:	bd30      	pop	{r4, r5, pc}
 8007978:	20000530 	.word	0x20000530

0800797c <malloc>:
 800797c:	4b02      	ldr	r3, [pc, #8]	; (8007988 <malloc+0xc>)
 800797e:	4601      	mov	r1, r0
 8007980:	6818      	ldr	r0, [r3, #0]
 8007982:	f000 b823 	b.w	80079cc <_malloc_r>
 8007986:	bf00      	nop
 8007988:	20000068 	.word	0x20000068

0800798c <sbrk_aligned>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4e0e      	ldr	r6, [pc, #56]	; (80079c8 <sbrk_aligned+0x3c>)
 8007990:	460c      	mov	r4, r1
 8007992:	6831      	ldr	r1, [r6, #0]
 8007994:	4605      	mov	r5, r0
 8007996:	b911      	cbnz	r1, 800799e <sbrk_aligned+0x12>
 8007998:	f001 f81a 	bl	80089d0 <_sbrk_r>
 800799c:	6030      	str	r0, [r6, #0]
 800799e:	4621      	mov	r1, r4
 80079a0:	4628      	mov	r0, r5
 80079a2:	f001 f815 	bl	80089d0 <_sbrk_r>
 80079a6:	1c43      	adds	r3, r0, #1
 80079a8:	d00a      	beq.n	80079c0 <sbrk_aligned+0x34>
 80079aa:	1cc4      	adds	r4, r0, #3
 80079ac:	f024 0403 	bic.w	r4, r4, #3
 80079b0:	42a0      	cmp	r0, r4
 80079b2:	d007      	beq.n	80079c4 <sbrk_aligned+0x38>
 80079b4:	1a21      	subs	r1, r4, r0
 80079b6:	4628      	mov	r0, r5
 80079b8:	f001 f80a 	bl	80089d0 <_sbrk_r>
 80079bc:	3001      	adds	r0, #1
 80079be:	d101      	bne.n	80079c4 <sbrk_aligned+0x38>
 80079c0:	f04f 34ff 	mov.w	r4, #4294967295
 80079c4:	4620      	mov	r0, r4
 80079c6:	bd70      	pop	{r4, r5, r6, pc}
 80079c8:	20000534 	.word	0x20000534

080079cc <_malloc_r>:
 80079cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d0:	1ccd      	adds	r5, r1, #3
 80079d2:	f025 0503 	bic.w	r5, r5, #3
 80079d6:	3508      	adds	r5, #8
 80079d8:	2d0c      	cmp	r5, #12
 80079da:	bf38      	it	cc
 80079dc:	250c      	movcc	r5, #12
 80079de:	2d00      	cmp	r5, #0
 80079e0:	4607      	mov	r7, r0
 80079e2:	db01      	blt.n	80079e8 <_malloc_r+0x1c>
 80079e4:	42a9      	cmp	r1, r5
 80079e6:	d905      	bls.n	80079f4 <_malloc_r+0x28>
 80079e8:	230c      	movs	r3, #12
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	2600      	movs	r6, #0
 80079ee:	4630      	mov	r0, r6
 80079f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007ac8 <_malloc_r+0xfc>
 80079f8:	f000 f868 	bl	8007acc <__malloc_lock>
 80079fc:	f8d8 3000 	ldr.w	r3, [r8]
 8007a00:	461c      	mov	r4, r3
 8007a02:	bb5c      	cbnz	r4, 8007a5c <_malloc_r+0x90>
 8007a04:	4629      	mov	r1, r5
 8007a06:	4638      	mov	r0, r7
 8007a08:	f7ff ffc0 	bl	800798c <sbrk_aligned>
 8007a0c:	1c43      	adds	r3, r0, #1
 8007a0e:	4604      	mov	r4, r0
 8007a10:	d155      	bne.n	8007abe <_malloc_r+0xf2>
 8007a12:	f8d8 4000 	ldr.w	r4, [r8]
 8007a16:	4626      	mov	r6, r4
 8007a18:	2e00      	cmp	r6, #0
 8007a1a:	d145      	bne.n	8007aa8 <_malloc_r+0xdc>
 8007a1c:	2c00      	cmp	r4, #0
 8007a1e:	d048      	beq.n	8007ab2 <_malloc_r+0xe6>
 8007a20:	6823      	ldr	r3, [r4, #0]
 8007a22:	4631      	mov	r1, r6
 8007a24:	4638      	mov	r0, r7
 8007a26:	eb04 0903 	add.w	r9, r4, r3
 8007a2a:	f000 ffd1 	bl	80089d0 <_sbrk_r>
 8007a2e:	4581      	cmp	r9, r0
 8007a30:	d13f      	bne.n	8007ab2 <_malloc_r+0xe6>
 8007a32:	6821      	ldr	r1, [r4, #0]
 8007a34:	1a6d      	subs	r5, r5, r1
 8007a36:	4629      	mov	r1, r5
 8007a38:	4638      	mov	r0, r7
 8007a3a:	f7ff ffa7 	bl	800798c <sbrk_aligned>
 8007a3e:	3001      	adds	r0, #1
 8007a40:	d037      	beq.n	8007ab2 <_malloc_r+0xe6>
 8007a42:	6823      	ldr	r3, [r4, #0]
 8007a44:	442b      	add	r3, r5
 8007a46:	6023      	str	r3, [r4, #0]
 8007a48:	f8d8 3000 	ldr.w	r3, [r8]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d038      	beq.n	8007ac2 <_malloc_r+0xf6>
 8007a50:	685a      	ldr	r2, [r3, #4]
 8007a52:	42a2      	cmp	r2, r4
 8007a54:	d12b      	bne.n	8007aae <_malloc_r+0xe2>
 8007a56:	2200      	movs	r2, #0
 8007a58:	605a      	str	r2, [r3, #4]
 8007a5a:	e00f      	b.n	8007a7c <_malloc_r+0xb0>
 8007a5c:	6822      	ldr	r2, [r4, #0]
 8007a5e:	1b52      	subs	r2, r2, r5
 8007a60:	d41f      	bmi.n	8007aa2 <_malloc_r+0xd6>
 8007a62:	2a0b      	cmp	r2, #11
 8007a64:	d917      	bls.n	8007a96 <_malloc_r+0xca>
 8007a66:	1961      	adds	r1, r4, r5
 8007a68:	42a3      	cmp	r3, r4
 8007a6a:	6025      	str	r5, [r4, #0]
 8007a6c:	bf18      	it	ne
 8007a6e:	6059      	strne	r1, [r3, #4]
 8007a70:	6863      	ldr	r3, [r4, #4]
 8007a72:	bf08      	it	eq
 8007a74:	f8c8 1000 	streq.w	r1, [r8]
 8007a78:	5162      	str	r2, [r4, r5]
 8007a7a:	604b      	str	r3, [r1, #4]
 8007a7c:	4638      	mov	r0, r7
 8007a7e:	f104 060b 	add.w	r6, r4, #11
 8007a82:	f000 f829 	bl	8007ad8 <__malloc_unlock>
 8007a86:	f026 0607 	bic.w	r6, r6, #7
 8007a8a:	1d23      	adds	r3, r4, #4
 8007a8c:	1af2      	subs	r2, r6, r3
 8007a8e:	d0ae      	beq.n	80079ee <_malloc_r+0x22>
 8007a90:	1b9b      	subs	r3, r3, r6
 8007a92:	50a3      	str	r3, [r4, r2]
 8007a94:	e7ab      	b.n	80079ee <_malloc_r+0x22>
 8007a96:	42a3      	cmp	r3, r4
 8007a98:	6862      	ldr	r2, [r4, #4]
 8007a9a:	d1dd      	bne.n	8007a58 <_malloc_r+0x8c>
 8007a9c:	f8c8 2000 	str.w	r2, [r8]
 8007aa0:	e7ec      	b.n	8007a7c <_malloc_r+0xb0>
 8007aa2:	4623      	mov	r3, r4
 8007aa4:	6864      	ldr	r4, [r4, #4]
 8007aa6:	e7ac      	b.n	8007a02 <_malloc_r+0x36>
 8007aa8:	4634      	mov	r4, r6
 8007aaa:	6876      	ldr	r6, [r6, #4]
 8007aac:	e7b4      	b.n	8007a18 <_malloc_r+0x4c>
 8007aae:	4613      	mov	r3, r2
 8007ab0:	e7cc      	b.n	8007a4c <_malloc_r+0x80>
 8007ab2:	230c      	movs	r3, #12
 8007ab4:	603b      	str	r3, [r7, #0]
 8007ab6:	4638      	mov	r0, r7
 8007ab8:	f000 f80e 	bl	8007ad8 <__malloc_unlock>
 8007abc:	e797      	b.n	80079ee <_malloc_r+0x22>
 8007abe:	6025      	str	r5, [r4, #0]
 8007ac0:	e7dc      	b.n	8007a7c <_malloc_r+0xb0>
 8007ac2:	605b      	str	r3, [r3, #4]
 8007ac4:	deff      	udf	#255	; 0xff
 8007ac6:	bf00      	nop
 8007ac8:	20000530 	.word	0x20000530

08007acc <__malloc_lock>:
 8007acc:	4801      	ldr	r0, [pc, #4]	; (8007ad4 <__malloc_lock+0x8>)
 8007ace:	f7ff b86e 	b.w	8006bae <__retarget_lock_acquire_recursive>
 8007ad2:	bf00      	nop
 8007ad4:	2000052c 	.word	0x2000052c

08007ad8 <__malloc_unlock>:
 8007ad8:	4801      	ldr	r0, [pc, #4]	; (8007ae0 <__malloc_unlock+0x8>)
 8007ada:	f7ff b869 	b.w	8006bb0 <__retarget_lock_release_recursive>
 8007ade:	bf00      	nop
 8007ae0:	2000052c 	.word	0x2000052c

08007ae4 <_Balloc>:
 8007ae4:	b570      	push	{r4, r5, r6, lr}
 8007ae6:	69c6      	ldr	r6, [r0, #28]
 8007ae8:	4604      	mov	r4, r0
 8007aea:	460d      	mov	r5, r1
 8007aec:	b976      	cbnz	r6, 8007b0c <_Balloc+0x28>
 8007aee:	2010      	movs	r0, #16
 8007af0:	f7ff ff44 	bl	800797c <malloc>
 8007af4:	4602      	mov	r2, r0
 8007af6:	61e0      	str	r0, [r4, #28]
 8007af8:	b920      	cbnz	r0, 8007b04 <_Balloc+0x20>
 8007afa:	4b18      	ldr	r3, [pc, #96]	; (8007b5c <_Balloc+0x78>)
 8007afc:	4818      	ldr	r0, [pc, #96]	; (8007b60 <_Balloc+0x7c>)
 8007afe:	216b      	movs	r1, #107	; 0x6b
 8007b00:	f7ff f858 	bl	8006bb4 <__assert_func>
 8007b04:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b08:	6006      	str	r6, [r0, #0]
 8007b0a:	60c6      	str	r6, [r0, #12]
 8007b0c:	69e6      	ldr	r6, [r4, #28]
 8007b0e:	68f3      	ldr	r3, [r6, #12]
 8007b10:	b183      	cbz	r3, 8007b34 <_Balloc+0x50>
 8007b12:	69e3      	ldr	r3, [r4, #28]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007b1a:	b9b8      	cbnz	r0, 8007b4c <_Balloc+0x68>
 8007b1c:	2101      	movs	r1, #1
 8007b1e:	fa01 f605 	lsl.w	r6, r1, r5
 8007b22:	1d72      	adds	r2, r6, #5
 8007b24:	0092      	lsls	r2, r2, #2
 8007b26:	4620      	mov	r0, r4
 8007b28:	f000 ff77 	bl	8008a1a <_calloc_r>
 8007b2c:	b160      	cbz	r0, 8007b48 <_Balloc+0x64>
 8007b2e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007b32:	e00e      	b.n	8007b52 <_Balloc+0x6e>
 8007b34:	2221      	movs	r2, #33	; 0x21
 8007b36:	2104      	movs	r1, #4
 8007b38:	4620      	mov	r0, r4
 8007b3a:	f000 ff6e 	bl	8008a1a <_calloc_r>
 8007b3e:	69e3      	ldr	r3, [r4, #28]
 8007b40:	60f0      	str	r0, [r6, #12]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e4      	bne.n	8007b12 <_Balloc+0x2e>
 8007b48:	2000      	movs	r0, #0
 8007b4a:	bd70      	pop	{r4, r5, r6, pc}
 8007b4c:	6802      	ldr	r2, [r0, #0]
 8007b4e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b52:	2300      	movs	r3, #0
 8007b54:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b58:	e7f7      	b.n	8007b4a <_Balloc+0x66>
 8007b5a:	bf00      	nop
 8007b5c:	08008ecd 	.word	0x08008ecd
 8007b60:	08008ff0 	.word	0x08008ff0

08007b64 <_Bfree>:
 8007b64:	b570      	push	{r4, r5, r6, lr}
 8007b66:	69c6      	ldr	r6, [r0, #28]
 8007b68:	4605      	mov	r5, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	b976      	cbnz	r6, 8007b8c <_Bfree+0x28>
 8007b6e:	2010      	movs	r0, #16
 8007b70:	f7ff ff04 	bl	800797c <malloc>
 8007b74:	4602      	mov	r2, r0
 8007b76:	61e8      	str	r0, [r5, #28]
 8007b78:	b920      	cbnz	r0, 8007b84 <_Bfree+0x20>
 8007b7a:	4b09      	ldr	r3, [pc, #36]	; (8007ba0 <_Bfree+0x3c>)
 8007b7c:	4809      	ldr	r0, [pc, #36]	; (8007ba4 <_Bfree+0x40>)
 8007b7e:	218f      	movs	r1, #143	; 0x8f
 8007b80:	f7ff f818 	bl	8006bb4 <__assert_func>
 8007b84:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b88:	6006      	str	r6, [r0, #0]
 8007b8a:	60c6      	str	r6, [r0, #12]
 8007b8c:	b13c      	cbz	r4, 8007b9e <_Bfree+0x3a>
 8007b8e:	69eb      	ldr	r3, [r5, #28]
 8007b90:	6862      	ldr	r2, [r4, #4]
 8007b92:	68db      	ldr	r3, [r3, #12]
 8007b94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b98:	6021      	str	r1, [r4, #0]
 8007b9a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b9e:	bd70      	pop	{r4, r5, r6, pc}
 8007ba0:	08008ecd 	.word	0x08008ecd
 8007ba4:	08008ff0 	.word	0x08008ff0

08007ba8 <__multadd>:
 8007ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bac:	690d      	ldr	r5, [r1, #16]
 8007bae:	4607      	mov	r7, r0
 8007bb0:	460c      	mov	r4, r1
 8007bb2:	461e      	mov	r6, r3
 8007bb4:	f101 0c14 	add.w	ip, r1, #20
 8007bb8:	2000      	movs	r0, #0
 8007bba:	f8dc 3000 	ldr.w	r3, [ip]
 8007bbe:	b299      	uxth	r1, r3
 8007bc0:	fb02 6101 	mla	r1, r2, r1, r6
 8007bc4:	0c1e      	lsrs	r6, r3, #16
 8007bc6:	0c0b      	lsrs	r3, r1, #16
 8007bc8:	fb02 3306 	mla	r3, r2, r6, r3
 8007bcc:	b289      	uxth	r1, r1
 8007bce:	3001      	adds	r0, #1
 8007bd0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007bd4:	4285      	cmp	r5, r0
 8007bd6:	f84c 1b04 	str.w	r1, [ip], #4
 8007bda:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007bde:	dcec      	bgt.n	8007bba <__multadd+0x12>
 8007be0:	b30e      	cbz	r6, 8007c26 <__multadd+0x7e>
 8007be2:	68a3      	ldr	r3, [r4, #8]
 8007be4:	42ab      	cmp	r3, r5
 8007be6:	dc19      	bgt.n	8007c1c <__multadd+0x74>
 8007be8:	6861      	ldr	r1, [r4, #4]
 8007bea:	4638      	mov	r0, r7
 8007bec:	3101      	adds	r1, #1
 8007bee:	f7ff ff79 	bl	8007ae4 <_Balloc>
 8007bf2:	4680      	mov	r8, r0
 8007bf4:	b928      	cbnz	r0, 8007c02 <__multadd+0x5a>
 8007bf6:	4602      	mov	r2, r0
 8007bf8:	4b0c      	ldr	r3, [pc, #48]	; (8007c2c <__multadd+0x84>)
 8007bfa:	480d      	ldr	r0, [pc, #52]	; (8007c30 <__multadd+0x88>)
 8007bfc:	21ba      	movs	r1, #186	; 0xba
 8007bfe:	f7fe ffd9 	bl	8006bb4 <__assert_func>
 8007c02:	6922      	ldr	r2, [r4, #16]
 8007c04:	3202      	adds	r2, #2
 8007c06:	f104 010c 	add.w	r1, r4, #12
 8007c0a:	0092      	lsls	r2, r2, #2
 8007c0c:	300c      	adds	r0, #12
 8007c0e:	f000 feef 	bl	80089f0 <memcpy>
 8007c12:	4621      	mov	r1, r4
 8007c14:	4638      	mov	r0, r7
 8007c16:	f7ff ffa5 	bl	8007b64 <_Bfree>
 8007c1a:	4644      	mov	r4, r8
 8007c1c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007c20:	3501      	adds	r5, #1
 8007c22:	615e      	str	r6, [r3, #20]
 8007c24:	6125      	str	r5, [r4, #16]
 8007c26:	4620      	mov	r0, r4
 8007c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c2c:	08008fdf 	.word	0x08008fdf
 8007c30:	08008ff0 	.word	0x08008ff0

08007c34 <__hi0bits>:
 8007c34:	0c03      	lsrs	r3, r0, #16
 8007c36:	041b      	lsls	r3, r3, #16
 8007c38:	b9d3      	cbnz	r3, 8007c70 <__hi0bits+0x3c>
 8007c3a:	0400      	lsls	r0, r0, #16
 8007c3c:	2310      	movs	r3, #16
 8007c3e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c42:	bf04      	itt	eq
 8007c44:	0200      	lsleq	r0, r0, #8
 8007c46:	3308      	addeq	r3, #8
 8007c48:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007c4c:	bf04      	itt	eq
 8007c4e:	0100      	lsleq	r0, r0, #4
 8007c50:	3304      	addeq	r3, #4
 8007c52:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007c56:	bf04      	itt	eq
 8007c58:	0080      	lsleq	r0, r0, #2
 8007c5a:	3302      	addeq	r3, #2
 8007c5c:	2800      	cmp	r0, #0
 8007c5e:	db05      	blt.n	8007c6c <__hi0bits+0x38>
 8007c60:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007c64:	f103 0301 	add.w	r3, r3, #1
 8007c68:	bf08      	it	eq
 8007c6a:	2320      	moveq	r3, #32
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	4770      	bx	lr
 8007c70:	2300      	movs	r3, #0
 8007c72:	e7e4      	b.n	8007c3e <__hi0bits+0xa>

08007c74 <__lo0bits>:
 8007c74:	6803      	ldr	r3, [r0, #0]
 8007c76:	f013 0207 	ands.w	r2, r3, #7
 8007c7a:	d00c      	beq.n	8007c96 <__lo0bits+0x22>
 8007c7c:	07d9      	lsls	r1, r3, #31
 8007c7e:	d422      	bmi.n	8007cc6 <__lo0bits+0x52>
 8007c80:	079a      	lsls	r2, r3, #30
 8007c82:	bf49      	itett	mi
 8007c84:	085b      	lsrmi	r3, r3, #1
 8007c86:	089b      	lsrpl	r3, r3, #2
 8007c88:	6003      	strmi	r3, [r0, #0]
 8007c8a:	2201      	movmi	r2, #1
 8007c8c:	bf5c      	itt	pl
 8007c8e:	6003      	strpl	r3, [r0, #0]
 8007c90:	2202      	movpl	r2, #2
 8007c92:	4610      	mov	r0, r2
 8007c94:	4770      	bx	lr
 8007c96:	b299      	uxth	r1, r3
 8007c98:	b909      	cbnz	r1, 8007c9e <__lo0bits+0x2a>
 8007c9a:	0c1b      	lsrs	r3, r3, #16
 8007c9c:	2210      	movs	r2, #16
 8007c9e:	b2d9      	uxtb	r1, r3
 8007ca0:	b909      	cbnz	r1, 8007ca6 <__lo0bits+0x32>
 8007ca2:	3208      	adds	r2, #8
 8007ca4:	0a1b      	lsrs	r3, r3, #8
 8007ca6:	0719      	lsls	r1, r3, #28
 8007ca8:	bf04      	itt	eq
 8007caa:	091b      	lsreq	r3, r3, #4
 8007cac:	3204      	addeq	r2, #4
 8007cae:	0799      	lsls	r1, r3, #30
 8007cb0:	bf04      	itt	eq
 8007cb2:	089b      	lsreq	r3, r3, #2
 8007cb4:	3202      	addeq	r2, #2
 8007cb6:	07d9      	lsls	r1, r3, #31
 8007cb8:	d403      	bmi.n	8007cc2 <__lo0bits+0x4e>
 8007cba:	085b      	lsrs	r3, r3, #1
 8007cbc:	f102 0201 	add.w	r2, r2, #1
 8007cc0:	d003      	beq.n	8007cca <__lo0bits+0x56>
 8007cc2:	6003      	str	r3, [r0, #0]
 8007cc4:	e7e5      	b.n	8007c92 <__lo0bits+0x1e>
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	e7e3      	b.n	8007c92 <__lo0bits+0x1e>
 8007cca:	2220      	movs	r2, #32
 8007ccc:	e7e1      	b.n	8007c92 <__lo0bits+0x1e>
	...

08007cd0 <__i2b>:
 8007cd0:	b510      	push	{r4, lr}
 8007cd2:	460c      	mov	r4, r1
 8007cd4:	2101      	movs	r1, #1
 8007cd6:	f7ff ff05 	bl	8007ae4 <_Balloc>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	b928      	cbnz	r0, 8007cea <__i2b+0x1a>
 8007cde:	4b05      	ldr	r3, [pc, #20]	; (8007cf4 <__i2b+0x24>)
 8007ce0:	4805      	ldr	r0, [pc, #20]	; (8007cf8 <__i2b+0x28>)
 8007ce2:	f240 1145 	movw	r1, #325	; 0x145
 8007ce6:	f7fe ff65 	bl	8006bb4 <__assert_func>
 8007cea:	2301      	movs	r3, #1
 8007cec:	6144      	str	r4, [r0, #20]
 8007cee:	6103      	str	r3, [r0, #16]
 8007cf0:	bd10      	pop	{r4, pc}
 8007cf2:	bf00      	nop
 8007cf4:	08008fdf 	.word	0x08008fdf
 8007cf8:	08008ff0 	.word	0x08008ff0

08007cfc <__multiply>:
 8007cfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d00:	4691      	mov	r9, r2
 8007d02:	690a      	ldr	r2, [r1, #16]
 8007d04:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	bfb8      	it	lt
 8007d0c:	460b      	movlt	r3, r1
 8007d0e:	460c      	mov	r4, r1
 8007d10:	bfbc      	itt	lt
 8007d12:	464c      	movlt	r4, r9
 8007d14:	4699      	movlt	r9, r3
 8007d16:	6927      	ldr	r7, [r4, #16]
 8007d18:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d1c:	68a3      	ldr	r3, [r4, #8]
 8007d1e:	6861      	ldr	r1, [r4, #4]
 8007d20:	eb07 060a 	add.w	r6, r7, sl
 8007d24:	42b3      	cmp	r3, r6
 8007d26:	b085      	sub	sp, #20
 8007d28:	bfb8      	it	lt
 8007d2a:	3101      	addlt	r1, #1
 8007d2c:	f7ff feda 	bl	8007ae4 <_Balloc>
 8007d30:	b930      	cbnz	r0, 8007d40 <__multiply+0x44>
 8007d32:	4602      	mov	r2, r0
 8007d34:	4b44      	ldr	r3, [pc, #272]	; (8007e48 <__multiply+0x14c>)
 8007d36:	4845      	ldr	r0, [pc, #276]	; (8007e4c <__multiply+0x150>)
 8007d38:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007d3c:	f7fe ff3a 	bl	8006bb4 <__assert_func>
 8007d40:	f100 0514 	add.w	r5, r0, #20
 8007d44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007d48:	462b      	mov	r3, r5
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	4543      	cmp	r3, r8
 8007d4e:	d321      	bcc.n	8007d94 <__multiply+0x98>
 8007d50:	f104 0314 	add.w	r3, r4, #20
 8007d54:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007d58:	f109 0314 	add.w	r3, r9, #20
 8007d5c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007d60:	9202      	str	r2, [sp, #8]
 8007d62:	1b3a      	subs	r2, r7, r4
 8007d64:	3a15      	subs	r2, #21
 8007d66:	f022 0203 	bic.w	r2, r2, #3
 8007d6a:	3204      	adds	r2, #4
 8007d6c:	f104 0115 	add.w	r1, r4, #21
 8007d70:	428f      	cmp	r7, r1
 8007d72:	bf38      	it	cc
 8007d74:	2204      	movcc	r2, #4
 8007d76:	9201      	str	r2, [sp, #4]
 8007d78:	9a02      	ldr	r2, [sp, #8]
 8007d7a:	9303      	str	r3, [sp, #12]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d80c      	bhi.n	8007d9a <__multiply+0x9e>
 8007d80:	2e00      	cmp	r6, #0
 8007d82:	dd03      	ble.n	8007d8c <__multiply+0x90>
 8007d84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d05b      	beq.n	8007e44 <__multiply+0x148>
 8007d8c:	6106      	str	r6, [r0, #16]
 8007d8e:	b005      	add	sp, #20
 8007d90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d94:	f843 2b04 	str.w	r2, [r3], #4
 8007d98:	e7d8      	b.n	8007d4c <__multiply+0x50>
 8007d9a:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d9e:	f1ba 0f00 	cmp.w	sl, #0
 8007da2:	d024      	beq.n	8007dee <__multiply+0xf2>
 8007da4:	f104 0e14 	add.w	lr, r4, #20
 8007da8:	46a9      	mov	r9, r5
 8007daa:	f04f 0c00 	mov.w	ip, #0
 8007dae:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007db2:	f8d9 1000 	ldr.w	r1, [r9]
 8007db6:	fa1f fb82 	uxth.w	fp, r2
 8007dba:	b289      	uxth	r1, r1
 8007dbc:	fb0a 110b 	mla	r1, sl, fp, r1
 8007dc0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007dc4:	f8d9 2000 	ldr.w	r2, [r9]
 8007dc8:	4461      	add	r1, ip
 8007dca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007dce:	fb0a c20b 	mla	r2, sl, fp, ip
 8007dd2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007dd6:	b289      	uxth	r1, r1
 8007dd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007ddc:	4577      	cmp	r7, lr
 8007dde:	f849 1b04 	str.w	r1, [r9], #4
 8007de2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007de6:	d8e2      	bhi.n	8007dae <__multiply+0xb2>
 8007de8:	9a01      	ldr	r2, [sp, #4]
 8007dea:	f845 c002 	str.w	ip, [r5, r2]
 8007dee:	9a03      	ldr	r2, [sp, #12]
 8007df0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007df4:	3304      	adds	r3, #4
 8007df6:	f1b9 0f00 	cmp.w	r9, #0
 8007dfa:	d021      	beq.n	8007e40 <__multiply+0x144>
 8007dfc:	6829      	ldr	r1, [r5, #0]
 8007dfe:	f104 0c14 	add.w	ip, r4, #20
 8007e02:	46ae      	mov	lr, r5
 8007e04:	f04f 0a00 	mov.w	sl, #0
 8007e08:	f8bc b000 	ldrh.w	fp, [ip]
 8007e0c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e10:	fb09 220b 	mla	r2, r9, fp, r2
 8007e14:	4452      	add	r2, sl
 8007e16:	b289      	uxth	r1, r1
 8007e18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e1c:	f84e 1b04 	str.w	r1, [lr], #4
 8007e20:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007e24:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e28:	f8be 1000 	ldrh.w	r1, [lr]
 8007e2c:	fb09 110a 	mla	r1, r9, sl, r1
 8007e30:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007e34:	4567      	cmp	r7, ip
 8007e36:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e3a:	d8e5      	bhi.n	8007e08 <__multiply+0x10c>
 8007e3c:	9a01      	ldr	r2, [sp, #4]
 8007e3e:	50a9      	str	r1, [r5, r2]
 8007e40:	3504      	adds	r5, #4
 8007e42:	e799      	b.n	8007d78 <__multiply+0x7c>
 8007e44:	3e01      	subs	r6, #1
 8007e46:	e79b      	b.n	8007d80 <__multiply+0x84>
 8007e48:	08008fdf 	.word	0x08008fdf
 8007e4c:	08008ff0 	.word	0x08008ff0

08007e50 <__pow5mult>:
 8007e50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e54:	4615      	mov	r5, r2
 8007e56:	f012 0203 	ands.w	r2, r2, #3
 8007e5a:	4606      	mov	r6, r0
 8007e5c:	460f      	mov	r7, r1
 8007e5e:	d007      	beq.n	8007e70 <__pow5mult+0x20>
 8007e60:	4c25      	ldr	r4, [pc, #148]	; (8007ef8 <__pow5mult+0xa8>)
 8007e62:	3a01      	subs	r2, #1
 8007e64:	2300      	movs	r3, #0
 8007e66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007e6a:	f7ff fe9d 	bl	8007ba8 <__multadd>
 8007e6e:	4607      	mov	r7, r0
 8007e70:	10ad      	asrs	r5, r5, #2
 8007e72:	d03d      	beq.n	8007ef0 <__pow5mult+0xa0>
 8007e74:	69f4      	ldr	r4, [r6, #28]
 8007e76:	b97c      	cbnz	r4, 8007e98 <__pow5mult+0x48>
 8007e78:	2010      	movs	r0, #16
 8007e7a:	f7ff fd7f 	bl	800797c <malloc>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	61f0      	str	r0, [r6, #28]
 8007e82:	b928      	cbnz	r0, 8007e90 <__pow5mult+0x40>
 8007e84:	4b1d      	ldr	r3, [pc, #116]	; (8007efc <__pow5mult+0xac>)
 8007e86:	481e      	ldr	r0, [pc, #120]	; (8007f00 <__pow5mult+0xb0>)
 8007e88:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007e8c:	f7fe fe92 	bl	8006bb4 <__assert_func>
 8007e90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007e94:	6004      	str	r4, [r0, #0]
 8007e96:	60c4      	str	r4, [r0, #12]
 8007e98:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007e9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ea0:	b94c      	cbnz	r4, 8007eb6 <__pow5mult+0x66>
 8007ea2:	f240 2171 	movw	r1, #625	; 0x271
 8007ea6:	4630      	mov	r0, r6
 8007ea8:	f7ff ff12 	bl	8007cd0 <__i2b>
 8007eac:	2300      	movs	r3, #0
 8007eae:	f8c8 0008 	str.w	r0, [r8, #8]
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	6003      	str	r3, [r0, #0]
 8007eb6:	f04f 0900 	mov.w	r9, #0
 8007eba:	07eb      	lsls	r3, r5, #31
 8007ebc:	d50a      	bpl.n	8007ed4 <__pow5mult+0x84>
 8007ebe:	4639      	mov	r1, r7
 8007ec0:	4622      	mov	r2, r4
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	f7ff ff1a 	bl	8007cfc <__multiply>
 8007ec8:	4639      	mov	r1, r7
 8007eca:	4680      	mov	r8, r0
 8007ecc:	4630      	mov	r0, r6
 8007ece:	f7ff fe49 	bl	8007b64 <_Bfree>
 8007ed2:	4647      	mov	r7, r8
 8007ed4:	106d      	asrs	r5, r5, #1
 8007ed6:	d00b      	beq.n	8007ef0 <__pow5mult+0xa0>
 8007ed8:	6820      	ldr	r0, [r4, #0]
 8007eda:	b938      	cbnz	r0, 8007eec <__pow5mult+0x9c>
 8007edc:	4622      	mov	r2, r4
 8007ede:	4621      	mov	r1, r4
 8007ee0:	4630      	mov	r0, r6
 8007ee2:	f7ff ff0b 	bl	8007cfc <__multiply>
 8007ee6:	6020      	str	r0, [r4, #0]
 8007ee8:	f8c0 9000 	str.w	r9, [r0]
 8007eec:	4604      	mov	r4, r0
 8007eee:	e7e4      	b.n	8007eba <__pow5mult+0x6a>
 8007ef0:	4638      	mov	r0, r7
 8007ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ef6:	bf00      	nop
 8007ef8:	08009140 	.word	0x08009140
 8007efc:	08008ecd 	.word	0x08008ecd
 8007f00:	08008ff0 	.word	0x08008ff0

08007f04 <__lshift>:
 8007f04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f08:	460c      	mov	r4, r1
 8007f0a:	6849      	ldr	r1, [r1, #4]
 8007f0c:	6923      	ldr	r3, [r4, #16]
 8007f0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f12:	68a3      	ldr	r3, [r4, #8]
 8007f14:	4607      	mov	r7, r0
 8007f16:	4691      	mov	r9, r2
 8007f18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f1c:	f108 0601 	add.w	r6, r8, #1
 8007f20:	42b3      	cmp	r3, r6
 8007f22:	db0b      	blt.n	8007f3c <__lshift+0x38>
 8007f24:	4638      	mov	r0, r7
 8007f26:	f7ff fddd 	bl	8007ae4 <_Balloc>
 8007f2a:	4605      	mov	r5, r0
 8007f2c:	b948      	cbnz	r0, 8007f42 <__lshift+0x3e>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	4b28      	ldr	r3, [pc, #160]	; (8007fd4 <__lshift+0xd0>)
 8007f32:	4829      	ldr	r0, [pc, #164]	; (8007fd8 <__lshift+0xd4>)
 8007f34:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007f38:	f7fe fe3c 	bl	8006bb4 <__assert_func>
 8007f3c:	3101      	adds	r1, #1
 8007f3e:	005b      	lsls	r3, r3, #1
 8007f40:	e7ee      	b.n	8007f20 <__lshift+0x1c>
 8007f42:	2300      	movs	r3, #0
 8007f44:	f100 0114 	add.w	r1, r0, #20
 8007f48:	f100 0210 	add.w	r2, r0, #16
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	4553      	cmp	r3, sl
 8007f50:	db33      	blt.n	8007fba <__lshift+0xb6>
 8007f52:	6920      	ldr	r0, [r4, #16]
 8007f54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007f58:	f104 0314 	add.w	r3, r4, #20
 8007f5c:	f019 091f 	ands.w	r9, r9, #31
 8007f60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007f64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007f68:	d02b      	beq.n	8007fc2 <__lshift+0xbe>
 8007f6a:	f1c9 0e20 	rsb	lr, r9, #32
 8007f6e:	468a      	mov	sl, r1
 8007f70:	2200      	movs	r2, #0
 8007f72:	6818      	ldr	r0, [r3, #0]
 8007f74:	fa00 f009 	lsl.w	r0, r0, r9
 8007f78:	4310      	orrs	r0, r2
 8007f7a:	f84a 0b04 	str.w	r0, [sl], #4
 8007f7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f82:	459c      	cmp	ip, r3
 8007f84:	fa22 f20e 	lsr.w	r2, r2, lr
 8007f88:	d8f3      	bhi.n	8007f72 <__lshift+0x6e>
 8007f8a:	ebac 0304 	sub.w	r3, ip, r4
 8007f8e:	3b15      	subs	r3, #21
 8007f90:	f023 0303 	bic.w	r3, r3, #3
 8007f94:	3304      	adds	r3, #4
 8007f96:	f104 0015 	add.w	r0, r4, #21
 8007f9a:	4584      	cmp	ip, r0
 8007f9c:	bf38      	it	cc
 8007f9e:	2304      	movcc	r3, #4
 8007fa0:	50ca      	str	r2, [r1, r3]
 8007fa2:	b10a      	cbz	r2, 8007fa8 <__lshift+0xa4>
 8007fa4:	f108 0602 	add.w	r6, r8, #2
 8007fa8:	3e01      	subs	r6, #1
 8007faa:	4638      	mov	r0, r7
 8007fac:	612e      	str	r6, [r5, #16]
 8007fae:	4621      	mov	r1, r4
 8007fb0:	f7ff fdd8 	bl	8007b64 <_Bfree>
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fba:	f842 0f04 	str.w	r0, [r2, #4]!
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	e7c5      	b.n	8007f4e <__lshift+0x4a>
 8007fc2:	3904      	subs	r1, #4
 8007fc4:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fc8:	f841 2f04 	str.w	r2, [r1, #4]!
 8007fcc:	459c      	cmp	ip, r3
 8007fce:	d8f9      	bhi.n	8007fc4 <__lshift+0xc0>
 8007fd0:	e7ea      	b.n	8007fa8 <__lshift+0xa4>
 8007fd2:	bf00      	nop
 8007fd4:	08008fdf 	.word	0x08008fdf
 8007fd8:	08008ff0 	.word	0x08008ff0

08007fdc <__mcmp>:
 8007fdc:	b530      	push	{r4, r5, lr}
 8007fde:	6902      	ldr	r2, [r0, #16]
 8007fe0:	690c      	ldr	r4, [r1, #16]
 8007fe2:	1b12      	subs	r2, r2, r4
 8007fe4:	d10e      	bne.n	8008004 <__mcmp+0x28>
 8007fe6:	f100 0314 	add.w	r3, r0, #20
 8007fea:	3114      	adds	r1, #20
 8007fec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007ff0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007ff4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007ff8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007ffc:	42a5      	cmp	r5, r4
 8007ffe:	d003      	beq.n	8008008 <__mcmp+0x2c>
 8008000:	d305      	bcc.n	800800e <__mcmp+0x32>
 8008002:	2201      	movs	r2, #1
 8008004:	4610      	mov	r0, r2
 8008006:	bd30      	pop	{r4, r5, pc}
 8008008:	4283      	cmp	r3, r0
 800800a:	d3f3      	bcc.n	8007ff4 <__mcmp+0x18>
 800800c:	e7fa      	b.n	8008004 <__mcmp+0x28>
 800800e:	f04f 32ff 	mov.w	r2, #4294967295
 8008012:	e7f7      	b.n	8008004 <__mcmp+0x28>

08008014 <__mdiff>:
 8008014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008018:	460c      	mov	r4, r1
 800801a:	4606      	mov	r6, r0
 800801c:	4611      	mov	r1, r2
 800801e:	4620      	mov	r0, r4
 8008020:	4690      	mov	r8, r2
 8008022:	f7ff ffdb 	bl	8007fdc <__mcmp>
 8008026:	1e05      	subs	r5, r0, #0
 8008028:	d110      	bne.n	800804c <__mdiff+0x38>
 800802a:	4629      	mov	r1, r5
 800802c:	4630      	mov	r0, r6
 800802e:	f7ff fd59 	bl	8007ae4 <_Balloc>
 8008032:	b930      	cbnz	r0, 8008042 <__mdiff+0x2e>
 8008034:	4b3a      	ldr	r3, [pc, #232]	; (8008120 <__mdiff+0x10c>)
 8008036:	4602      	mov	r2, r0
 8008038:	f240 2137 	movw	r1, #567	; 0x237
 800803c:	4839      	ldr	r0, [pc, #228]	; (8008124 <__mdiff+0x110>)
 800803e:	f7fe fdb9 	bl	8006bb4 <__assert_func>
 8008042:	2301      	movs	r3, #1
 8008044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008048:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800804c:	bfa4      	itt	ge
 800804e:	4643      	movge	r3, r8
 8008050:	46a0      	movge	r8, r4
 8008052:	4630      	mov	r0, r6
 8008054:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008058:	bfa6      	itte	ge
 800805a:	461c      	movge	r4, r3
 800805c:	2500      	movge	r5, #0
 800805e:	2501      	movlt	r5, #1
 8008060:	f7ff fd40 	bl	8007ae4 <_Balloc>
 8008064:	b920      	cbnz	r0, 8008070 <__mdiff+0x5c>
 8008066:	4b2e      	ldr	r3, [pc, #184]	; (8008120 <__mdiff+0x10c>)
 8008068:	4602      	mov	r2, r0
 800806a:	f240 2145 	movw	r1, #581	; 0x245
 800806e:	e7e5      	b.n	800803c <__mdiff+0x28>
 8008070:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008074:	6926      	ldr	r6, [r4, #16]
 8008076:	60c5      	str	r5, [r0, #12]
 8008078:	f104 0914 	add.w	r9, r4, #20
 800807c:	f108 0514 	add.w	r5, r8, #20
 8008080:	f100 0e14 	add.w	lr, r0, #20
 8008084:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008088:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800808c:	f108 0210 	add.w	r2, r8, #16
 8008090:	46f2      	mov	sl, lr
 8008092:	2100      	movs	r1, #0
 8008094:	f859 3b04 	ldr.w	r3, [r9], #4
 8008098:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800809c:	fa11 f88b 	uxtah	r8, r1, fp
 80080a0:	b299      	uxth	r1, r3
 80080a2:	0c1b      	lsrs	r3, r3, #16
 80080a4:	eba8 0801 	sub.w	r8, r8, r1
 80080a8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80080ac:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80080b0:	fa1f f888 	uxth.w	r8, r8
 80080b4:	1419      	asrs	r1, r3, #16
 80080b6:	454e      	cmp	r6, r9
 80080b8:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80080bc:	f84a 3b04 	str.w	r3, [sl], #4
 80080c0:	d8e8      	bhi.n	8008094 <__mdiff+0x80>
 80080c2:	1b33      	subs	r3, r6, r4
 80080c4:	3b15      	subs	r3, #21
 80080c6:	f023 0303 	bic.w	r3, r3, #3
 80080ca:	3304      	adds	r3, #4
 80080cc:	3415      	adds	r4, #21
 80080ce:	42a6      	cmp	r6, r4
 80080d0:	bf38      	it	cc
 80080d2:	2304      	movcc	r3, #4
 80080d4:	441d      	add	r5, r3
 80080d6:	4473      	add	r3, lr
 80080d8:	469e      	mov	lr, r3
 80080da:	462e      	mov	r6, r5
 80080dc:	4566      	cmp	r6, ip
 80080de:	d30e      	bcc.n	80080fe <__mdiff+0xea>
 80080e0:	f10c 0203 	add.w	r2, ip, #3
 80080e4:	1b52      	subs	r2, r2, r5
 80080e6:	f022 0203 	bic.w	r2, r2, #3
 80080ea:	3d03      	subs	r5, #3
 80080ec:	45ac      	cmp	ip, r5
 80080ee:	bf38      	it	cc
 80080f0:	2200      	movcc	r2, #0
 80080f2:	4413      	add	r3, r2
 80080f4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80080f8:	b17a      	cbz	r2, 800811a <__mdiff+0x106>
 80080fa:	6107      	str	r7, [r0, #16]
 80080fc:	e7a4      	b.n	8008048 <__mdiff+0x34>
 80080fe:	f856 8b04 	ldr.w	r8, [r6], #4
 8008102:	fa11 f288 	uxtah	r2, r1, r8
 8008106:	1414      	asrs	r4, r2, #16
 8008108:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800810c:	b292      	uxth	r2, r2
 800810e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008112:	f84e 2b04 	str.w	r2, [lr], #4
 8008116:	1421      	asrs	r1, r4, #16
 8008118:	e7e0      	b.n	80080dc <__mdiff+0xc8>
 800811a:	3f01      	subs	r7, #1
 800811c:	e7ea      	b.n	80080f4 <__mdiff+0xe0>
 800811e:	bf00      	nop
 8008120:	08008fdf 	.word	0x08008fdf
 8008124:	08008ff0 	.word	0x08008ff0

08008128 <__d2b>:
 8008128:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800812c:	460f      	mov	r7, r1
 800812e:	2101      	movs	r1, #1
 8008130:	ec59 8b10 	vmov	r8, r9, d0
 8008134:	4616      	mov	r6, r2
 8008136:	f7ff fcd5 	bl	8007ae4 <_Balloc>
 800813a:	4604      	mov	r4, r0
 800813c:	b930      	cbnz	r0, 800814c <__d2b+0x24>
 800813e:	4602      	mov	r2, r0
 8008140:	4b24      	ldr	r3, [pc, #144]	; (80081d4 <__d2b+0xac>)
 8008142:	4825      	ldr	r0, [pc, #148]	; (80081d8 <__d2b+0xb0>)
 8008144:	f240 310f 	movw	r1, #783	; 0x30f
 8008148:	f7fe fd34 	bl	8006bb4 <__assert_func>
 800814c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008150:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008154:	bb2d      	cbnz	r5, 80081a2 <__d2b+0x7a>
 8008156:	9301      	str	r3, [sp, #4]
 8008158:	f1b8 0300 	subs.w	r3, r8, #0
 800815c:	d026      	beq.n	80081ac <__d2b+0x84>
 800815e:	4668      	mov	r0, sp
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	f7ff fd87 	bl	8007c74 <__lo0bits>
 8008166:	e9dd 1200 	ldrd	r1, r2, [sp]
 800816a:	b1e8      	cbz	r0, 80081a8 <__d2b+0x80>
 800816c:	f1c0 0320 	rsb	r3, r0, #32
 8008170:	fa02 f303 	lsl.w	r3, r2, r3
 8008174:	430b      	orrs	r3, r1
 8008176:	40c2      	lsrs	r2, r0
 8008178:	6163      	str	r3, [r4, #20]
 800817a:	9201      	str	r2, [sp, #4]
 800817c:	9b01      	ldr	r3, [sp, #4]
 800817e:	61a3      	str	r3, [r4, #24]
 8008180:	2b00      	cmp	r3, #0
 8008182:	bf14      	ite	ne
 8008184:	2202      	movne	r2, #2
 8008186:	2201      	moveq	r2, #1
 8008188:	6122      	str	r2, [r4, #16]
 800818a:	b1bd      	cbz	r5, 80081bc <__d2b+0x94>
 800818c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008190:	4405      	add	r5, r0
 8008192:	603d      	str	r5, [r7, #0]
 8008194:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008198:	6030      	str	r0, [r6, #0]
 800819a:	4620      	mov	r0, r4
 800819c:	b003      	add	sp, #12
 800819e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80081a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081a6:	e7d6      	b.n	8008156 <__d2b+0x2e>
 80081a8:	6161      	str	r1, [r4, #20]
 80081aa:	e7e7      	b.n	800817c <__d2b+0x54>
 80081ac:	a801      	add	r0, sp, #4
 80081ae:	f7ff fd61 	bl	8007c74 <__lo0bits>
 80081b2:	9b01      	ldr	r3, [sp, #4]
 80081b4:	6163      	str	r3, [r4, #20]
 80081b6:	3020      	adds	r0, #32
 80081b8:	2201      	movs	r2, #1
 80081ba:	e7e5      	b.n	8008188 <__d2b+0x60>
 80081bc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80081c0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80081c4:	6038      	str	r0, [r7, #0]
 80081c6:	6918      	ldr	r0, [r3, #16]
 80081c8:	f7ff fd34 	bl	8007c34 <__hi0bits>
 80081cc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80081d0:	e7e2      	b.n	8008198 <__d2b+0x70>
 80081d2:	bf00      	nop
 80081d4:	08008fdf 	.word	0x08008fdf
 80081d8:	08008ff0 	.word	0x08008ff0

080081dc <__ssputs_r>:
 80081dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80081e0:	688e      	ldr	r6, [r1, #8]
 80081e2:	461f      	mov	r7, r3
 80081e4:	42be      	cmp	r6, r7
 80081e6:	680b      	ldr	r3, [r1, #0]
 80081e8:	4682      	mov	sl, r0
 80081ea:	460c      	mov	r4, r1
 80081ec:	4690      	mov	r8, r2
 80081ee:	d82c      	bhi.n	800824a <__ssputs_r+0x6e>
 80081f0:	898a      	ldrh	r2, [r1, #12]
 80081f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80081f6:	d026      	beq.n	8008246 <__ssputs_r+0x6a>
 80081f8:	6965      	ldr	r5, [r4, #20]
 80081fa:	6909      	ldr	r1, [r1, #16]
 80081fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008200:	eba3 0901 	sub.w	r9, r3, r1
 8008204:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008208:	1c7b      	adds	r3, r7, #1
 800820a:	444b      	add	r3, r9
 800820c:	106d      	asrs	r5, r5, #1
 800820e:	429d      	cmp	r5, r3
 8008210:	bf38      	it	cc
 8008212:	461d      	movcc	r5, r3
 8008214:	0553      	lsls	r3, r2, #21
 8008216:	d527      	bpl.n	8008268 <__ssputs_r+0x8c>
 8008218:	4629      	mov	r1, r5
 800821a:	f7ff fbd7 	bl	80079cc <_malloc_r>
 800821e:	4606      	mov	r6, r0
 8008220:	b360      	cbz	r0, 800827c <__ssputs_r+0xa0>
 8008222:	6921      	ldr	r1, [r4, #16]
 8008224:	464a      	mov	r2, r9
 8008226:	f000 fbe3 	bl	80089f0 <memcpy>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008234:	81a3      	strh	r3, [r4, #12]
 8008236:	6126      	str	r6, [r4, #16]
 8008238:	6165      	str	r5, [r4, #20]
 800823a:	444e      	add	r6, r9
 800823c:	eba5 0509 	sub.w	r5, r5, r9
 8008240:	6026      	str	r6, [r4, #0]
 8008242:	60a5      	str	r5, [r4, #8]
 8008244:	463e      	mov	r6, r7
 8008246:	42be      	cmp	r6, r7
 8008248:	d900      	bls.n	800824c <__ssputs_r+0x70>
 800824a:	463e      	mov	r6, r7
 800824c:	6820      	ldr	r0, [r4, #0]
 800824e:	4632      	mov	r2, r6
 8008250:	4641      	mov	r1, r8
 8008252:	f000 fb81 	bl	8008958 <memmove>
 8008256:	68a3      	ldr	r3, [r4, #8]
 8008258:	1b9b      	subs	r3, r3, r6
 800825a:	60a3      	str	r3, [r4, #8]
 800825c:	6823      	ldr	r3, [r4, #0]
 800825e:	4433      	add	r3, r6
 8008260:	6023      	str	r3, [r4, #0]
 8008262:	2000      	movs	r0, #0
 8008264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008268:	462a      	mov	r2, r5
 800826a:	f000 fbfe 	bl	8008a6a <_realloc_r>
 800826e:	4606      	mov	r6, r0
 8008270:	2800      	cmp	r0, #0
 8008272:	d1e0      	bne.n	8008236 <__ssputs_r+0x5a>
 8008274:	6921      	ldr	r1, [r4, #16]
 8008276:	4650      	mov	r0, sl
 8008278:	f7ff fb34 	bl	80078e4 <_free_r>
 800827c:	230c      	movs	r3, #12
 800827e:	f8ca 3000 	str.w	r3, [sl]
 8008282:	89a3      	ldrh	r3, [r4, #12]
 8008284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008288:	81a3      	strh	r3, [r4, #12]
 800828a:	f04f 30ff 	mov.w	r0, #4294967295
 800828e:	e7e9      	b.n	8008264 <__ssputs_r+0x88>

08008290 <_svfiprintf_r>:
 8008290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008294:	4698      	mov	r8, r3
 8008296:	898b      	ldrh	r3, [r1, #12]
 8008298:	061b      	lsls	r3, r3, #24
 800829a:	b09d      	sub	sp, #116	; 0x74
 800829c:	4607      	mov	r7, r0
 800829e:	460d      	mov	r5, r1
 80082a0:	4614      	mov	r4, r2
 80082a2:	d50e      	bpl.n	80082c2 <_svfiprintf_r+0x32>
 80082a4:	690b      	ldr	r3, [r1, #16]
 80082a6:	b963      	cbnz	r3, 80082c2 <_svfiprintf_r+0x32>
 80082a8:	2140      	movs	r1, #64	; 0x40
 80082aa:	f7ff fb8f 	bl	80079cc <_malloc_r>
 80082ae:	6028      	str	r0, [r5, #0]
 80082b0:	6128      	str	r0, [r5, #16]
 80082b2:	b920      	cbnz	r0, 80082be <_svfiprintf_r+0x2e>
 80082b4:	230c      	movs	r3, #12
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	f04f 30ff 	mov.w	r0, #4294967295
 80082bc:	e0d0      	b.n	8008460 <_svfiprintf_r+0x1d0>
 80082be:	2340      	movs	r3, #64	; 0x40
 80082c0:	616b      	str	r3, [r5, #20]
 80082c2:	2300      	movs	r3, #0
 80082c4:	9309      	str	r3, [sp, #36]	; 0x24
 80082c6:	2320      	movs	r3, #32
 80082c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80082cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80082d0:	2330      	movs	r3, #48	; 0x30
 80082d2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008478 <_svfiprintf_r+0x1e8>
 80082d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80082da:	f04f 0901 	mov.w	r9, #1
 80082de:	4623      	mov	r3, r4
 80082e0:	469a      	mov	sl, r3
 80082e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80082e6:	b10a      	cbz	r2, 80082ec <_svfiprintf_r+0x5c>
 80082e8:	2a25      	cmp	r2, #37	; 0x25
 80082ea:	d1f9      	bne.n	80082e0 <_svfiprintf_r+0x50>
 80082ec:	ebba 0b04 	subs.w	fp, sl, r4
 80082f0:	d00b      	beq.n	800830a <_svfiprintf_r+0x7a>
 80082f2:	465b      	mov	r3, fp
 80082f4:	4622      	mov	r2, r4
 80082f6:	4629      	mov	r1, r5
 80082f8:	4638      	mov	r0, r7
 80082fa:	f7ff ff6f 	bl	80081dc <__ssputs_r>
 80082fe:	3001      	adds	r0, #1
 8008300:	f000 80a9 	beq.w	8008456 <_svfiprintf_r+0x1c6>
 8008304:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008306:	445a      	add	r2, fp
 8008308:	9209      	str	r2, [sp, #36]	; 0x24
 800830a:	f89a 3000 	ldrb.w	r3, [sl]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f000 80a1 	beq.w	8008456 <_svfiprintf_r+0x1c6>
 8008314:	2300      	movs	r3, #0
 8008316:	f04f 32ff 	mov.w	r2, #4294967295
 800831a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800831e:	f10a 0a01 	add.w	sl, sl, #1
 8008322:	9304      	str	r3, [sp, #16]
 8008324:	9307      	str	r3, [sp, #28]
 8008326:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800832a:	931a      	str	r3, [sp, #104]	; 0x68
 800832c:	4654      	mov	r4, sl
 800832e:	2205      	movs	r2, #5
 8008330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008334:	4850      	ldr	r0, [pc, #320]	; (8008478 <_svfiprintf_r+0x1e8>)
 8008336:	f7f7 ff63 	bl	8000200 <memchr>
 800833a:	9a04      	ldr	r2, [sp, #16]
 800833c:	b9d8      	cbnz	r0, 8008376 <_svfiprintf_r+0xe6>
 800833e:	06d0      	lsls	r0, r2, #27
 8008340:	bf44      	itt	mi
 8008342:	2320      	movmi	r3, #32
 8008344:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008348:	0711      	lsls	r1, r2, #28
 800834a:	bf44      	itt	mi
 800834c:	232b      	movmi	r3, #43	; 0x2b
 800834e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008352:	f89a 3000 	ldrb.w	r3, [sl]
 8008356:	2b2a      	cmp	r3, #42	; 0x2a
 8008358:	d015      	beq.n	8008386 <_svfiprintf_r+0xf6>
 800835a:	9a07      	ldr	r2, [sp, #28]
 800835c:	4654      	mov	r4, sl
 800835e:	2000      	movs	r0, #0
 8008360:	f04f 0c0a 	mov.w	ip, #10
 8008364:	4621      	mov	r1, r4
 8008366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800836a:	3b30      	subs	r3, #48	; 0x30
 800836c:	2b09      	cmp	r3, #9
 800836e:	d94d      	bls.n	800840c <_svfiprintf_r+0x17c>
 8008370:	b1b0      	cbz	r0, 80083a0 <_svfiprintf_r+0x110>
 8008372:	9207      	str	r2, [sp, #28]
 8008374:	e014      	b.n	80083a0 <_svfiprintf_r+0x110>
 8008376:	eba0 0308 	sub.w	r3, r0, r8
 800837a:	fa09 f303 	lsl.w	r3, r9, r3
 800837e:	4313      	orrs	r3, r2
 8008380:	9304      	str	r3, [sp, #16]
 8008382:	46a2      	mov	sl, r4
 8008384:	e7d2      	b.n	800832c <_svfiprintf_r+0x9c>
 8008386:	9b03      	ldr	r3, [sp, #12]
 8008388:	1d19      	adds	r1, r3, #4
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	9103      	str	r1, [sp, #12]
 800838e:	2b00      	cmp	r3, #0
 8008390:	bfbb      	ittet	lt
 8008392:	425b      	neglt	r3, r3
 8008394:	f042 0202 	orrlt.w	r2, r2, #2
 8008398:	9307      	strge	r3, [sp, #28]
 800839a:	9307      	strlt	r3, [sp, #28]
 800839c:	bfb8      	it	lt
 800839e:	9204      	strlt	r2, [sp, #16]
 80083a0:	7823      	ldrb	r3, [r4, #0]
 80083a2:	2b2e      	cmp	r3, #46	; 0x2e
 80083a4:	d10c      	bne.n	80083c0 <_svfiprintf_r+0x130>
 80083a6:	7863      	ldrb	r3, [r4, #1]
 80083a8:	2b2a      	cmp	r3, #42	; 0x2a
 80083aa:	d134      	bne.n	8008416 <_svfiprintf_r+0x186>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	1d1a      	adds	r2, r3, #4
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	9203      	str	r2, [sp, #12]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	bfb8      	it	lt
 80083b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80083bc:	3402      	adds	r4, #2
 80083be:	9305      	str	r3, [sp, #20]
 80083c0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008488 <_svfiprintf_r+0x1f8>
 80083c4:	7821      	ldrb	r1, [r4, #0]
 80083c6:	2203      	movs	r2, #3
 80083c8:	4650      	mov	r0, sl
 80083ca:	f7f7 ff19 	bl	8000200 <memchr>
 80083ce:	b138      	cbz	r0, 80083e0 <_svfiprintf_r+0x150>
 80083d0:	9b04      	ldr	r3, [sp, #16]
 80083d2:	eba0 000a 	sub.w	r0, r0, sl
 80083d6:	2240      	movs	r2, #64	; 0x40
 80083d8:	4082      	lsls	r2, r0
 80083da:	4313      	orrs	r3, r2
 80083dc:	3401      	adds	r4, #1
 80083de:	9304      	str	r3, [sp, #16]
 80083e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083e4:	4825      	ldr	r0, [pc, #148]	; (800847c <_svfiprintf_r+0x1ec>)
 80083e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80083ea:	2206      	movs	r2, #6
 80083ec:	f7f7 ff08 	bl	8000200 <memchr>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	d038      	beq.n	8008466 <_svfiprintf_r+0x1d6>
 80083f4:	4b22      	ldr	r3, [pc, #136]	; (8008480 <_svfiprintf_r+0x1f0>)
 80083f6:	bb1b      	cbnz	r3, 8008440 <_svfiprintf_r+0x1b0>
 80083f8:	9b03      	ldr	r3, [sp, #12]
 80083fa:	3307      	adds	r3, #7
 80083fc:	f023 0307 	bic.w	r3, r3, #7
 8008400:	3308      	adds	r3, #8
 8008402:	9303      	str	r3, [sp, #12]
 8008404:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008406:	4433      	add	r3, r6
 8008408:	9309      	str	r3, [sp, #36]	; 0x24
 800840a:	e768      	b.n	80082de <_svfiprintf_r+0x4e>
 800840c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008410:	460c      	mov	r4, r1
 8008412:	2001      	movs	r0, #1
 8008414:	e7a6      	b.n	8008364 <_svfiprintf_r+0xd4>
 8008416:	2300      	movs	r3, #0
 8008418:	3401      	adds	r4, #1
 800841a:	9305      	str	r3, [sp, #20]
 800841c:	4619      	mov	r1, r3
 800841e:	f04f 0c0a 	mov.w	ip, #10
 8008422:	4620      	mov	r0, r4
 8008424:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008428:	3a30      	subs	r2, #48	; 0x30
 800842a:	2a09      	cmp	r2, #9
 800842c:	d903      	bls.n	8008436 <_svfiprintf_r+0x1a6>
 800842e:	2b00      	cmp	r3, #0
 8008430:	d0c6      	beq.n	80083c0 <_svfiprintf_r+0x130>
 8008432:	9105      	str	r1, [sp, #20]
 8008434:	e7c4      	b.n	80083c0 <_svfiprintf_r+0x130>
 8008436:	fb0c 2101 	mla	r1, ip, r1, r2
 800843a:	4604      	mov	r4, r0
 800843c:	2301      	movs	r3, #1
 800843e:	e7f0      	b.n	8008422 <_svfiprintf_r+0x192>
 8008440:	ab03      	add	r3, sp, #12
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	462a      	mov	r2, r5
 8008446:	4b0f      	ldr	r3, [pc, #60]	; (8008484 <_svfiprintf_r+0x1f4>)
 8008448:	a904      	add	r1, sp, #16
 800844a:	4638      	mov	r0, r7
 800844c:	f7fd fce8 	bl	8005e20 <_printf_float>
 8008450:	1c42      	adds	r2, r0, #1
 8008452:	4606      	mov	r6, r0
 8008454:	d1d6      	bne.n	8008404 <_svfiprintf_r+0x174>
 8008456:	89ab      	ldrh	r3, [r5, #12]
 8008458:	065b      	lsls	r3, r3, #25
 800845a:	f53f af2d 	bmi.w	80082b8 <_svfiprintf_r+0x28>
 800845e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008460:	b01d      	add	sp, #116	; 0x74
 8008462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008466:	ab03      	add	r3, sp, #12
 8008468:	9300      	str	r3, [sp, #0]
 800846a:	462a      	mov	r2, r5
 800846c:	4b05      	ldr	r3, [pc, #20]	; (8008484 <_svfiprintf_r+0x1f4>)
 800846e:	a904      	add	r1, sp, #16
 8008470:	4638      	mov	r0, r7
 8008472:	f7fd ff79 	bl	8006368 <_printf_i>
 8008476:	e7eb      	b.n	8008450 <_svfiprintf_r+0x1c0>
 8008478:	0800914c 	.word	0x0800914c
 800847c:	08009156 	.word	0x08009156
 8008480:	08005e21 	.word	0x08005e21
 8008484:	080081dd 	.word	0x080081dd
 8008488:	08009152 	.word	0x08009152

0800848c <__sfputc_r>:
 800848c:	6893      	ldr	r3, [r2, #8]
 800848e:	3b01      	subs	r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	b410      	push	{r4}
 8008494:	6093      	str	r3, [r2, #8]
 8008496:	da08      	bge.n	80084aa <__sfputc_r+0x1e>
 8008498:	6994      	ldr	r4, [r2, #24]
 800849a:	42a3      	cmp	r3, r4
 800849c:	db01      	blt.n	80084a2 <__sfputc_r+0x16>
 800849e:	290a      	cmp	r1, #10
 80084a0:	d103      	bne.n	80084aa <__sfputc_r+0x1e>
 80084a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084a6:	f7fe ba14 	b.w	80068d2 <__swbuf_r>
 80084aa:	6813      	ldr	r3, [r2, #0]
 80084ac:	1c58      	adds	r0, r3, #1
 80084ae:	6010      	str	r0, [r2, #0]
 80084b0:	7019      	strb	r1, [r3, #0]
 80084b2:	4608      	mov	r0, r1
 80084b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084b8:	4770      	bx	lr

080084ba <__sfputs_r>:
 80084ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084bc:	4606      	mov	r6, r0
 80084be:	460f      	mov	r7, r1
 80084c0:	4614      	mov	r4, r2
 80084c2:	18d5      	adds	r5, r2, r3
 80084c4:	42ac      	cmp	r4, r5
 80084c6:	d101      	bne.n	80084cc <__sfputs_r+0x12>
 80084c8:	2000      	movs	r0, #0
 80084ca:	e007      	b.n	80084dc <__sfputs_r+0x22>
 80084cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d0:	463a      	mov	r2, r7
 80084d2:	4630      	mov	r0, r6
 80084d4:	f7ff ffda 	bl	800848c <__sfputc_r>
 80084d8:	1c43      	adds	r3, r0, #1
 80084da:	d1f3      	bne.n	80084c4 <__sfputs_r+0xa>
 80084dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084e0 <_vfiprintf_r>:
 80084e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084e4:	460d      	mov	r5, r1
 80084e6:	b09d      	sub	sp, #116	; 0x74
 80084e8:	4614      	mov	r4, r2
 80084ea:	4698      	mov	r8, r3
 80084ec:	4606      	mov	r6, r0
 80084ee:	b118      	cbz	r0, 80084f8 <_vfiprintf_r+0x18>
 80084f0:	6a03      	ldr	r3, [r0, #32]
 80084f2:	b90b      	cbnz	r3, 80084f8 <_vfiprintf_r+0x18>
 80084f4:	f7fe f8e6 	bl	80066c4 <__sinit>
 80084f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084fa:	07d9      	lsls	r1, r3, #31
 80084fc:	d405      	bmi.n	800850a <_vfiprintf_r+0x2a>
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	059a      	lsls	r2, r3, #22
 8008502:	d402      	bmi.n	800850a <_vfiprintf_r+0x2a>
 8008504:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008506:	f7fe fb52 	bl	8006bae <__retarget_lock_acquire_recursive>
 800850a:	89ab      	ldrh	r3, [r5, #12]
 800850c:	071b      	lsls	r3, r3, #28
 800850e:	d501      	bpl.n	8008514 <_vfiprintf_r+0x34>
 8008510:	692b      	ldr	r3, [r5, #16]
 8008512:	b99b      	cbnz	r3, 800853c <_vfiprintf_r+0x5c>
 8008514:	4629      	mov	r1, r5
 8008516:	4630      	mov	r0, r6
 8008518:	f7fe fa18 	bl	800694c <__swsetup_r>
 800851c:	b170      	cbz	r0, 800853c <_vfiprintf_r+0x5c>
 800851e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008520:	07dc      	lsls	r4, r3, #31
 8008522:	d504      	bpl.n	800852e <_vfiprintf_r+0x4e>
 8008524:	f04f 30ff 	mov.w	r0, #4294967295
 8008528:	b01d      	add	sp, #116	; 0x74
 800852a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800852e:	89ab      	ldrh	r3, [r5, #12]
 8008530:	0598      	lsls	r0, r3, #22
 8008532:	d4f7      	bmi.n	8008524 <_vfiprintf_r+0x44>
 8008534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008536:	f7fe fb3b 	bl	8006bb0 <__retarget_lock_release_recursive>
 800853a:	e7f3      	b.n	8008524 <_vfiprintf_r+0x44>
 800853c:	2300      	movs	r3, #0
 800853e:	9309      	str	r3, [sp, #36]	; 0x24
 8008540:	2320      	movs	r3, #32
 8008542:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008546:	f8cd 800c 	str.w	r8, [sp, #12]
 800854a:	2330      	movs	r3, #48	; 0x30
 800854c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008700 <_vfiprintf_r+0x220>
 8008550:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008554:	f04f 0901 	mov.w	r9, #1
 8008558:	4623      	mov	r3, r4
 800855a:	469a      	mov	sl, r3
 800855c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008560:	b10a      	cbz	r2, 8008566 <_vfiprintf_r+0x86>
 8008562:	2a25      	cmp	r2, #37	; 0x25
 8008564:	d1f9      	bne.n	800855a <_vfiprintf_r+0x7a>
 8008566:	ebba 0b04 	subs.w	fp, sl, r4
 800856a:	d00b      	beq.n	8008584 <_vfiprintf_r+0xa4>
 800856c:	465b      	mov	r3, fp
 800856e:	4622      	mov	r2, r4
 8008570:	4629      	mov	r1, r5
 8008572:	4630      	mov	r0, r6
 8008574:	f7ff ffa1 	bl	80084ba <__sfputs_r>
 8008578:	3001      	adds	r0, #1
 800857a:	f000 80a9 	beq.w	80086d0 <_vfiprintf_r+0x1f0>
 800857e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008580:	445a      	add	r2, fp
 8008582:	9209      	str	r2, [sp, #36]	; 0x24
 8008584:	f89a 3000 	ldrb.w	r3, [sl]
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 80a1 	beq.w	80086d0 <_vfiprintf_r+0x1f0>
 800858e:	2300      	movs	r3, #0
 8008590:	f04f 32ff 	mov.w	r2, #4294967295
 8008594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008598:	f10a 0a01 	add.w	sl, sl, #1
 800859c:	9304      	str	r3, [sp, #16]
 800859e:	9307      	str	r3, [sp, #28]
 80085a0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085a4:	931a      	str	r3, [sp, #104]	; 0x68
 80085a6:	4654      	mov	r4, sl
 80085a8:	2205      	movs	r2, #5
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	4854      	ldr	r0, [pc, #336]	; (8008700 <_vfiprintf_r+0x220>)
 80085b0:	f7f7 fe26 	bl	8000200 <memchr>
 80085b4:	9a04      	ldr	r2, [sp, #16]
 80085b6:	b9d8      	cbnz	r0, 80085f0 <_vfiprintf_r+0x110>
 80085b8:	06d1      	lsls	r1, r2, #27
 80085ba:	bf44      	itt	mi
 80085bc:	2320      	movmi	r3, #32
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c2:	0713      	lsls	r3, r2, #28
 80085c4:	bf44      	itt	mi
 80085c6:	232b      	movmi	r3, #43	; 0x2b
 80085c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085cc:	f89a 3000 	ldrb.w	r3, [sl]
 80085d0:	2b2a      	cmp	r3, #42	; 0x2a
 80085d2:	d015      	beq.n	8008600 <_vfiprintf_r+0x120>
 80085d4:	9a07      	ldr	r2, [sp, #28]
 80085d6:	4654      	mov	r4, sl
 80085d8:	2000      	movs	r0, #0
 80085da:	f04f 0c0a 	mov.w	ip, #10
 80085de:	4621      	mov	r1, r4
 80085e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085e4:	3b30      	subs	r3, #48	; 0x30
 80085e6:	2b09      	cmp	r3, #9
 80085e8:	d94d      	bls.n	8008686 <_vfiprintf_r+0x1a6>
 80085ea:	b1b0      	cbz	r0, 800861a <_vfiprintf_r+0x13a>
 80085ec:	9207      	str	r2, [sp, #28]
 80085ee:	e014      	b.n	800861a <_vfiprintf_r+0x13a>
 80085f0:	eba0 0308 	sub.w	r3, r0, r8
 80085f4:	fa09 f303 	lsl.w	r3, r9, r3
 80085f8:	4313      	orrs	r3, r2
 80085fa:	9304      	str	r3, [sp, #16]
 80085fc:	46a2      	mov	sl, r4
 80085fe:	e7d2      	b.n	80085a6 <_vfiprintf_r+0xc6>
 8008600:	9b03      	ldr	r3, [sp, #12]
 8008602:	1d19      	adds	r1, r3, #4
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	9103      	str	r1, [sp, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	bfbb      	ittet	lt
 800860c:	425b      	neglt	r3, r3
 800860e:	f042 0202 	orrlt.w	r2, r2, #2
 8008612:	9307      	strge	r3, [sp, #28]
 8008614:	9307      	strlt	r3, [sp, #28]
 8008616:	bfb8      	it	lt
 8008618:	9204      	strlt	r2, [sp, #16]
 800861a:	7823      	ldrb	r3, [r4, #0]
 800861c:	2b2e      	cmp	r3, #46	; 0x2e
 800861e:	d10c      	bne.n	800863a <_vfiprintf_r+0x15a>
 8008620:	7863      	ldrb	r3, [r4, #1]
 8008622:	2b2a      	cmp	r3, #42	; 0x2a
 8008624:	d134      	bne.n	8008690 <_vfiprintf_r+0x1b0>
 8008626:	9b03      	ldr	r3, [sp, #12]
 8008628:	1d1a      	adds	r2, r3, #4
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	9203      	str	r2, [sp, #12]
 800862e:	2b00      	cmp	r3, #0
 8008630:	bfb8      	it	lt
 8008632:	f04f 33ff 	movlt.w	r3, #4294967295
 8008636:	3402      	adds	r4, #2
 8008638:	9305      	str	r3, [sp, #20]
 800863a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008710 <_vfiprintf_r+0x230>
 800863e:	7821      	ldrb	r1, [r4, #0]
 8008640:	2203      	movs	r2, #3
 8008642:	4650      	mov	r0, sl
 8008644:	f7f7 fddc 	bl	8000200 <memchr>
 8008648:	b138      	cbz	r0, 800865a <_vfiprintf_r+0x17a>
 800864a:	9b04      	ldr	r3, [sp, #16]
 800864c:	eba0 000a 	sub.w	r0, r0, sl
 8008650:	2240      	movs	r2, #64	; 0x40
 8008652:	4082      	lsls	r2, r0
 8008654:	4313      	orrs	r3, r2
 8008656:	3401      	adds	r4, #1
 8008658:	9304      	str	r3, [sp, #16]
 800865a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800865e:	4829      	ldr	r0, [pc, #164]	; (8008704 <_vfiprintf_r+0x224>)
 8008660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008664:	2206      	movs	r2, #6
 8008666:	f7f7 fdcb 	bl	8000200 <memchr>
 800866a:	2800      	cmp	r0, #0
 800866c:	d03f      	beq.n	80086ee <_vfiprintf_r+0x20e>
 800866e:	4b26      	ldr	r3, [pc, #152]	; (8008708 <_vfiprintf_r+0x228>)
 8008670:	bb1b      	cbnz	r3, 80086ba <_vfiprintf_r+0x1da>
 8008672:	9b03      	ldr	r3, [sp, #12]
 8008674:	3307      	adds	r3, #7
 8008676:	f023 0307 	bic.w	r3, r3, #7
 800867a:	3308      	adds	r3, #8
 800867c:	9303      	str	r3, [sp, #12]
 800867e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008680:	443b      	add	r3, r7
 8008682:	9309      	str	r3, [sp, #36]	; 0x24
 8008684:	e768      	b.n	8008558 <_vfiprintf_r+0x78>
 8008686:	fb0c 3202 	mla	r2, ip, r2, r3
 800868a:	460c      	mov	r4, r1
 800868c:	2001      	movs	r0, #1
 800868e:	e7a6      	b.n	80085de <_vfiprintf_r+0xfe>
 8008690:	2300      	movs	r3, #0
 8008692:	3401      	adds	r4, #1
 8008694:	9305      	str	r3, [sp, #20]
 8008696:	4619      	mov	r1, r3
 8008698:	f04f 0c0a 	mov.w	ip, #10
 800869c:	4620      	mov	r0, r4
 800869e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086a2:	3a30      	subs	r2, #48	; 0x30
 80086a4:	2a09      	cmp	r2, #9
 80086a6:	d903      	bls.n	80086b0 <_vfiprintf_r+0x1d0>
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d0c6      	beq.n	800863a <_vfiprintf_r+0x15a>
 80086ac:	9105      	str	r1, [sp, #20]
 80086ae:	e7c4      	b.n	800863a <_vfiprintf_r+0x15a>
 80086b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80086b4:	4604      	mov	r4, r0
 80086b6:	2301      	movs	r3, #1
 80086b8:	e7f0      	b.n	800869c <_vfiprintf_r+0x1bc>
 80086ba:	ab03      	add	r3, sp, #12
 80086bc:	9300      	str	r3, [sp, #0]
 80086be:	462a      	mov	r2, r5
 80086c0:	4b12      	ldr	r3, [pc, #72]	; (800870c <_vfiprintf_r+0x22c>)
 80086c2:	a904      	add	r1, sp, #16
 80086c4:	4630      	mov	r0, r6
 80086c6:	f7fd fbab 	bl	8005e20 <_printf_float>
 80086ca:	4607      	mov	r7, r0
 80086cc:	1c78      	adds	r0, r7, #1
 80086ce:	d1d6      	bne.n	800867e <_vfiprintf_r+0x19e>
 80086d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086d2:	07d9      	lsls	r1, r3, #31
 80086d4:	d405      	bmi.n	80086e2 <_vfiprintf_r+0x202>
 80086d6:	89ab      	ldrh	r3, [r5, #12]
 80086d8:	059a      	lsls	r2, r3, #22
 80086da:	d402      	bmi.n	80086e2 <_vfiprintf_r+0x202>
 80086dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086de:	f7fe fa67 	bl	8006bb0 <__retarget_lock_release_recursive>
 80086e2:	89ab      	ldrh	r3, [r5, #12]
 80086e4:	065b      	lsls	r3, r3, #25
 80086e6:	f53f af1d 	bmi.w	8008524 <_vfiprintf_r+0x44>
 80086ea:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086ec:	e71c      	b.n	8008528 <_vfiprintf_r+0x48>
 80086ee:	ab03      	add	r3, sp, #12
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	462a      	mov	r2, r5
 80086f4:	4b05      	ldr	r3, [pc, #20]	; (800870c <_vfiprintf_r+0x22c>)
 80086f6:	a904      	add	r1, sp, #16
 80086f8:	4630      	mov	r0, r6
 80086fa:	f7fd fe35 	bl	8006368 <_printf_i>
 80086fe:	e7e4      	b.n	80086ca <_vfiprintf_r+0x1ea>
 8008700:	0800914c 	.word	0x0800914c
 8008704:	08009156 	.word	0x08009156
 8008708:	08005e21 	.word	0x08005e21
 800870c:	080084bb 	.word	0x080084bb
 8008710:	08009152 	.word	0x08009152

08008714 <__sflush_r>:
 8008714:	898a      	ldrh	r2, [r1, #12]
 8008716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800871a:	4605      	mov	r5, r0
 800871c:	0710      	lsls	r0, r2, #28
 800871e:	460c      	mov	r4, r1
 8008720:	d458      	bmi.n	80087d4 <__sflush_r+0xc0>
 8008722:	684b      	ldr	r3, [r1, #4]
 8008724:	2b00      	cmp	r3, #0
 8008726:	dc05      	bgt.n	8008734 <__sflush_r+0x20>
 8008728:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800872a:	2b00      	cmp	r3, #0
 800872c:	dc02      	bgt.n	8008734 <__sflush_r+0x20>
 800872e:	2000      	movs	r0, #0
 8008730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008734:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008736:	2e00      	cmp	r6, #0
 8008738:	d0f9      	beq.n	800872e <__sflush_r+0x1a>
 800873a:	2300      	movs	r3, #0
 800873c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008740:	682f      	ldr	r7, [r5, #0]
 8008742:	6a21      	ldr	r1, [r4, #32]
 8008744:	602b      	str	r3, [r5, #0]
 8008746:	d032      	beq.n	80087ae <__sflush_r+0x9a>
 8008748:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800874a:	89a3      	ldrh	r3, [r4, #12]
 800874c:	075a      	lsls	r2, r3, #29
 800874e:	d505      	bpl.n	800875c <__sflush_r+0x48>
 8008750:	6863      	ldr	r3, [r4, #4]
 8008752:	1ac0      	subs	r0, r0, r3
 8008754:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008756:	b10b      	cbz	r3, 800875c <__sflush_r+0x48>
 8008758:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800875a:	1ac0      	subs	r0, r0, r3
 800875c:	2300      	movs	r3, #0
 800875e:	4602      	mov	r2, r0
 8008760:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008762:	6a21      	ldr	r1, [r4, #32]
 8008764:	4628      	mov	r0, r5
 8008766:	47b0      	blx	r6
 8008768:	1c43      	adds	r3, r0, #1
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	d106      	bne.n	800877c <__sflush_r+0x68>
 800876e:	6829      	ldr	r1, [r5, #0]
 8008770:	291d      	cmp	r1, #29
 8008772:	d82b      	bhi.n	80087cc <__sflush_r+0xb8>
 8008774:	4a29      	ldr	r2, [pc, #164]	; (800881c <__sflush_r+0x108>)
 8008776:	410a      	asrs	r2, r1
 8008778:	07d6      	lsls	r6, r2, #31
 800877a:	d427      	bmi.n	80087cc <__sflush_r+0xb8>
 800877c:	2200      	movs	r2, #0
 800877e:	6062      	str	r2, [r4, #4]
 8008780:	04d9      	lsls	r1, r3, #19
 8008782:	6922      	ldr	r2, [r4, #16]
 8008784:	6022      	str	r2, [r4, #0]
 8008786:	d504      	bpl.n	8008792 <__sflush_r+0x7e>
 8008788:	1c42      	adds	r2, r0, #1
 800878a:	d101      	bne.n	8008790 <__sflush_r+0x7c>
 800878c:	682b      	ldr	r3, [r5, #0]
 800878e:	b903      	cbnz	r3, 8008792 <__sflush_r+0x7e>
 8008790:	6560      	str	r0, [r4, #84]	; 0x54
 8008792:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008794:	602f      	str	r7, [r5, #0]
 8008796:	2900      	cmp	r1, #0
 8008798:	d0c9      	beq.n	800872e <__sflush_r+0x1a>
 800879a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800879e:	4299      	cmp	r1, r3
 80087a0:	d002      	beq.n	80087a8 <__sflush_r+0x94>
 80087a2:	4628      	mov	r0, r5
 80087a4:	f7ff f89e 	bl	80078e4 <_free_r>
 80087a8:	2000      	movs	r0, #0
 80087aa:	6360      	str	r0, [r4, #52]	; 0x34
 80087ac:	e7c0      	b.n	8008730 <__sflush_r+0x1c>
 80087ae:	2301      	movs	r3, #1
 80087b0:	4628      	mov	r0, r5
 80087b2:	47b0      	blx	r6
 80087b4:	1c41      	adds	r1, r0, #1
 80087b6:	d1c8      	bne.n	800874a <__sflush_r+0x36>
 80087b8:	682b      	ldr	r3, [r5, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0c5      	beq.n	800874a <__sflush_r+0x36>
 80087be:	2b1d      	cmp	r3, #29
 80087c0:	d001      	beq.n	80087c6 <__sflush_r+0xb2>
 80087c2:	2b16      	cmp	r3, #22
 80087c4:	d101      	bne.n	80087ca <__sflush_r+0xb6>
 80087c6:	602f      	str	r7, [r5, #0]
 80087c8:	e7b1      	b.n	800872e <__sflush_r+0x1a>
 80087ca:	89a3      	ldrh	r3, [r4, #12]
 80087cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087d0:	81a3      	strh	r3, [r4, #12]
 80087d2:	e7ad      	b.n	8008730 <__sflush_r+0x1c>
 80087d4:	690f      	ldr	r7, [r1, #16]
 80087d6:	2f00      	cmp	r7, #0
 80087d8:	d0a9      	beq.n	800872e <__sflush_r+0x1a>
 80087da:	0793      	lsls	r3, r2, #30
 80087dc:	680e      	ldr	r6, [r1, #0]
 80087de:	bf08      	it	eq
 80087e0:	694b      	ldreq	r3, [r1, #20]
 80087e2:	600f      	str	r7, [r1, #0]
 80087e4:	bf18      	it	ne
 80087e6:	2300      	movne	r3, #0
 80087e8:	eba6 0807 	sub.w	r8, r6, r7
 80087ec:	608b      	str	r3, [r1, #8]
 80087ee:	f1b8 0f00 	cmp.w	r8, #0
 80087f2:	dd9c      	ble.n	800872e <__sflush_r+0x1a>
 80087f4:	6a21      	ldr	r1, [r4, #32]
 80087f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80087f8:	4643      	mov	r3, r8
 80087fa:	463a      	mov	r2, r7
 80087fc:	4628      	mov	r0, r5
 80087fe:	47b0      	blx	r6
 8008800:	2800      	cmp	r0, #0
 8008802:	dc06      	bgt.n	8008812 <__sflush_r+0xfe>
 8008804:	89a3      	ldrh	r3, [r4, #12]
 8008806:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800880a:	81a3      	strh	r3, [r4, #12]
 800880c:	f04f 30ff 	mov.w	r0, #4294967295
 8008810:	e78e      	b.n	8008730 <__sflush_r+0x1c>
 8008812:	4407      	add	r7, r0
 8008814:	eba8 0800 	sub.w	r8, r8, r0
 8008818:	e7e9      	b.n	80087ee <__sflush_r+0xda>
 800881a:	bf00      	nop
 800881c:	dfbffffe 	.word	0xdfbffffe

08008820 <_fflush_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	690b      	ldr	r3, [r1, #16]
 8008824:	4605      	mov	r5, r0
 8008826:	460c      	mov	r4, r1
 8008828:	b913      	cbnz	r3, 8008830 <_fflush_r+0x10>
 800882a:	2500      	movs	r5, #0
 800882c:	4628      	mov	r0, r5
 800882e:	bd38      	pop	{r3, r4, r5, pc}
 8008830:	b118      	cbz	r0, 800883a <_fflush_r+0x1a>
 8008832:	6a03      	ldr	r3, [r0, #32]
 8008834:	b90b      	cbnz	r3, 800883a <_fflush_r+0x1a>
 8008836:	f7fd ff45 	bl	80066c4 <__sinit>
 800883a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d0f3      	beq.n	800882a <_fflush_r+0xa>
 8008842:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008844:	07d0      	lsls	r0, r2, #31
 8008846:	d404      	bmi.n	8008852 <_fflush_r+0x32>
 8008848:	0599      	lsls	r1, r3, #22
 800884a:	d402      	bmi.n	8008852 <_fflush_r+0x32>
 800884c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800884e:	f7fe f9ae 	bl	8006bae <__retarget_lock_acquire_recursive>
 8008852:	4628      	mov	r0, r5
 8008854:	4621      	mov	r1, r4
 8008856:	f7ff ff5d 	bl	8008714 <__sflush_r>
 800885a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800885c:	07da      	lsls	r2, r3, #31
 800885e:	4605      	mov	r5, r0
 8008860:	d4e4      	bmi.n	800882c <_fflush_r+0xc>
 8008862:	89a3      	ldrh	r3, [r4, #12]
 8008864:	059b      	lsls	r3, r3, #22
 8008866:	d4e1      	bmi.n	800882c <_fflush_r+0xc>
 8008868:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800886a:	f7fe f9a1 	bl	8006bb0 <__retarget_lock_release_recursive>
 800886e:	e7dd      	b.n	800882c <_fflush_r+0xc>

08008870 <fiprintf>:
 8008870:	b40e      	push	{r1, r2, r3}
 8008872:	b503      	push	{r0, r1, lr}
 8008874:	4601      	mov	r1, r0
 8008876:	ab03      	add	r3, sp, #12
 8008878:	4805      	ldr	r0, [pc, #20]	; (8008890 <fiprintf+0x20>)
 800887a:	f853 2b04 	ldr.w	r2, [r3], #4
 800887e:	6800      	ldr	r0, [r0, #0]
 8008880:	9301      	str	r3, [sp, #4]
 8008882:	f7ff fe2d 	bl	80084e0 <_vfiprintf_r>
 8008886:	b002      	add	sp, #8
 8008888:	f85d eb04 	ldr.w	lr, [sp], #4
 800888c:	b003      	add	sp, #12
 800888e:	4770      	bx	lr
 8008890:	20000068 	.word	0x20000068

08008894 <__swhatbuf_r>:
 8008894:	b570      	push	{r4, r5, r6, lr}
 8008896:	460c      	mov	r4, r1
 8008898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889c:	2900      	cmp	r1, #0
 800889e:	b096      	sub	sp, #88	; 0x58
 80088a0:	4615      	mov	r5, r2
 80088a2:	461e      	mov	r6, r3
 80088a4:	da0d      	bge.n	80088c2 <__swhatbuf_r+0x2e>
 80088a6:	89a3      	ldrh	r3, [r4, #12]
 80088a8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80088ac:	f04f 0100 	mov.w	r1, #0
 80088b0:	bf0c      	ite	eq
 80088b2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80088b6:	2340      	movne	r3, #64	; 0x40
 80088b8:	2000      	movs	r0, #0
 80088ba:	6031      	str	r1, [r6, #0]
 80088bc:	602b      	str	r3, [r5, #0]
 80088be:	b016      	add	sp, #88	; 0x58
 80088c0:	bd70      	pop	{r4, r5, r6, pc}
 80088c2:	466a      	mov	r2, sp
 80088c4:	f000 f862 	bl	800898c <_fstat_r>
 80088c8:	2800      	cmp	r0, #0
 80088ca:	dbec      	blt.n	80088a6 <__swhatbuf_r+0x12>
 80088cc:	9901      	ldr	r1, [sp, #4]
 80088ce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80088d2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80088d6:	4259      	negs	r1, r3
 80088d8:	4159      	adcs	r1, r3
 80088da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088de:	e7eb      	b.n	80088b8 <__swhatbuf_r+0x24>

080088e0 <__smakebuf_r>:
 80088e0:	898b      	ldrh	r3, [r1, #12]
 80088e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80088e4:	079d      	lsls	r5, r3, #30
 80088e6:	4606      	mov	r6, r0
 80088e8:	460c      	mov	r4, r1
 80088ea:	d507      	bpl.n	80088fc <__smakebuf_r+0x1c>
 80088ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80088f0:	6023      	str	r3, [r4, #0]
 80088f2:	6123      	str	r3, [r4, #16]
 80088f4:	2301      	movs	r3, #1
 80088f6:	6163      	str	r3, [r4, #20]
 80088f8:	b002      	add	sp, #8
 80088fa:	bd70      	pop	{r4, r5, r6, pc}
 80088fc:	ab01      	add	r3, sp, #4
 80088fe:	466a      	mov	r2, sp
 8008900:	f7ff ffc8 	bl	8008894 <__swhatbuf_r>
 8008904:	9900      	ldr	r1, [sp, #0]
 8008906:	4605      	mov	r5, r0
 8008908:	4630      	mov	r0, r6
 800890a:	f7ff f85f 	bl	80079cc <_malloc_r>
 800890e:	b948      	cbnz	r0, 8008924 <__smakebuf_r+0x44>
 8008910:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008914:	059a      	lsls	r2, r3, #22
 8008916:	d4ef      	bmi.n	80088f8 <__smakebuf_r+0x18>
 8008918:	f023 0303 	bic.w	r3, r3, #3
 800891c:	f043 0302 	orr.w	r3, r3, #2
 8008920:	81a3      	strh	r3, [r4, #12]
 8008922:	e7e3      	b.n	80088ec <__smakebuf_r+0xc>
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	6020      	str	r0, [r4, #0]
 8008928:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800892c:	81a3      	strh	r3, [r4, #12]
 800892e:	9b00      	ldr	r3, [sp, #0]
 8008930:	6163      	str	r3, [r4, #20]
 8008932:	9b01      	ldr	r3, [sp, #4]
 8008934:	6120      	str	r0, [r4, #16]
 8008936:	b15b      	cbz	r3, 8008950 <__smakebuf_r+0x70>
 8008938:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800893c:	4630      	mov	r0, r6
 800893e:	f000 f837 	bl	80089b0 <_isatty_r>
 8008942:	b128      	cbz	r0, 8008950 <__smakebuf_r+0x70>
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	f023 0303 	bic.w	r3, r3, #3
 800894a:	f043 0301 	orr.w	r3, r3, #1
 800894e:	81a3      	strh	r3, [r4, #12]
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	431d      	orrs	r5, r3
 8008954:	81a5      	strh	r5, [r4, #12]
 8008956:	e7cf      	b.n	80088f8 <__smakebuf_r+0x18>

08008958 <memmove>:
 8008958:	4288      	cmp	r0, r1
 800895a:	b510      	push	{r4, lr}
 800895c:	eb01 0402 	add.w	r4, r1, r2
 8008960:	d902      	bls.n	8008968 <memmove+0x10>
 8008962:	4284      	cmp	r4, r0
 8008964:	4623      	mov	r3, r4
 8008966:	d807      	bhi.n	8008978 <memmove+0x20>
 8008968:	1e43      	subs	r3, r0, #1
 800896a:	42a1      	cmp	r1, r4
 800896c:	d008      	beq.n	8008980 <memmove+0x28>
 800896e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008972:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008976:	e7f8      	b.n	800896a <memmove+0x12>
 8008978:	4402      	add	r2, r0
 800897a:	4601      	mov	r1, r0
 800897c:	428a      	cmp	r2, r1
 800897e:	d100      	bne.n	8008982 <memmove+0x2a>
 8008980:	bd10      	pop	{r4, pc}
 8008982:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008986:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800898a:	e7f7      	b.n	800897c <memmove+0x24>

0800898c <_fstat_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	4d07      	ldr	r5, [pc, #28]	; (80089ac <_fstat_r+0x20>)
 8008990:	2300      	movs	r3, #0
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	4611      	mov	r1, r2
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	f7f9 fea6 	bl	80026ea <_fstat>
 800899e:	1c43      	adds	r3, r0, #1
 80089a0:	d102      	bne.n	80089a8 <_fstat_r+0x1c>
 80089a2:	682b      	ldr	r3, [r5, #0]
 80089a4:	b103      	cbz	r3, 80089a8 <_fstat_r+0x1c>
 80089a6:	6023      	str	r3, [r4, #0]
 80089a8:	bd38      	pop	{r3, r4, r5, pc}
 80089aa:	bf00      	nop
 80089ac:	20000528 	.word	0x20000528

080089b0 <_isatty_r>:
 80089b0:	b538      	push	{r3, r4, r5, lr}
 80089b2:	4d06      	ldr	r5, [pc, #24]	; (80089cc <_isatty_r+0x1c>)
 80089b4:	2300      	movs	r3, #0
 80089b6:	4604      	mov	r4, r0
 80089b8:	4608      	mov	r0, r1
 80089ba:	602b      	str	r3, [r5, #0]
 80089bc:	f7f9 fea5 	bl	800270a <_isatty>
 80089c0:	1c43      	adds	r3, r0, #1
 80089c2:	d102      	bne.n	80089ca <_isatty_r+0x1a>
 80089c4:	682b      	ldr	r3, [r5, #0]
 80089c6:	b103      	cbz	r3, 80089ca <_isatty_r+0x1a>
 80089c8:	6023      	str	r3, [r4, #0]
 80089ca:	bd38      	pop	{r3, r4, r5, pc}
 80089cc:	20000528 	.word	0x20000528

080089d0 <_sbrk_r>:
 80089d0:	b538      	push	{r3, r4, r5, lr}
 80089d2:	4d06      	ldr	r5, [pc, #24]	; (80089ec <_sbrk_r+0x1c>)
 80089d4:	2300      	movs	r3, #0
 80089d6:	4604      	mov	r4, r0
 80089d8:	4608      	mov	r0, r1
 80089da:	602b      	str	r3, [r5, #0]
 80089dc:	f7f9 feae 	bl	800273c <_sbrk>
 80089e0:	1c43      	adds	r3, r0, #1
 80089e2:	d102      	bne.n	80089ea <_sbrk_r+0x1a>
 80089e4:	682b      	ldr	r3, [r5, #0]
 80089e6:	b103      	cbz	r3, 80089ea <_sbrk_r+0x1a>
 80089e8:	6023      	str	r3, [r4, #0]
 80089ea:	bd38      	pop	{r3, r4, r5, pc}
 80089ec:	20000528 	.word	0x20000528

080089f0 <memcpy>:
 80089f0:	440a      	add	r2, r1
 80089f2:	4291      	cmp	r1, r2
 80089f4:	f100 33ff 	add.w	r3, r0, #4294967295
 80089f8:	d100      	bne.n	80089fc <memcpy+0xc>
 80089fa:	4770      	bx	lr
 80089fc:	b510      	push	{r4, lr}
 80089fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a06:	4291      	cmp	r1, r2
 8008a08:	d1f9      	bne.n	80089fe <memcpy+0xe>
 8008a0a:	bd10      	pop	{r4, pc}

08008a0c <abort>:
 8008a0c:	b508      	push	{r3, lr}
 8008a0e:	2006      	movs	r0, #6
 8008a10:	f000 f890 	bl	8008b34 <raise>
 8008a14:	2001      	movs	r0, #1
 8008a16:	f7f9 fe19 	bl	800264c <_exit>

08008a1a <_calloc_r>:
 8008a1a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a1c:	fba1 2402 	umull	r2, r4, r1, r2
 8008a20:	b94c      	cbnz	r4, 8008a36 <_calloc_r+0x1c>
 8008a22:	4611      	mov	r1, r2
 8008a24:	9201      	str	r2, [sp, #4]
 8008a26:	f7fe ffd1 	bl	80079cc <_malloc_r>
 8008a2a:	9a01      	ldr	r2, [sp, #4]
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	b930      	cbnz	r0, 8008a3e <_calloc_r+0x24>
 8008a30:	4628      	mov	r0, r5
 8008a32:	b003      	add	sp, #12
 8008a34:	bd30      	pop	{r4, r5, pc}
 8008a36:	220c      	movs	r2, #12
 8008a38:	6002      	str	r2, [r0, #0]
 8008a3a:	2500      	movs	r5, #0
 8008a3c:	e7f8      	b.n	8008a30 <_calloc_r+0x16>
 8008a3e:	4621      	mov	r1, r4
 8008a40:	f7fd ffdc 	bl	80069fc <memset>
 8008a44:	e7f4      	b.n	8008a30 <_calloc_r+0x16>

08008a46 <__ascii_mbtowc>:
 8008a46:	b082      	sub	sp, #8
 8008a48:	b901      	cbnz	r1, 8008a4c <__ascii_mbtowc+0x6>
 8008a4a:	a901      	add	r1, sp, #4
 8008a4c:	b142      	cbz	r2, 8008a60 <__ascii_mbtowc+0x1a>
 8008a4e:	b14b      	cbz	r3, 8008a64 <__ascii_mbtowc+0x1e>
 8008a50:	7813      	ldrb	r3, [r2, #0]
 8008a52:	600b      	str	r3, [r1, #0]
 8008a54:	7812      	ldrb	r2, [r2, #0]
 8008a56:	1e10      	subs	r0, r2, #0
 8008a58:	bf18      	it	ne
 8008a5a:	2001      	movne	r0, #1
 8008a5c:	b002      	add	sp, #8
 8008a5e:	4770      	bx	lr
 8008a60:	4610      	mov	r0, r2
 8008a62:	e7fb      	b.n	8008a5c <__ascii_mbtowc+0x16>
 8008a64:	f06f 0001 	mvn.w	r0, #1
 8008a68:	e7f8      	b.n	8008a5c <__ascii_mbtowc+0x16>

08008a6a <_realloc_r>:
 8008a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6e:	4680      	mov	r8, r0
 8008a70:	4614      	mov	r4, r2
 8008a72:	460e      	mov	r6, r1
 8008a74:	b921      	cbnz	r1, 8008a80 <_realloc_r+0x16>
 8008a76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7a:	4611      	mov	r1, r2
 8008a7c:	f7fe bfa6 	b.w	80079cc <_malloc_r>
 8008a80:	b92a      	cbnz	r2, 8008a8e <_realloc_r+0x24>
 8008a82:	f7fe ff2f 	bl	80078e4 <_free_r>
 8008a86:	4625      	mov	r5, r4
 8008a88:	4628      	mov	r0, r5
 8008a8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a8e:	f000 f86d 	bl	8008b6c <_malloc_usable_size_r>
 8008a92:	4284      	cmp	r4, r0
 8008a94:	4607      	mov	r7, r0
 8008a96:	d802      	bhi.n	8008a9e <_realloc_r+0x34>
 8008a98:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a9c:	d812      	bhi.n	8008ac4 <_realloc_r+0x5a>
 8008a9e:	4621      	mov	r1, r4
 8008aa0:	4640      	mov	r0, r8
 8008aa2:	f7fe ff93 	bl	80079cc <_malloc_r>
 8008aa6:	4605      	mov	r5, r0
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d0ed      	beq.n	8008a88 <_realloc_r+0x1e>
 8008aac:	42bc      	cmp	r4, r7
 8008aae:	4622      	mov	r2, r4
 8008ab0:	4631      	mov	r1, r6
 8008ab2:	bf28      	it	cs
 8008ab4:	463a      	movcs	r2, r7
 8008ab6:	f7ff ff9b 	bl	80089f0 <memcpy>
 8008aba:	4631      	mov	r1, r6
 8008abc:	4640      	mov	r0, r8
 8008abe:	f7fe ff11 	bl	80078e4 <_free_r>
 8008ac2:	e7e1      	b.n	8008a88 <_realloc_r+0x1e>
 8008ac4:	4635      	mov	r5, r6
 8008ac6:	e7df      	b.n	8008a88 <_realloc_r+0x1e>

08008ac8 <__ascii_wctomb>:
 8008ac8:	b149      	cbz	r1, 8008ade <__ascii_wctomb+0x16>
 8008aca:	2aff      	cmp	r2, #255	; 0xff
 8008acc:	bf85      	ittet	hi
 8008ace:	238a      	movhi	r3, #138	; 0x8a
 8008ad0:	6003      	strhi	r3, [r0, #0]
 8008ad2:	700a      	strbls	r2, [r1, #0]
 8008ad4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008ad8:	bf98      	it	ls
 8008ada:	2001      	movls	r0, #1
 8008adc:	4770      	bx	lr
 8008ade:	4608      	mov	r0, r1
 8008ae0:	4770      	bx	lr

08008ae2 <_raise_r>:
 8008ae2:	291f      	cmp	r1, #31
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4604      	mov	r4, r0
 8008ae8:	460d      	mov	r5, r1
 8008aea:	d904      	bls.n	8008af6 <_raise_r+0x14>
 8008aec:	2316      	movs	r3, #22
 8008aee:	6003      	str	r3, [r0, #0]
 8008af0:	f04f 30ff 	mov.w	r0, #4294967295
 8008af4:	bd38      	pop	{r3, r4, r5, pc}
 8008af6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008af8:	b112      	cbz	r2, 8008b00 <_raise_r+0x1e>
 8008afa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008afe:	b94b      	cbnz	r3, 8008b14 <_raise_r+0x32>
 8008b00:	4620      	mov	r0, r4
 8008b02:	f000 f831 	bl	8008b68 <_getpid_r>
 8008b06:	462a      	mov	r2, r5
 8008b08:	4601      	mov	r1, r0
 8008b0a:	4620      	mov	r0, r4
 8008b0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008b10:	f000 b818 	b.w	8008b44 <_kill_r>
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d00a      	beq.n	8008b2e <_raise_r+0x4c>
 8008b18:	1c59      	adds	r1, r3, #1
 8008b1a:	d103      	bne.n	8008b24 <_raise_r+0x42>
 8008b1c:	2316      	movs	r3, #22
 8008b1e:	6003      	str	r3, [r0, #0]
 8008b20:	2001      	movs	r0, #1
 8008b22:	e7e7      	b.n	8008af4 <_raise_r+0x12>
 8008b24:	2400      	movs	r4, #0
 8008b26:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008b2a:	4628      	mov	r0, r5
 8008b2c:	4798      	blx	r3
 8008b2e:	2000      	movs	r0, #0
 8008b30:	e7e0      	b.n	8008af4 <_raise_r+0x12>
	...

08008b34 <raise>:
 8008b34:	4b02      	ldr	r3, [pc, #8]	; (8008b40 <raise+0xc>)
 8008b36:	4601      	mov	r1, r0
 8008b38:	6818      	ldr	r0, [r3, #0]
 8008b3a:	f7ff bfd2 	b.w	8008ae2 <_raise_r>
 8008b3e:	bf00      	nop
 8008b40:	20000068 	.word	0x20000068

08008b44 <_kill_r>:
 8008b44:	b538      	push	{r3, r4, r5, lr}
 8008b46:	4d07      	ldr	r5, [pc, #28]	; (8008b64 <_kill_r+0x20>)
 8008b48:	2300      	movs	r3, #0
 8008b4a:	4604      	mov	r4, r0
 8008b4c:	4608      	mov	r0, r1
 8008b4e:	4611      	mov	r1, r2
 8008b50:	602b      	str	r3, [r5, #0]
 8008b52:	f7f9 fd6b 	bl	800262c <_kill>
 8008b56:	1c43      	adds	r3, r0, #1
 8008b58:	d102      	bne.n	8008b60 <_kill_r+0x1c>
 8008b5a:	682b      	ldr	r3, [r5, #0]
 8008b5c:	b103      	cbz	r3, 8008b60 <_kill_r+0x1c>
 8008b5e:	6023      	str	r3, [r4, #0]
 8008b60:	bd38      	pop	{r3, r4, r5, pc}
 8008b62:	bf00      	nop
 8008b64:	20000528 	.word	0x20000528

08008b68 <_getpid_r>:
 8008b68:	f7f9 bd58 	b.w	800261c <_getpid>

08008b6c <_malloc_usable_size_r>:
 8008b6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b70:	1f18      	subs	r0, r3, #4
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	bfbc      	itt	lt
 8008b76:	580b      	ldrlt	r3, [r1, r0]
 8008b78:	18c0      	addlt	r0, r0, r3
 8008b7a:	4770      	bx	lr

08008b7c <_init>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	bf00      	nop
 8008b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b82:	bc08      	pop	{r3}
 8008b84:	469e      	mov	lr, r3
 8008b86:	4770      	bx	lr

08008b88 <_fini>:
 8008b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b8a:	bf00      	nop
 8008b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b8e:	bc08      	pop	{r3}
 8008b90:	469e      	mov	lr, r3
 8008b92:	4770      	bx	lr
